{
    "version": "https://jsonfeed.org/version/1",
    "title": "優萌初華",
    "subtitle": "有夢書架",
    "icon": "https://shoka.lostyu.me/images/favicon.ico",
    "description": "琉璃的医学 & 编程笔记",
    "home_page_url": "https://shoka.lostyu.me",
    "items": [
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmd-515/week-6/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmd-515/week-6/",
            "title": "Week 6. JPA Relationships",
            "date_published": "2021-02-26T08:46:55.000Z",
            "content_html": "<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"collections-of-basic-types\"><a class=\"anchor\" href=\"#collections-of-basic-types\">#</a> Collections of Basic Types</h2>\n<p><code>@CollectionTable</code></p>\n<dl>\n<dt><code>@ElementCollection</code>  (Goncalves Ex23)</dt>\n<dd>Useful for storing Set or List of basic types such as Strings or Integers</dd>\n</dl>\n<p><img data-src=\"https://i.loli.net/2021/03/01/B2yFcbMXptqjxHC.jpg\" alt=\"\" /></p>\n<dl>\n<dt><code>@MapKeyColumn</code>  (Goncalves Ex24)</dt>\n<dd>Useful for storing Map of basic types such as  <code>&lt;Integer,String&gt;</code></dd>\n</dl>\n<p><img data-src=\"https://i.loli.net/2021/03/01/6gxQI47wED2JB19.jpg\" alt=\"\" /></p>\n<h2 id=\"relationship-mapping\"><a class=\"anchor\" href=\"#relationship-mapping\">#</a> Relationship Mapping</h2>\n<ul>\n<li>Entities have relationships with other entities</li>\n<li>Direction or Navigation\n<ul>\n<li>Unidirectional 单向</li>\n<li>Bidirectional 双向</li>\n</ul>\n</li>\n<li>Multiplicity or Cardinality\n<ul>\n<li>One-to-one</li>\n<li>One-to-many</li>\n<li>Many-to-one</li>\n<li>Many-to-many</li>\n</ul>\n</li>\n</ul>\n<p>从左到右读，Many Appointment to One Pet</p>\n<h3 id=\"unidirectional\"><a class=\"anchor\" href=\"#unidirectional\">#</a> Unidirectional</h3>\n<ul>\n<li>Has only an owning side 只有一面</li>\n<li>In this example, you can only access customer addresses via the Customer entity (the owner)<br />\n 在此示例中，您只能通过客户实体访问客户地址</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2021/03/01/jlIpR3JdqbhCoy9.jpg\" alt=\"\" /></p>\n<h3 id=\"bidirectional\"><a class=\"anchor\" href=\"#bidirectional\">#</a> Bidirectional</h3>\n<ul>\n<li>Has both an owning and an inverse side</li>\n<li>In this example, you can access addresses from the customer entity, but you can also access customers from the address entity<br />\n 在此示例中，您可以从客户实体访问地址，但也可以从地址实体访问客户</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2021/03/02/RPW31f4bgwK6mEy.jpg\" alt=\"\" /></p>\n<h3 id=\"one-to-one\"><a class=\"anchor\" href=\"#one-to-one\">#</a> One-to-One</h3>\n<p>Each entity instance is related to a single instance of another entity.<br />\n 每个实体实例都与另一个实体的单个实例相关。</p>\n<dl>\n<dt><code>@OneToOne</code>  Unidirectional</dt>\n<dd>\n<ul>\n<li>Annotation goes on owning side</li>\n<li>FK is on owning entity’s table</li>\n<li>Use  <code>@JoinColumn</code>  on owner to customize FK\n<ul>\n<li>Goncalves Ex34 (CBE)</li>\n<li>Goncalves Ex39 (with  <code>@JoinColumn</code> )</li>\n</ul>\n</li>\n</ul>\n</dd>\n<dt><code>@OneToOne</code>  Bidirectional</dt>\n<dd>\n<ul>\n<li>Annotation goes on both sides</li>\n<li><strong>Inverse</strong> side uses mappedBy to point to owner</li>\n<li>FK is on <strong>owning</strong> entity’s table</li>\n<li>Use  <code>@JoinColumn</code>  on <strong>owner</strong> to customize FK</li>\n<li>Application must manage both sides of the relationship\n<ul>\n<li>Can be done programmatically</li>\n<li>Can be done through setter methods</li>\n</ul>\n</li>\n</ul>\n</dd>\n</dl>\n<h3 id=\"one-to-many\"><a class=\"anchor\" href=\"#one-to-many\">#</a> One-to-Many</h3>\n<p>An entity instance can be related to multiple instances of the other entities.<br />\n 一个实体实例可以与其他实体的多个实例相关。</p>\n<dl>\n<dt><code>@JoinTable</code>  (Goncalves Ex43)</dt>\n<dd>\n<ul>\n<li>name</li>\n<li>joinColumns</li>\n<li>inverseJoinColumns</li>\n</ul>\n</dd>\n</dl>\n<p><img data-src=\"https://i.loli.net/2021/03/02/Ej5OdN41PiWIgSQ.jpg\" alt=\"\" /></p>\n<dl>\n<dt><code>@OneToMany</code>  Unidirectional</dt>\n<dd>\n<ul>\n<li>Annotation goes on owning side</li>\n<li>Defaults to join table</li>\n<li>Use  <code>@JoinTable</code>  on owner to customize FKs in join table\n<ul>\n<li>joinColumns</li>\n<li>inverseJoinColumns</li>\n</ul>\n</li>\n</ul>\n</dd>\n</dl>\n<h3 id=\"many-to-one\"><a class=\"anchor\" href=\"#many-to-one\">#</a> Many-to-One</h3>\n<p>Multiple instances of an entity can be related to a single instance of the other entity. This multiplicity is the opposite of a one-to-many relationship.<br />\n 一个实体的多个实例可以与另一个实体的单个实例相关。这种多样性与一对多关系相反。</p>\n<p><code>@JoinColumn</code> <br />\n<img data-src=\"https://i.loli.net/2021/03/02/NrUGYiJaXFWvqk2.jpg\" alt=\"\" /></p>\n<dl>\n<dt><code>@ManyToOne</code>  Unidirectional</dt>\n<dd>\n<ul>\n<li>Annotation goes on owning side (always the many side for ManyToOne)</li>\n<li>Defaults to join column (FK on the many side)</li>\n<li>Use  <code>@JoinColumn</code>  on owner to customize FK</li>\n</ul>\n</dd>\n<dt><code>@ManyToOne</code>  and  <code>@OneToMany</code>  Bidirectional</dt>\n<dd>\n<ul>\n<li>Annotation goes on both sides</li>\n<li><strong>Inverse</strong> (OneToMany) side uses mappedBy to point to owner</li>\n<li>Defaults to join column (FK on many side)</li>\n<li>Use  <code>@JoinColumn</code>  on owner to customize FK</li>\n<li>Application must manage both sides of the relationship\n<ul>\n<li>Can be done through setter and add methods</li>\n</ul>\n</li>\n</ul>\n</dd>\n</dl>\n<h3 id=\"many-to-many\"><a class=\"anchor\" href=\"#many-to-many\">#</a> Many-to-Many</h3>\n<p>The entity instances can be related to multiple instances of each other.</p>\n<p><img data-src=\"https://i.loli.net/2021/03/02/CAWSJxbtOZy9Kqz.jpg\" alt=\"\" /></p>\n<dl>\n<dt><code>@ManyToMany</code></dt>\n<dd>\n<ul>\n<li>Goncalves Ex46</li>\n<li><code>@JoinTable</code>  with joinColumns and inverseJoinColumns, and mappedBy on inverse Annotation goes on both sides</li>\n<li>Use  <code>@JoinTable</code>  on owner to customize FKs in join table\n<ul>\n<li>joinColumns</li>\n<li>inverseJoinColumns</li>\n</ul>\n</li>\n<li>Inverse side uses mappedBy to point to owner</li>\n<li>Application must manage both sides of the relationship\n<ul>\n<li>Can be done through add methods – remember these are collections</li>\n</ul>\n</li>\n</ul>\n</dd>\n</dl>\n<h3 id=\"relationship-mapping-tips\"><a class=\"anchor\" href=\"#relationship-mapping-tips\">#</a> Relationship Mapping Tips</h3>\n<ul>\n<li>Navigating relationships on a detached entity will cause exceptions<br />\n 在独立实体上导航关系将导致异常</li>\n<li>Application bears the responsibility of maintaining relationships between objects<br />\n 应用程序负责维护对象之间的关系\n<ul>\n<li>We can use setters and add methods<br />\n 我们可以使用设置器和添加方法</li>\n</ul>\n</li>\n<li>Don’t forget to initialize collections!<br />\n 不要忘记初始化集合！</li>\n<li>Table/Entity with FK is the owner</li>\n</ul>\n<h3 id=\"bidirectional-relationship-rules\"><a class=\"anchor\" href=\"#bidirectional-relationship-rules\">#</a> Bidirectional Relationship Rules</h3>\n<ul>\n<li>\n<p>The inverse side of a bidirectional relationship must refer to its owning side by using the mappedBy element of the  <code>@OneToOne</code> ,  <code>@OneToMany</code> , or  <code>@ManyToMany</code>  annotation. The mappedBy element designates the property or field in the entity that is the owner of the relationship.</p>\n</li>\n<li>\n<p>The many side of many-to-one bidirectional relationships must not define the mappedBy element. The many side is always the owning side of the relationship.</p>\n</li>\n<li>\n<p>For one-to-one bidirectional relationships, the owning side corresponds to the side that contains the corresponding foreign key.</p>\n</li>\n<li>\n<p>For many-to-many bidirectional relationships, either side may be the owning side.</p>\n</li>\n</ul>\n<h2 id=\"ordering-relationships\"><a class=\"anchor\" href=\"#ordering-relationships\">#</a> Ordering Relationships</h2>\n<dl>\n<dt><code>@OrderBy</code>  (Goncalves Ex49)</dt>\n<dd>No effect on database schema</dd>\n<dt><code>@OrderColumn</code>  (Goncalves Ex51)</dt>\n<dd>Impacts database schema</dd>\n</dl>\n<h2 id=\"inheritance\"><a class=\"anchor\" href=\"#inheritance\">#</a> Inheritance</h2>\n<h3 id=\"inheritance-mappings-继承映射\"><a class=\"anchor\" href=\"#inheritance-mappings-继承映射\">#</a> Inheritance Mappings 继承映射</h3>\n<ul>\n<li><code>SINGLE_TABLE</code>  strategy\n<ul>\n<li>A single table per class hierarchy</li>\n<li><code>@DiscriminatorValue</code>  (Goncalves Ch5 Ex56)</li>\n</ul>\n</li>\n<li><code>JOINED</code>  strategy (Goncalves Ch5 Ex59)</li>\n<li><code>TABLE_PER_CLASS</code>  strategy (Ch5 Ex60)\n<ul>\n<li>This strategy is not required by the JPA specification. Avoid for more portable code.<br />\nJPA 规范不需要此策略。避免使用更多可移植的代码。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"inheritance-hierarchy-继承层次\"><a class=\"anchor\" href=\"#inheritance-hierarchy-继承层次\">#</a> Inheritance Hierarchy 继承层次</h3>\n<ul>\n<li>Entities can inherit from<br />\n 实体可以继承\n<ul>\n<li>Entity superclasses (as we have just seen with inheritance mapping)<br />\n 实体超类（就像我们在继承映射中看到的那样）</li>\n<li>Nonentity superclasses (Goncalves Ch5 Ex63)<br />\n 非实体超类</li>\n</ul>\n</li>\n</ul>\n<p><code>@MappedSuperclass</code>  (Goncalves Ch5 Ex66)<br />\n- Contain persistent state and mappings, but are not entities<br />\n 包含持久状态和映射，但不是实体</p>\n<h3 id=\"cascading-级联\"><a class=\"anchor\" href=\"#cascading-级联\">#</a> Cascading 级联</h3>\n<table>\n<thead>\n<tr>\n<th>Cascade</th>\n<th>Type Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<p><code>PERSIST</code></p>\n</td>\n<td>\n<p>Cascades persist operations to the target of the association<br />\n 级联将操作保持到关联目标</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>REMOVE</code></p>\n</td>\n<td>\n<p>Cascades remove operations to the target of the association<br />\n 级联删除对关联目标的操作</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>MERGE</code></p>\n</td>\n<td>\n<p>Cascades merge operations to the target of the association<br />\n 级联将操作合并到关联的目标</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>REFRESH</code></p>\n</td>\n<td>\n<p>Cascades refresh operations to the target of the association<br />\n 级联刷新操作以达到关联目标</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>DETACH</code></p>\n</td>\n<td>\n<p>Cascades detach operations to the target of the association<br />\n 级联将操作分离到关联目标</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>ALL</code></p>\n</td>\n<td>\n<p>Declares that all the previous operations should be cascaded<br />\n 声明所有先前的操作都应级联</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"concurrency-并发\"><a class=\"anchor\" href=\"#concurrency-并发\">#</a> Concurrency 并发</h2>\n<ul>\n<li>\n<p>Versioning</p>\n<ul>\n<li><code>@Version</code>  read-only attribute</li>\n<li>Not required, but recommended if the entity can be modified concurrently by more than one process or thread</li>\n<li>Automatically enables optimistic locking</li>\n</ul>\n</li>\n<li>\n<p>Locking</p>\n<ul>\n<li>Optimistic – Obtain lock before commit</li>\n<li>Pessimistic – Very resource intensive</li>\n</ul>\n</li>\n<li>\n<p>Goncalves Chapter 6 Example 36</p>\n</li>\n</ul>\n<h3 id=\"optimistic-locking\"><a class=\"anchor\" href=\"#optimistic-locking\">#</a> Optimistic Locking</h3>\n<p><img data-src=\"https://i.loli.net/2021/03/02/EHmDtBRiZsqGN4I.jpg\" alt=\"\" /></p>\n<h2 id=\"callbacks\"><a class=\"anchor\" href=\"#callbacks\">#</a> Callbacks</h2>\n<p><img data-src=\"https://i.loli.net/2021/03/02/USbrjRK1wWfdLNF.jpg\" alt=\"\" /></p>\n<table>\n<thead>\n<tr>\n<th>Annotation</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@PrePersist</code></td>\n<td>Marks a method to be invoked before  <code>EntityManager.persist()</code>  is executed.</td>\n</tr>\n<tr>\n<td><code>@PostPersist</code></td>\n<td>Marks a method to be invoked after the entity has been persisted. If the entity autogenerates its primary key (with  <code>@GeneratedValue</code> ), the value is available in the method.</td>\n</tr>\n<tr>\n<td><code>@PreUpdate</code></td>\n<td>Marks a method to be invoked before a database update operation is performed(calling the entity setters or the  <code>EntityManager.merge()</code>  method).</td>\n</tr>\n<tr>\n<td><code>@PostUpdate</code></td>\n<td>Marks a method to be invoked after a database update operation is performed.</td>\n</tr>\n<tr>\n<td><code>@PreRemove</code></td>\n<td>Marks a method to be invoked before  <code>EntityManager.remove()</code>  is executed.</td>\n</tr>\n<tr>\n<td><code>@PostRemove</code></td>\n<td>Marks a method to be invoked after the entity has been removed.</td>\n</tr>\n<tr>\n<td><code>@PostLoad</code></td>\n<td>Marks a method to be invoked after an entity is loaded (with a JPQL query or an  <code>EntityManager.find()</code> ) or refreshed from the underlying database</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"entity-listeners\"><a class=\"anchor\" href=\"#entity-listeners\">#</a> Entity Listeners</h3>\n<p>Can be used to extract the business logic to a class for re-use among multiple entities.<br />\n 可用于将业务逻辑提取到一个类中，以便在多个实体之间重用。</p>\n<p>Goncalves Chapter 6 Examples 39 and 42</p>\n<h3 id=\"callback-methods\"><a class=\"anchor\" href=\"#callback-methods\">#</a> Callback Methods</h3>\n<p>Work well when you have business logic only related to that entity.<br />\n 当您仅具有与该实体相关的业务逻辑时，可以很好地工作。</p>\n<p>Goncalves Chapter 6 Example 38</p>\n<h1 id=\"lab\"><a class=\"anchor\" href=\"#lab\">#</a> Lab</h1>\n<h2 id=\"summary\"><a class=\"anchor\" href=\"#summary\">#</a> Summary</h2>\n<p>The purpose of this assignment is to expand our final project business domain with additional entities, implement relationships within our business domain, explore the JPA requirements for applications to manage both sides of bi-directional relationships, and demonstrate with JUnit test cases.  Finally, this project also incorporates both a maven web application and JUnit testing within the same project, demonstrating the use of two separate persistence units, one JTA (for use by Payara while running our web application) and one RESOURCE_LOCAL (from use by Java SE while running unit tests).</p>\n<h2 id=\"requirements\"><a class=\"anchor\" href=\"#requirements\">#</a> Requirements</h2>\n<h3 id=\"documentation\"><a class=\"anchor\" href=\"#documentation\">#</a> Documentation</h3>\n<p>You can take a break from the wiki this week.  No docs required for this lab.  I will be asking you to write about your Final Project design in detail, including the relationships between your entities, on the written Midterm - so use this Lab to experiment with your relationships, and document the design on the written Midterm question.</p>\n<h3 id=\"database-setup\"><a class=\"anchor\" href=\"#database-setup\">#</a> Database Setup</h3>\n<p>Use your itmd4515 database and user from Lab 2 - Setup and Introductory Webapp.</p>\n<h3 id=\"project-setup\"><a class=\"anchor\" href=\"#project-setup\">#</a> Project Setup</h3>\n<p>Your uid-fp repository should already be setup, and you should continue pushing your commits into GitHub for this lab.</p>\n<blockquote>\n<p>Deviating from the package convention given above will mean that you can not benefit from Sonar and other automated tools, and I will not be able to fix this. Please follow the specification!</p>\n<p>We will be working in this repository from now until the end of the semester.  Please remember, I will be looking for multiple commits.  I would suggest using the lab number in your commit message as a prefix so you can also review the history throughout the semester, for example:</p>\n<ul>\n<li>Lab 6 - Initial Commit</li>\n<li>Lab 6 - OneToOne unidirectional relationship between Foo and Bar</li>\n<li>Lab 6 - Test cases for unidirectional 1:1 relationship between Foo and Bar</li>\n<li>Lab 6 - ManyToMany bidirectional relationship between Widget and Gizmo</li>\n<li>Lab 6 - Test cases for bidirectional M:M relationship between Widget and Gizmo</li>\n</ul>\n</blockquote>\n<h3 id=\"project-requirements\"><a class=\"anchor\" href=\"#project-requirements\">#</a> Project Requirements</h3>\n<ol>\n<li>\n<p>If you haven't already (from <a href=\"/computer-science/mse/itmd-515/week-4/\">Lab 4 - Web Applications, Servlet and JSP</a>), define a JDBC Resource for use by your application.  There are <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnBheWFyYS5maXNoL2FuLWludHJvLXRvLWNvbm5lY3Rpb24tcG9vbHMtaW4tcGF5YXJhLXNlcnZlci01\">many many ways</span> to do this:</p>\n<ol>\n<li>Creating a Payara JDBC Connection Pool and JDBC Resource via the admin console</li>\n<li>Creating a Payara JDBC Connection Pool and JDBC Resource via the asadmin command line utility</li>\n<li>Defining a JDBC Resource directly in Payara domain configuration file</li>\n<li>Defining a JDBC Resource via web.xml</li>\n<li>Defining a JDBC Resource via annotations in our code (this is what we are going to do.  the others might be more useful if you are hosting multiple applications in one server that could share a data source)</li>\n</ol>\n</li>\n<li>\n<p>Your  <code>@DataSourceDefinition</code>  should look something like below  If you have multiple parameters in your JDBC URL, you would include them as parameters via the annotation  <strong>Note</strong> - depending your operating system, you may also need to add  <code>useSSL=false</code> .</p>\n<blockquote>\n<p><strong>Important - If you are re-using your DataSourceDefinition from Lab 4, make sure you don't forget to change the databaseName to itmd4515 like me!</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@DataSourceDefinition</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"java:app/jdbc/itmd4515DS\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    className <span class=\"token operator\">=</span> <span class=\"token string\">\"com.mysql.cj.jdbc.MysqlDataSource\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    portNumber <span class=\"token operator\">=</span> <span class=\"token number\">3306</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    serverName <span class=\"token operator\">=</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    databaseName <span class=\"token operator\">=</span> <span class=\"token string\">\"itmd4515\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    user <span class=\"token operator\">=</span> <span class=\"token string\">\"itmd4515\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    password <span class=\"token operator\">=</span> <span class=\"token string\">\"itmd4515\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    properties <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"zeroDateTimeBehavior=CONVERT_TO_NULL\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"serverTimezone=America/Chicago\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"useSSL=false\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>Consider the deployment of your MySQL JDBC Driver.  Assuming you are also using a  <code>@DataSourceDefinition</code> , you should be able to include the JDBC driver with your application by ensuring it has default scope in your pom.xml as I am showing in class.  Alternatively, you can copy the MySQL JDBC jar file to your Payara domain's <strong>lib/ext</strong> (extensions) folder.</p>\n</li>\n<li>\n<p>Move your <strong>RESOURCE_LOCAL</strong> Persistence Unit from <a href=\"/computer-science/mse/itmd-515/week-5/\">Lab 5 - ORM and JPA</a> named <strong>itmd4515testPU</strong> to an appropriate location for testing.  In class, I will demonstrate that you can create this manually in the Files view by creating a  <code>src/test/resources</code>  folder, and then moving your  <code>persistence.xml</code> .  This may also necessitate specifying entities within the persistence unit - I will demonstrate this in class.</p>\n</li>\n<li>\n<p>Create a new <strong>JTA</strong> Persistence Unit named <strong>itmd4515PU</strong> connecting to your <strong>itmd4515</strong> database using the <strong>itmd4515</strong> user.  NetBeans seems to have lost the ability to create a JTA  <code>persistence.xml</code> , so create this manually by copying your test  <code>persistence.xml</code>  to the right location and modifying as shown in class.</p>\n<blockquote>\n<p>Once complete, you should have two  <code>persistence.xml</code>  files:</p>\n<p><code>src/main/resources/META-INF/persistence.xml</code>  <em>and</em>  <code>src/test/resources/META-INF/persistence.xml</code></p>\n<p>Make sure the Persistence Unit defined in each file has a different name, and that your test class refer to the <strong>itmd4515testPU</strong> PU.  We will move forward with test cases pointing to a &quot;test&quot; PU, and the web application pointing to a &quot;production&quot; PU.</p>\n<p>Make sure you double-check your  <code>pom.xml</code>  in case the NetBeans persistence wizard added an additional JPA dependency.  if so, remove it.  Your dependencies should continue to look like <a href=\"/computer-science/mse/itmd-515/week-5/\">Lab 5 - ORM and JPA</a>.</p>\n</blockquote>\n<details><summary>code</summary><div>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>src/main/resources/META-INF/persistence.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>persistence</span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://java.sun.com/xml/ns/persistence<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">&lt;!-- Define Persistence Unit --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>persistence-unit</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>itmd4515PU<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">transaction-type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>JTA<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>jta-data-source</span><span class=\"token punctuation\">></span></span>java:app/jdbc/itmd4515DS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>jta-data-source</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclude-unlisted-classes</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclude-unlisted-classes</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javax.persistence.schema-generation.database.action<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>drop-and-create<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>persistence-unit</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>persistence</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>src/test/resources/META-INF/persistence.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>persistence</span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://java.sun.com/xml/ns/persistence<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">&lt;!-- Define Persistence Unit --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>persistence-unit</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>itmd4515testPU<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">transaction-type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>RESOURCE_LOCAL<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>class</span><span class=\"token punctuation\">></span></span>edu.iit.sat.itmd4515.sliu136.domian.Album<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>class</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclude-unlisted-classes</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclude-unlisted-classes</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javax.persistence.jdbc.url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql://localhost:3306/itmd4515?zeroDateTimeBehavior=CONVERT_TO_NULL<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javax.persistence.jdbc.user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>itmd4515<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javax.persistence.jdbc.driver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mysql.cj.jdbc.Driver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javax.persistence.jdbc.password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>itmd4515<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javax.persistence.schema-generation.database.action<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>drop-and-create<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>persistence-unit</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>persistence</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></div></details>\n</li>\n<li>\n<p>If necessary, re-factor your entity classes so that they reside in a dedicated domain or model sub-package.  If necessary, update your test class(es) to reside in the same package.</p>\n</li>\n<li>\n<p>Based on your design thoughts from <a href=\"/computer-science/mse/itmd-515/week-5/\">Lab 5 - ORM and JPA</a>, introduce additional entities to your business domain.  The requirements are:</p>\n<ol>\n<li>\n<p>You must have at least four total entities in your <strong>business domain</strong>.  You may have as many as you want, but at least four.</p>\n</li>\n<li>\n<p>Remember, your final project must support the logical concept of multiple types of users or roles, but <strong>do not</strong> create these as entities. We must consider this now so we can introduce security in later projects, and we will use the JEE security framework to introduce these security entities later.  Likewise, do not create Admin as an entity.  <strong>Stay focused on entities within your domain.</strong></p>\n</li>\n</ol>\n</li>\n<li>\n<p>As before, all your entities should:</p>\n<ol>\n<li>\n<p>Use an appropriate PK strategy, and use an appropriate data type for your PK (as per the options discussed in class)</p>\n</li>\n<li>\n<p>Include appropriate equals and hashCode methods for your PK strategy</p>\n</li>\n<li>\n<p>Include at least one temporal data type</p>\n</li>\n<li>\n<p>Include at least three different data types.  There is no limit to the number of attributes you can include.  Your attributes should be sufficient to represent your entity.  Exercise good design and judgment.</p>\n</li>\n<li>\n<p>Include appropriate Constructors, accessors and mutators</p>\n</li>\n<li>\n<p>Include appropriate bean validation constraints based on your database types and sizes</p>\n</li>\n<li>\n<p>Include appropriate toString method for formatted output</p>\n</li>\n<li>\n<p>In other words, your entities should <strong>make sense.</strong>  Do not use mine from class demo.  I am coding fast and furious, to try and demonstrate all you need for 1 week in a few hours.</p>\n</li>\n</ol>\n</li>\n<li>\n<p>Include at least three relationships between your entities</p>\n<ol>\n<li>At least one of the relationships must be bi-directional</li>\n<li>Try and use different relationship types.  I will not look favorably on 3 OneToOne uni-directional relationships.  This is for you to learn about relationships, and to learn about relationships you need to introduce some real relationships into your business domain.</li>\n</ol>\n</li>\n<li>\n<p>Include appropriate helper methods in your business domain to manage both sides of the relationship.  Will be demonstrated in class.</p>\n</li>\n<li>\n<p>Two JUnit test cases to illustrate that your relationships are working as expected:</p>\n<ol>\n<li>One Uni-directional relationship test case</li>\n<li>One Bi-directional relationship test case\n<ol>\n<li>Consider the example I worked through in class.  You can assert that persist was successful, and that collections on both sides of a bi-directional relationship contain the expected entity.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>Please feel free to use Sonar to analyze your code before submitting.  I have created Sonar projects for everyone.</p>\n</li>\n<li>\n<p>Submit to Blackboard</p>\n<ol>\n<li>Right your <strong>uid-fp</strong> project and select &quot;Clean&quot;</li>\n<li>Go to your NetBeans Projects directory.  Create a zip file of the <strong>uid-fp</strong> folder and submit it to the Blackboard assignment.</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"extra-credit\"><a class=\"anchor\" href=\"#extra-credit\">#</a> Extra Credit</h3>\n<p>Graduate Students must also introduce JPA functionality to your existing web application by refactoring your Servlet from <a href=\"/computer-science/mse/itmd-515/week-4/\">Lab 4 - Web Applications, Servlet and JSP</a> to use an EntityManager and UserTransaction instead of JDBC.  This will require the following:</p>\n<ol>\n<li>Change your Lab 4 POJO to an Entity.\n<ol>\n<li>In most cases this will be as simple as adding an  <code>@Entity</code>  and  <code>@Id</code>  annotation to the class!</li>\n<li>If you run into sample database complications with the primary key, just add an auto-incrementing  <code>@Id</code>  field to the class.</li>\n<li>Don't over-think this part - I just want you to get the experience of using the  <code>@PersistenceConext</code>  annotation in your existing Servlet, and I want you to see how much easier it is to  <code>em.persist</code>  than use all that  <code>PreparedStatement</code>  code!</li>\n</ol>\n</li>\n<li>Obtain an  <code>EntityManager</code>  using  <code>@PersistenceContext</code>  injection, and a  <code>UserTransaction</code>  using  <code>resource</code>  injection.</li>\n<li>If user input from your form passes validation in your Servlet controller, persist the entity to the database.  How easy is that?  Easier than JDBC?</li>\n</ol>\n<p>By the end of your refactoring, you should not have any JDBC code left in your project, nor should you be using the  <code>@DataSource</code>  annotation.  Will demo in class.</p>\n",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMD 515. Advanced Software Programming",
                "Java"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmd-515/week-5/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmd-515/week-5/",
            "title": "Week 5. ORM and JPA",
            "date_published": "2021-02-20T08:46:55.000Z",
            "content_html": "<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"administrative-stufff-阅读材料\"><a class=\"anchor\" href=\"#administrative-stufff-阅读材料\">#</a> Administrative Stufff 阅读材料</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Fnb25jYWwvYWdvbmNhbC1ib29rLWphdmFlZTc=\">Goncalves Examples from Java EE 7</span></p>\n<p>Extra Reading (you decide if you want/need)</p>\n<ul>\n<li>Antonio Goncalves, Beginning Java EE 7, Chapter 4</li>\n<li>Antonio Goncalves, Beginning Java EE 7, Chapter 5</li>\n<li>Galvin Library Books 24x7</li>\n</ul>\n<h2 id=\"thinking-ahead-to-your-fp-期末项目思考\"><a class=\"anchor\" href=\"#thinking-ahead-to-your-fp-期末项目思考\">#</a> Thinking Ahead to your FP 期末项目思考</h2>\n<ul>\n<li>\n<p>Think of a domain or model you would like to work with going forward<br />\n 考虑您想继续使用的领域或模型</p>\n<ul>\n<li>Must support multiple Entities<br />\n 必须支持多个实体</li>\n<li>Must support the idea of relationships between Entities<br />\n 必须支持实体之间的关系的想法</li>\n<li>Your overall idea should support 2 different types of users<br />\n 您的总体思路应支持 2 种不同类型的用户</li>\n<li>Specs will follow so you have time to develop your thoughts and ideas along with material<br />\n 规格将随之而来，因此您有时间开发自己的思想和观念以及材料</li>\n</ul>\n</li>\n<li>\n<p>One of the questions on your midterm will be to document your design<br />\n 期中问题之一就是记录您的设计</p>\n</li>\n<li>\n<p>You will introduce your model over the next 2 labs, and continue working with it all semester<br />\n 您将在接下来的两个实验中介绍您的模型，并在整个学期中继续使用它</p>\n</li>\n</ul>\n<h2 id=\"relational-databases-vs-oop-关系数据库与oop\"><a class=\"anchor\" href=\"#relational-databases-vs-oop-关系数据库与oop\">#</a> Relational Databases vs OOP 关系数据库与 OOP</h2>\n<dl>\n<dt>Relational Databases 关系数据库</dt>\n<dd>\n<ul>\n<li>Store data in tables consisting of rows and columns<br />\n 将数据存储在由行和列组成的表中</li>\n<li>Primary keys 主键</li>\n<li>Relationships with other tables via foreign keys or join tables<br />\n 通过外键或联接表与其他表的关系</li>\n</ul>\n</dd>\n<dt>OOP</dt>\n<dd>\n<ul>\n<li>Objects inherit state and behavior from other objects<br />\n 对象从其他对象继承状态和行为</li>\n<li>Can contain other objects as state<br />\n 可以包含其他对象作为状态</li>\n<li>Have references to collections of other objects<br />\n 引用了其他对象的集合</li>\n</ul>\n</dd>\n</dl>\n<h2 id=\"jpa\"><a class=\"anchor\" href=\"#jpa\">#</a> JPA</h2>\n<p>Java Persistence API 的简称，中文名 Java 持久层 API，是 JDK 5.0 注解或 XML 描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。</p>\n<h3 id=\"jpa-specification-规范\"><a class=\"anchor\" href=\"#jpa-specification-规范\">#</a> JPA Specification 规范</h3>\n<ul>\n<li>A specification not an implementation 规范而不是实现\n<ul>\n<li>EclipseLink is the current reference implementation EclipseLink 是当前的参考实现</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbnRvbmlvZ29uY2FsdmVzLm9yZy8yMDA4LzA5LzI3L2EtYnJpZWYtaGlzdG9yeS1vZi1vYmplY3QtcmVsYXRpb25hbC1tYXBwaW5nLw==\">History</span></li>\n</ul>\n</li>\n<li>Abstraction Layer over JDBC and SQL<br />\nJDBC 和 SQL 上的抽象层</li>\n<li><a href=\"https://javaee.github.io/javaee-spec/javadocs/index.html?javax/persistence/package-summary.html\"> <code>javax.persistence</code>  package</a></li>\n<li>JPA Provides\n<ul>\n<li>Object Relational Mapping (to map relational databases to an object model - entities)<br />\n 对象关系映射（将关系数据库映射到对象模型 - 实体）</li>\n<li>Entity Manager (manage entities, i.e. CRUD)<br />\n 实体管理器（管理实体，即 CRUD）</li>\n<li>JPQL</li>\n<li>Transactions and Locking<br />\n 交易和锁定</li>\n<li>Lifecycle for persistent objects<br />\n 持久对象的生命周期</li>\n<li>Database and/or script generation<br />\n 数据库和 / 或脚本生成</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"jdbc-vs-jpa\"><a class=\"anchor\" href=\"#jdbc-vs-jpa\">#</a> JDBC vs JPA</h3>\n<ul>\n<li>JPA is built on top of JDBC JPA 建立在 JDBC 之上</li>\n<li>Compare and Constrast 比较和对比</li>\n</ul>\n<h3 id=\"jpa-entities-实例\"><a class=\"anchor\" href=\"#jpa-entities-实例\">#</a> JPA Entities 实例</h3>\n<ul>\n<li>Live short-term in memory 短期记忆</li>\n<li>Persistently in database 永久存在数据库中</li>\n<li>POJOs with annotations: 带注释的 POJOs</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Entity</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Float</span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> isbn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> nbOfPage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Boolean</span> illustrations<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// Getters, setters</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"entity-manager-实体管理\"><a class=\"anchor\" href=\"#entity-manager-实体管理\">#</a> Entity Manager 实体管理</h3>\n<ul>\n<li>Central piece of JPA<br />\nJPA 的核心部分</li>\n<li>API to find, query, create, remove and synchronize entities with databases<br />\n 用于查找、查询、创建、删除实体，并将其与数据库同步的 API</li>\n<li>Manages state and life cycle of entities<br />\n 管理实体的状态和生命周期</li>\n<li><code>EntityManager</code>  is an interface implemented by a persistence provider (like EclipseLink)<br />\n <code>EntityManager</code>  是由持久性提供程序（例如 EclipseLink）实现的接口</li>\n<li>Each  <code>EntityManager</code>  instance is associated with a persistence context<br />\n 每个 <code>EntityManager</code>  实例都与一个持久性环境相关联</li>\n</ul>\n<h4 id=\"persistence-context-持久环境\"><a class=\"anchor\" href=\"#persistence-context-持久环境\">#</a> Persistence Context 持久环境</h4>\n<p><img data-src=\"https://i.loli.net/2021/02/20/uTgiFmX4LEh9Hex.jpg\" alt=\"\" /></p>\n<ul>\n<li>A persistence context is a set of managed entity instances at a given time for a given user’s transaction<br />\n 持久性环境，是一组在指定时间给指定用户的管理实体实例</li>\n<li>Persistence Identities are unique within context<br />\n 持久性身份在上下文中是独一无二的</li>\n<li>A first-level cache. Objects live in the persistence context for the duration of the transaction, and are then flushed to the database.<br />\n 一级缓存。对象在交易期间处于持久性环境中，然后冲洗到数据库。</li>\n</ul>\n<h4 id=\"obtaining-an-entity-manager-创建一个实体管理\"><a class=\"anchor\" href=\"#obtaining-an-entity-manager-创建一个实体管理\">#</a> Obtaining an Entity Manager 创建一个实体管理</h4>\n<ul>\n<li>Application Managed (Lab 5) 应用管理\n<ul>\n<li><code>Persistence.createEntityManagerFactory(&quot;foo&quot;)</code></li>\n<li>Requires EntityTransaction</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Listing 6-2 in Goncalves</p>\n</blockquote>\n<ul>\n<li>Container Managed (Lab 7) 容器管理\n<ul>\n<li><code>@PersistenceContext(unitName=&quot;foo&quot;)</code></li>\n<li>Uses JTA for transaction</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Listing 6-3 in Goncalves</p>\n</blockquote>\n<h4 id=\"manipulating-entities-crud-操纵实体-crud\"><a class=\"anchor\" href=\"#manipulating-entities-crud-操纵实体-crud\">#</a> Manipulating Entities - CRUD 操纵实体 - CRUD</h4>\n<dl>\n<dt>C(reate)</dt>\n<dd><code>EntityManager.persist(e)</code>  adds an entity to the current persistence context and inserts to the database if it doesn’t already exist</dd>\n<dt>R(ead)</dt>\n<dd>\n<ul>\n<li><code>EntityManager.find(pk)</code>  finds an entity and adds it to the current persistence context</li>\n<li><code>EntityManager.getReference(pk)</code>  find an entity and adds it to the current persistence context, but lazily fetches its data</li>\n</ul>\n</dd>\n<dt>U(update)</dt>\n<dd>\n<ul>\n<li><code>EntityManager.merge(e)</code>  reattaches a detached entity to the current persistence context and updates the database</li>\n<li>Updating a managed Entity through setters</li>\n</ul>\n</dd>\n<dt>D(delete)</dt>\n<dd><code>EntityManager.remove(e)</code>  deletes an entity from the database and detaches it from the current persistence context. Will be GC’d.</dd>\n<dt>Synchronizing 同步</dt>\n<dd>\n<ul>\n<li><code>EntityManager.flush(e)</code>  entity to database, no commit</li>\n<li><code>EntityManager.refresh(e)</code>  entity from database (overwrite in memory state)</li>\n</ul>\n</dd>\n<dt>Persistence Context</dt>\n<dd>\n<ul>\n<li><code>EntityManager.contains(e)</code>  an entity in the current persistence context</li>\n<li><code>EntityManager.clear()</code>  empties the current persistence context</li>\n<li><code>EntityManager.detach(e)</code>  removes an entity from the current persistence context</li>\n</ul>\n</dd>\n</dl>\n<blockquote>\n<p>Chapter 6, Goncalves Ex 03</p>\n</blockquote>\n<h3 id=\"entity-life-cycle-生命周期\"><a class=\"anchor\" href=\"#entity-life-cycle-生命周期\">#</a> Entity Life Cycle 生命周期</h3>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2021/02/20/6spTgk1lGxnwXJ7.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2021/02/20/CAxfLsRrnyzM6tZ.jpg\" alt=\"\" title=\"Vlad’s Entity Life Cycle\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Entity</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"pet\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@NamedQuery</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Pet.findPetByName\"</span><span class=\"token punctuation\">,</span> query <span class=\"token operator\">=</span> <span class=\"token string\">\"select p from Pet p where p.name = :NAME\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@NamedQuery</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Pet.findAll\"</span><span class=\"token punctuation\">,</span> query <span class=\"token operator\">=</span> <span class=\"token string\">\"select p from Pet p\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Id</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@NotBlank</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"pet_name\"</span><span class=\"token punctuation\">,</span> nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> unique <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@PastOrPresent</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDate</span> birthDate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Transient</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Enumerated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumType</span><span class=\"token punctuation\">.</span>STRING<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PetType</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDate</span> birthDate<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PetType</span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>birthDate <span class=\"token operator\">=</span> birthDate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * Get the value of age</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * @return the value of age</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     * Set the value of age</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>     * @param age new value of age</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * Get the value of birthDate</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     * @return the value of birthDate</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LocalDate</span> <span class=\"token function\">getBirthDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> birthDate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     * Set the value of birthDate</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>     * @param birthDate new value of birthDate</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBirthDate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span> birthDate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>birthDate <span class=\"token operator\">=</span> birthDate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>     * Get the value of name</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>     * @return the value of name</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>     * Set the value of name</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>     * @param name new value of name</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>     * Get the value of id</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>     * @return the value of id</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>     * Set the value of id</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>     * @param id new value of id</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        hash <span class=\"token operator\">=</span> <span class=\"token number\">97</span> <span class=\"token operator\">*</span> hash <span class=\"token operator\">+</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> that<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> that<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>that <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> that<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Pet</span> other <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Pet</span><span class=\"token punctuation\">)</span> that<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token comment\">// because I am using a database generated ID, I need to explicitly check entity id's for null</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token comment\">// if null, they should not be compared</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PetType</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PetType</span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Pet&#123;\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"id=\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\", name=\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\", birthDate=\"</span> <span class=\"token operator\">+</span> birthDate <span class=\"token operator\">+</span> <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span> <span class=\"token string\">\", type=\"</span> <span class=\"token operator\">+</span> type <span class=\"token operator\">+</span> <span class=\"token string\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"tables\"><a class=\"anchor\" href=\"#tables\">#</a> Tables</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"pet\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><dl>\n<dt><code>@Table</code>  (<span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuZWNsaXBzZS5vcmcvRWNsaXBzZUxpbmsvVXNlckd1aWRlL0pQQS9CYXNpY19KUEFfRGV2ZWxvcG1lbnQvRW50aXRpZXMvVGFibGU=\">Goncalves Ex01</span>)</dt>\n<dd>\n<ul>\n<li>name</li>\n<li>schema</li>\n<li>uniqueConstraints{}</li>\n</ul>\n</dd>\n<dt><code>@SecondaryTable</code>  (<span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuZWNsaXBzZS5vcmcvRWNsaXBzZUxpbmsvVXNlckd1aWRlL0pQQS9CYXNpY19KUEFfRGV2ZWxvcG1lbnQvRW50aXRpZXMvU2Vjb25kYXJ5VGFibGU=\">Goncalves Ex02</span>)</dt>\n<dd>Up until now, an Entity was a table. Sometimes, existing data models spread the data across multiple tables.</dd>\n</dl>\n<p><img data-src=\"https://i.loli.net/2021/02/23/McrU5lHDWqdQbez.jpg\" alt=\"McrU5lHDWqdQbez\" /></p>\n<h3 id=\"equals-and-hashcode\"><a class=\"anchor\" href=\"#equals-and-hashcode\">#</a>  <code>equals</code>  and  <code>hashCode</code></h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    hash <span class=\"token operator\">=</span> <span class=\"token number\">97</span> <span class=\"token operator\">*</span> hash <span class=\"token operator\">+</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> that<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> that<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>that <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> that<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Pet</span> other <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Pet</span><span class=\"token punctuation\">)</span> that<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// because I am using a database generated ID, I need to explicitly check entity id's for null</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// if null, they should not be compared</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>Review <span class=\"exturl\" data-url=\"aHR0cDovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2UvdHV0b3JpYWwvamF2YS9JYW5kSS9vYmplY3RjbGFzcy5odG1s\">Object as a Superclass</span> in Java SE Tutorial<br />\n 在 Java SE 教程中将对象作为超级类进行审核\n<ul>\n<li>Also: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pYm0uY29tL2RldmVsb3BlcndvcmtzL2xpYnJhcnkvai1qdHAwNTI3My8=\">IBM Hashing it Out</span></li>\n<li>Also: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pbmZvcm1pdC5jb20vYXJ0aWNsZXMvYXJ0aWNsZS5hc3B4P3A9MTAyMTU3OSZhbXA7c2VxTnVtPTI=\">Understanding Inheritance in Java</span> 了解 Java 的继承</li>\n</ul>\n</li>\n<li>If you override  <code>equals</code> , you must override  <code>hashCode</code> <br />\n 如果你覆盖，你必须覆盖哈希代码</li>\n</ul>\n<dl>\n<dt><code>equals</code></dt>\n<dd>compares two objects, returns true if equal 比较两个对象，返回真实，如果相等</dd>\n<dt><code>hashCode</code></dt>\n<dd>If two objects are equal, their hash codes must also be equal 如果两个对象是相等的，则它们的哈希代码也必须相等\n<ul>\n<li>By default, returns the memory address 默认情况下，返回内存地址</li>\n<li>Overriding  <code>equals</code>  invalidates default implementation<br />\n 覆盖 equals 使默认操作无效</li>\n</ul>\n</dd>\n</dl>\n<h3 id=\"primary-keys-主键\"><a class=\"anchor\" href=\"#primary-keys-主键\">#</a> Primary Keys 主键</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Id</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span>IDENTITY<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>Uniquely identify each row in a table 表中每一行的唯一识别</li>\n<li>JPA <strong>requires</strong> entities to have an identifier mapped to a primary key<br />\nJPA<strong> 要求</strong>实体将标识符映射到主密钥</li>\n<li>Comprises either single or set of columns 包括单列或单列集\n<ul>\n<li>Simple Primary Key 单个主键</li>\n<li>Composite Primary Key 复合主键</li>\n</ul>\n</li>\n<li>If you can, stick to a simple key 如果可以，坚持一个简单的键</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly92bGFkbWloYWxjZWEuY29tL2RhdGFiYXNlLXByaW1hcnkta2V5LWZsYXZvcnMv\">Natural ID vs Generated (Surrogate) ID</span> 自然 ID vs 生成 （代理） ID</li>\n</ul>\n<h4 id=\"simple-primary-keys\"><a class=\"anchor\" href=\"#simple-primary-keys\">#</a> Simple Primary Keys</h4>\n<dl>\n<dt><code>@Id</code>  (<span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuZWNsaXBzZS5vcmcvRWNsaXBzZUxpbmsvVXNlckd1aWRlL0pQQS9CYXNpY19KUEFfRGV2ZWxvcG1lbnQvTWFwcGluZy9FbnRpdGllcy9JZHMvSWQ=\">Goncalves Ex01 and Ex02</span>)</dt>\n<dd>\n<ul>\n<li>Must correspond to single attribute of entity<br />\n 必须对应实体的单一属性</li>\n<li>Must not change 不能改变</li>\n<li>Allowable types: 允许的类型\n<ul>\n<li>Primitive Java types 原始 java 类型:  <code>byte</code> ,  <code>int</code> ,  <code>short</code> ,  <code>long</code> ,  <code>char</code></li>\n<li>Wrapper classes of primitive Java types 原始类型的包裹类型:  <code>Byte</code> ,  <code>Integer</code> ,  <code>Short</code> ,  <code>Long</code> ,  <code>Character</code></li>\n<li>Arrays of primitive or wrapper types 数组:  <code>int[]</code> ,  <code>Integer[]</code></li>\n<li>Strings, numbers, and dates:  <code>String</code> ,  <code>BigInteger</code> ,  <code>Date</code></li>\n</ul>\n</li>\n</ul>\n</dd>\n<dt>Id Generation for Simple PK</dt>\n<dd>\n<ul>\n<li><code>@Id</code>  value can be created manually by application or automatically by the provider</li>\n<li><code>@GeneratedValue</code>  (<span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuZWNsaXBzZS5vcmcvRWNsaXBzZUxpbmsvVXNlckd1aWRlL0pQQS9CYXNpY19KUEFfRGV2ZWxvcG1lbnQvRW50aXRpZXMvSWRzL0dlbmVyYXRlZFZhbHVlJTVE\">Goncalves Ex01</span>) has different strategies\n<ul>\n<li>SEQUENCE</li>\n<li>IDENTITY</li>\n<li>TABLE</li>\n<li>AUTO</li>\n</ul>\n</li>\n</ul>\n</dd>\n</dl>\n<h5 id=\"option-one-natural-idbusiness-key\"><a class=\"anchor\" href=\"#option-one-natural-idbusiness-key\">#</a> Option One - Natural ID/Business Key</h5>\n<p>自然身份证 / 公司密钥</p>\n<blockquote>\n<p>So sayeth Vlad:</p>\n<ul>\n<li>\n<p>“Those entity fields having the property of being unique in the whole entity object space are generally called a business key.”<br />\n 那些在整个实体对象空间中具有唯一性的实体字段通常称为业务密钥。</p>\n</li>\n<li>\n<p>“The business key is also independent of any persistence technology employed in our project architecture, as opposed to a synthetic database auto incremented id.”<br />\n 业务密钥还独立于我们的项目体系结构中采用的任何持久性技术，与合成数据库自动递增的 ID 相对。</p>\n</li>\n<li>\n<p>“So, the business key must be set from the very moment we are creating the Entity and then never change it.”<br />\n 因此，必须从我们创建实体的那一刻起就设置业务密钥，然后再也不要更改它。</p>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>Decide/Design what attribute(s) determine uniqueness in each of your entities<br />\n 决定 / 设计哪些属性决定每个实体的唯一性\n<ul>\n<li>ISBN</li>\n<li>UPC Code</li>\n<li>Person ID Number</li>\n<li>Drivers License Number</li>\n<li>Library Card Number</li>\n<li>Serial Number</li>\n<li>First, Last, Middle Name, Sex at Birth, Date of Birth, and Instant of Birth</li>\n<li>SSN</li>\n<li>Some Made Up ID Number</li>\n<li>Etc</li>\n</ul>\n</li>\n<li>These should be unique in your database - whether PK or not<br />\n 这些在您的数据库中应该是唯一的 —— 无论是否为 PK</li>\n<li>These unique identifiers are generated by your application<br />\n 这些唯一标识符由您的应用程序生成</li>\n<li>Use these attribute(s) for your  <code>equals</code>  and  <code>hashCode</code> <br />\n 将这些属性用于您的 equals 和 hashCode</li>\n</ul>\n<h5 id=\"option-two-generated-id\"><a class=\"anchor\" href=\"#option-two-generated-id\">#</a> Option Two – Generated ID</h5>\n<ul>\n<li>You can use the database  <code>@GeneratedID</code>  in<br />\n <code>equals</code> / <code>hashCode</code>  provided that\n<ul>\n<li>You consider  <code>null</code>  in your  <code>equals</code>  method, and return  <code>false</code>  if one of the <strong>entity identifiers</strong> is  <code>null</code> <br />\nequals 方法中为 null，并且如果实体标识符之一为 null，则返回 false</li>\n<li><code>hashCode</code>  always returns the same value<br />\nhashCode 总是返回相同的值</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly92bGFkbWloYWxjZWEuY29tL2hvdy10by1pbXBsZW1lbnRlcXVhbHMtYW5kLWhhc2hjb2RlLXVzaW5nLXRoZS1qcGEtZW50aXR5aWRlbnRpZmllci8=\">https://vladmihalcea.com/how-to-implementequals-and-hashcode-using-the-jpa-entityidentifier/</span><br />\n(ref: Fixing the entity identifier equals and hashCode)</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"option-three-uuid\"><a class=\"anchor\" href=\"#option-three-uuid\">#</a> Option Three – UUID</h5>\n<ul>\n<li>If you can’t figure out a business key, and you don’t want to use the database  <code>@GeneratedID</code> , you can use UUID:\n<ul>\n<li>Database agnostic 数据库不可知</li>\n<li>Can be generated by application 可以由应用程序生成</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly92bGFkbWloYWxjZWEuY29tL3V1aWQtaWRlbnRpZmllci1qcGFoaWJlcm5hdGUv\">https://vladmihalcea.com/uuid-identifier-jpahibernate/</span> (ref:  <code>GenerationType.AUTO</code> )</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>This strategy may need some adjustment for use with EclipseLink, but the fundamentals here are good.  <code>@NaturalID</code>  is Spring only – don’t use</p>\n</blockquote>\n<h4 id=\"composite-primary-keys-复合主键\"><a class=\"anchor\" href=\"#composite-primary-keys-复合主键\">#</a> Composite Primary Keys 复合主键</h4>\n<ul>\n<li>When it is not possible to use a single column or attribute, JPA supports compound or composite<br />\n 当不可能使用单个列或属性时，JPA 支持混合或复合</li>\n<li>Two strategies, both require separate primary key class<br />\n 两种策略都需要单独的主键类\n<ul>\n<li>Must implement  <code>equals</code>  and  <code>hashCode</code> <br />\n 必须实现 equals 和 hashCode</li>\n<li>public class</li>\n<li>Public accessors and mutators</li>\n<li>Default noarg constructor</li>\n<li>Implement serializable if they need to cross architectural layers</li>\n</ul>\n</li>\n<li>Same database output, but querying is different<br />\n 数据库输出相同，但查询不同</li>\n</ul>\n<h5 id=\"embeddables-可嵌入的\"><a class=\"anchor\" href=\"#embeddables-可嵌入的\">#</a> Embeddables 可嵌入的</h5>\n<dl>\n<dt><code>@Embeddable</code>  (<span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuZWNsaXBzZS5vcmcvRWNsaXBzZUxpbmsvVXNlckd1aWRlL0pQQS9CYXNpY19KUEFfRGV2ZWxvcG1lbnQvRW50aXRpZXMvRW1iZWRkYWJsZQ==\">Goncalves Ex29 and Ex32</span>)  <code>@Embedded</code></dt>\n<dd>\n<ul>\n<li>Used with composite primary keys<br />\n 与复合主键一起使用</li>\n<li>Embeddables do not have a persistent identity<br />\n 可嵌入对象没有持久性</li>\n<li>They are embedded in owning entities<br />\n 它们嵌入在拥有的实体中</li>\n<li>If the owning entity is removed, so is the embedded<br />\n 如果拥有实体被删除，则嵌入式实体也被删除</li>\n</ul>\n</dd>\n</dl>\n<h5 id=\"embedded-composite-primary-key-class\"><a class=\"anchor\" href=\"#embedded-composite-primary-key-class\">#</a> Embedded Composite Primary Key Class</h5>\n<dl>\n<dt><code>@Embeddable</code>  with  <code>@EmbeddedId</code>  (<span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuZWNsaXBzZS5vcmcvRWNsaXBzZUxpbmsvVXNlckd1aWRlL0pQQS9CYXNpY19KUEFfRGV2ZWxvcG1lbnQvRW50aXRpZXMvSWRzL0VtYmVkZGVkSWQ=\">Goncalves Ex04</span>)</dt>\n<dd>\n<ul>\n<li>Create  <code>@Embeddable</code>  class conforming to above requirements</li>\n<li>Identify primary key class with  <code>@EmbeddedId</code>  on entity</li>\n</ul>\n</dd>\n</dl>\n<h5 id=\"nonembedded-composite-primary-key-class\"><a class=\"anchor\" href=\"#nonembedded-composite-primary-key-class\">#</a> Nonembedded Composite Primary Key Class</h5>\n<dl>\n<dt><code>@IdClass</code>  (<span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuZWNsaXBzZS5vcmcvRWNsaXBzZUxpbmsvVXNlckd1aWRlL0pQQS9CYXNpY19KUEFfRGV2ZWxvcG1lbnQvRW50aXRpZXMvSWRzL0lkQ2xhc3M=\">Goncalves Ex06</span>)</dt>\n<dd>\n<ul>\n<li>Each field needs to also be declared on entity and annotated with  <code>@Id</code> <br />\n 每个字段也需要在实体上进行申报，并附上 <code>@Id</code></li>\n<li>Primary key class does not require annotations, but must conform to above requirements<br />\n 主要关键类不需要注释，但必须符合上述要求</li>\n<li>Identify primary key class as  <code>@IdClass</code>  on entity<br />\n 将主要关键类确定为实体上的 <code>@IdClass</code></li>\n</ul>\n</dd>\n</dl>\n<h5 id=\"embedded-vs-nonembedded\"><a class=\"anchor\" href=\"#embedded-vs-nonembedded\">#</a> Embedded vs NonEmbedded</h5>\n<p>For Composite PK, which way is better?</p>\n<p>What does Vlad think?<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly92bGFkbWloYWxjZWEuY29tL3RoZS1iZXN0LXdheS10b21hcC1hLWNvbXBvc2l0ZS1wcmltYXJ5LWtleS13aXRoLWpwYS1hbmRoaWJlcm5hdGUv\">https://vladmihalcea.com/the-best-way-tomap-a-composite-primary-key-with-jpa-andhibernate/</span></p>\n<h3 id=\"attributes-属性\"><a class=\"anchor\" href=\"#attributes-属性\">#</a> Attributes 属性</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@NotBlank</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"pet_name\"</span><span class=\"token punctuation\">,</span> nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> unique <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@PastOrPresent</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDate</span> birthDate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Transient</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Enumerated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumType</span><span class=\"token punctuation\">.</span>STRING<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">PetType</span> type<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><dl>\n<dt><code>@Basic</code>  (<span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuZWNsaXBzZS5vcmcvRWNsaXBzZUxpbmsvVXNlckd1aWRlL0pQQS9CYXNpY19KUEFfRGV2ZWxvcG1lbnQvTWFwcGluZy9CYXNpY19NYXBwaW5ncy9CYXNpYw==\">Goncalves Ex09</span>)</dt>\n<dd>\n<ul>\n<li>optional (default true)</li>\n<li>fetch (default FetchType.EAGER)</li>\n</ul>\n</dd>\n<dt><code>@Column</code>  (<span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuZWNsaXBzZS5vcmcvRWNsaXBzZUxpbmsvVXNlckd1aWRlL0pQQS9CYXNpY19KUEFfRGV2ZWxvcG1lbnQvTWFwcGluZy9CYXNpY19NYXBwaW5ncy9Db2x1bW4=\">Goncalves Ex11</span>)</dt>\n<dd>\n<ul>\n<li>Defines the properties for a column such as name, size, unique, nullable, insertable, updateable</li>\n<li>Name</li>\n<li>Unique (default false)</li>\n<li>Nullable (default true)</li>\n<li>Length (default 255)</li>\n</ul>\n</dd>\n<dt><code>@Temporal</code>  (<span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuZWNsaXBzZS5vcmcvRWNsaXBzZUxpbmsvVXNlckd1aWRlL0pQQS9CYXNpY19KUEFfRGV2ZWxvcG1lbnQvTWFwcGluZy9CYXNpY19NYXBwaW5ncy9UZW1wb3JhbA==\">Goncalves Ex14</span>)</dt>\n<dd>\n<ul>\n<li>TemporalType.DATE</li>\n<li>TemporalType.TIME</li>\n<li>TemporalType.TIMESTAMP</li>\n</ul>\n</dd>\n</dl>\n<blockquote>\n<p>No longer required with JPA 2.2 when using the  <code>java.time API (LocalDate, LocalTime, LDT)</code></p>\n</blockquote>\n<dl>\n<dt><code>@Transient</code>  (<span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuZWNsaXBzZS5vcmcvRWNsaXBzZUxpbmsvVXNlckd1aWRlL0pQQS9CYXNpY19KUEFfRGV2ZWxvcG1lbnQvTWFwcGluZy9CYXNpY19NYXBwaW5ncy9UcmFuc2llbnQ=\">Goncalves Ex14</span>)</dt>\n<dd>\n<ul>\n<li>A way to not map an attribute to persistent table<br />\n 一种不将属性映射到持久表的方法</li>\n<li>For example, a calculated field<br />\n 例如，计算字段</li>\n</ul>\n</dd>\n<dt><code>@Enumerated</code>  (<span class=\"exturl\" data-url=\"aHR0cDovL3dpa2kuZWNsaXBzZS5vcmcvRWNsaXBzZUxpbmsvVXNlckd1aWRlL0pQQS9CYXNpY19KUEFfRGV2ZWxvcG1lbnQvTWFwcGluZy9CYXNpY19NYXBwaW5ncy9FbnVtZXJhdGVk\">Goncalves Ex17</span>) 枚举</dt>\n<dd>\n<ul>\n<li>Can use  <code>EnumType.STRING</code>  to store data with String as opposed to ordinal<br />\n 可以使用 EnumType.STRING 将数据存储为 String 而不是序数</li>\n<li>Adding a new constant to the top of the enum would re-arrange ordinals…<br />\n 在枚举的顶部添加一个新常量将重新排列序数…</li>\n</ul>\n</dd>\n</dl>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>PetType.java 枚举类</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">PetType</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">CANINE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">FELINE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Kitty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">REPTILE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Snake\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">RABBIT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bunny\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">FISH</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fishy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> label<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PetType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> label<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getLabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> label<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"access-type-访问类型\"><a class=\"anchor\" href=\"#access-type-访问类型\">#</a> Access Type 访问类型</h3>\n<dl>\n<dt>Field Access (Annotate attributes) 字段访问 (注释属性)</dt>\n<dd>\n<ul>\n<li>Default used in the book</li>\n<li>AccessType.FIELD</li>\n</ul>\n</dd>\n</dl>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Transient</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><dl>\n<dt>Property Access (Annotate getters) 属性访问 (注释获取器)</dt>\n<dd>AccessType.PROPERTY</dd>\n</dl>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Transient</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Recommendation – be consistent with your choice. (Goncalves Ex20)</p>\n</blockquote>\n<h2 id=\"jpql\"><a class=\"anchor\" href=\"#jpql\">#</a> JPQL</h2>\n<ul>\n<li>What about querying? Everything up until here as been  <code>EntityManager.find(pk)</code></li>\n<li>JPQL is an object-oriented query language, in which we are looking for entities or collections of entities<br />\nJPQL 是一种面向对象的查询语言，我们正在寻找实体或实体集合</li>\n<li>Roots in SQL, but uses standard dot notation<br />\n 根在 SQL 中，但使用标准点符号</li>\n</ul>\n<h3 id=\"simplied-jpql-statement-syntax\"><a class=\"anchor\" href=\"#simplied-jpql-statement-syntax\">#</a> Simplied JPQL Statement Syntax</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">select</span> clause<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">from</span> clause<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">WHERE</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">where</span> clause<span class=\"token operator\">></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> clause<span class=\"token operator\">></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> clause<span class=\"token operator\">></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">HAVING</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">having</span> clause<span class=\"token operator\">></span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h3 id=\"jpql-tools-and-syntax\"><a class=\"anchor\" href=\"#jpql-tools-and-syntax\">#</a> JPQL Tools and Syntax</h3>\n<ul>\n<li>NetBeans JPQL Editor</li>\n<li>Right-click Persistence Unit and choose “Run JPQL Query”</li>\n<li>Goncalves Chapter 6 Ex 21</li>\n</ul>\n<h3 id=\"dynamic-queries\"><a class=\"anchor\" href=\"#dynamic-queries\">#</a> Dynamic Queries</h3>\n<ul>\n<li>Created as needed by the application<br />\n 根据应用程序的需要创建</li>\n<li>“On the fly”</li>\n<li>Can accept named or positional parameters<br />\n 可以接受命名或位置参数</li>\n<li>Use  <code>EntityManager.createQuery()</code>  method, passing a String representing JPQL query</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Query</span> query <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">TypedQuery</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> query <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>query<span class=\"token punctuation\">.</span><span class=\"token function\">getResultList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"named-queries\"><a class=\"anchor\" href=\"#named-queries\">#</a> Named Queries</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Pet.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Entity</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"pet\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@NamedQuery</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Pet.findPetByName\"</span><span class=\"token punctuation\">,</span> query <span class=\"token operator\">=</span> <span class=\"token string\">\"select p from Pet p where p.name = :NAME\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@NamedQuery</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Pet.findAll\"</span><span class=\"token punctuation\">,</span> query <span class=\"token operator\">=</span> <span class=\"token string\">\"select p from Pet p\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Pet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>···</pre></td></tr></table></figure><ul>\n<li>Similar to  <code>PreparedStatement</code></li>\n<li>Static and Unchangeable 静态、不可更改\n<ul>\n<li>lose flexibility 失去灵活性</li>\n</ul>\n</li>\n<li>Translated to SQL when the application starts<br />\n 程序开始时翻译成 SQL</li>\n<li>gain efficiency and performance<br />\n 提高效率和绩效\n<ul>\n<li><code>EntityManager.createNamedQuery()</code></li>\n<li>The names of NamedQueries must be unique within persistence context, even across entities<br />\nNamedQueries 的名称必须在持久性环境中独一无二，即使在实体之间也是如此</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Driver.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Driver</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> LOG <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Driver</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Pet</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fluffy\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Month</span><span class=\"token punctuation\">.</span>DECEMBER<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PetType</span><span class=\"token punctuation\">.</span>FELINE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Pet</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Spike\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Month</span><span class=\"token punctuation\">.</span>NOVEMBER<span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PetType</span><span class=\"token punctuation\">.</span>CANINE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before em.persist==========================================>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// reading the persistence.xml is the entry point where entities are created as tables</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">EntityManagerFactory</span> emf <span class=\"token operator\">=</span> <span class=\"token class-name\">Persistence</span><span class=\"token punctuation\">.</span><span class=\"token function\">createEntityManagerFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itmd4515testPU\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> emf<span class=\"token punctuation\">.</span><span class=\"token function\">createEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">EntityTransaction</span> tx <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        tx<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// do some JPA work</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        em<span class=\"token punctuation\">.</span><span class=\"token function\">persist</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        em<span class=\"token punctuation\">.</span><span class=\"token function\">persist</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After em.persist, before tx.commit ==========================================>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        em<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After em.persist, before tx.commit, after em.flush ==========================================>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        tx<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After em.persist, after tx.commit ==========================================>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>cat<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">Pet</span> foundPetFromDatabase <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pet</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1l</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found Pet 1: \"</span> <span class=\"token operator\">+</span> foundPetFromDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// JPQL query example</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        foundPetFromDatabase <span class=\"token operator\">=</span> em</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select p from Pet p where p.name = :NAME\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NAME\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Spike\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">getSingleResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found Spike: \"</span> <span class=\"token operator\">+</span> foundPetFromDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        foundPetFromDatabase <span class=\"token operator\">=</span> em</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">createNamedQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pet.findPetByName\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NAME\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fluffy\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">getSingleResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found Fluffy: \"</span> <span class=\"token operator\">+</span> foundPetFromDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pet</span><span class=\"token punctuation\">></span></span> pets <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        pets <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">createNamedQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pet.findAll\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResultList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Pet</span> p <span class=\"token operator\">:</span> pets<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        em<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        emf<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"other-query-apis\"><a class=\"anchor\" href=\"#other-query-apis\">#</a> Other Query APIs</h3>\n<ul>\n<li>Criteria API<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>criteriaQuery<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first Name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Vincent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>Native Queries<br />\nAllows execution of native SQL through JPA<br />\n 允许通过 JPA 执行原生 SQL</li>\n<li>Stored Procedure Queries<br />\nAllows execution of existing database SP’s through JPA<br />\n 允许通过 JPA 执行现有数据库 SP's</li>\n<li>Query By Example (QBE or Matcher)</li>\n<li>QueryDSL</li>\n</ul>\n<h1 id=\"lab\"><a class=\"anchor\" href=\"#lab\">#</a> Lab</h1>\n<h2 id=\"summary\"><a class=\"anchor\" href=\"#summary\">#</a> Summary</h2>\n<p>The purpose of this assignment is to learn the basics of ORM and EntityManager operations, demonstrate through JUnit test cases, and to begin the design process for your final project.<br />\n 这项作业的目的是学习 ORM 和 EntityManager 操作的基础知识，通过 JUnit 测试用例进行演示，并开始最终项目的设计过程。</p>\n<h2 id=\"requirements\"><a class=\"anchor\" href=\"#requirements\">#</a> Requirements</h2>\n<h3 id=\"database-setup\"><a class=\"anchor\" href=\"#database-setup\">#</a> Database Setup</h3>\n<p>Use your itmd4515 database and user from Lab 2 - Setup and Introductory Webapp.</p>\n<h3 id=\"project-setup\"><a class=\"anchor\" href=\"#project-setup\">#</a> Project Setup</h3>\n<p>Your uid-fp repository should already be setup, and you should continue pushing your commits into GitHub for this lab.</p>\n<blockquote>\n<p>Deviating from the package convention given above will mean that you can not benefit from Sonar and other automated tools, and I will not be able to fix this. Please follow the specification!</p>\n<p>We will be working in this repository from now until the end of the semester.  Please remember, I will be looking for multiple commits.  Use a prefix of <strong>Lab 5</strong> on your commit messages, for example:</p>\n<ul>\n<li>Lab 5 - Initial Commit</li>\n<li>Lab 5 - Initial entity</li>\n<li>Lab 5 - Test cases</li>\n</ul>\n</blockquote>\n<h3 id=\"project-requirements\"><a class=\"anchor\" href=\"#project-requirements\">#</a> Project Requirements</h3>\n<ol>\n<li>\n<p>First, and most importantly, think about what kind of business domain you would like to work with for the rest of the semester.  There are many examples you could pick from, but you will do your best work if you are engaged in the entities and concepts that underly your code.  If you are stuck and need examples, post a question to Confluence.  If you pick your domain now, then you will be able to continue building on this code for future labs and projects, thereby making your efforts cumulative.  Some example ideas include:<br />\n 首先，也是最重要的一点，请考虑在本学期的剩余时间里要使用哪种业务领域。您可以从许多示例中进行选择，但是如果您参与代码背后的实体和概念，则将尽力而为。如果您陷入困境并需要示例，请向 Confluence 发表问题。如果您现在选择域，那么您将能够继续在此代码上构建以用于将来的实验室和项目，从而使您的工作不断积累。一些示例想法包括：</p>\n<ol>\n<li>Library</li>\n<li>Education/Learning (like Blackboard)</li>\n<li>Sports</li>\n<li>Music</li>\n<li>Retail</li>\n<li>Hospitality</li>\n<li>Medical/Insurance</li>\n<li>Inventory or other ERP function</li>\n</ol>\n</li>\n<li>\n<p>Move your <a href=\"/computer-science/mse/itmd-515/week-4/\">Lab 4 - Web Applications, Servlet and JSP</a> classes into a separate package.  I named mine Lab 4.  We'll clean these up completely and remove them in a future lab.</p>\n</li>\n<li>\n<p>Create a RESOURCE_LOCAL  <code>Persistence Unit</code>  named <strong>itmd4515testPU</strong> connecting to your <strong>itmd4515</strong> database using the <strong>itmd4515</strong> user.  Use the  <code>persistence.xml</code>  configuration we discussed in class to drop-and-create the tables.<br />\n 创建一个名为<strong> itmd4515testPU</strong> 的 RESOURCE_LOCAL 持久性单元，使用<strong> itmd4515</strong> 用户连接到<strong> itmd4515</strong> 数据库。使用我们在课堂上讨论过的 <code>persistence.xml</code>  配置来拖放表。</p>\n<p>+++code</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>persistence</span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://java.sun.com/xml/ns/persistence<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">&lt;!-- Define Persistence Unit --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>persistence-unit</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>itmd4515testPU<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">transaction-type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>RESOURCE_LOCAL<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclude-unlisted-classes</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclude-unlisted-classes</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javax.persistence.jdbc.url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql://localhost:3306/itmd4515?zeroDateTimeBehavior=CONVERT_TO_NULL<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javax.persistence.jdbc.user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>itmd4515<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javax.persistence.jdbc.driver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.mysql.cj.jdbc.Driver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javax.persistence.jdbc.password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>itmd4515<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javax.persistence.schema-generation.database.action<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>drop-and-create<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>persistence-unit</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>persistence</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>+++</p>\n</li>\n<li>\n<p>Add the following dependencies to your  <code>pom.xml</code> :</p>\n<ol>\n<li>\n<p><code>org.eclipse.persistence.jpa</code>   <code>2.7.6</code></p>\n</li>\n<li>\n<p><code>junit</code>  (latest non-beta version of junit 5)</p>\n</li>\n<li>\n<p><code>Bean Validation</code>  (as we did in <a href=\"/computer-science/mse/itmd-515/week-3/\">Lab 3 - Junit, JDBC and Bean Validation</a>)</p>\n</li>\n<li>\n<p><code>mysql-connector-java</code>  (latest non-beta version of 8)</p>\n<blockquote>\n<p>Use appropriate scope for all your dependencies. Why are these dependencies required if we already have the javaee-api in our pom.xml?<br />\n 对所有依赖项使用适当的范围。如果我们在 pom.xml 中已经有了 javaee-api，为什么需要这些依赖关系？</p>\n<p>Make sure your group, artifact and version look like this, and that you include the build and plugins section as per <a href=\"/computer-science/mse/itmd-515/week-3/\">Lab 3 - Junit, JDBC and Bean Validation</a>.  <strong>Remember, when you use NetBeans to generate persistence related configuration or code files (such as I did with the Persistence Unit) NetBeans adds additional dependencies to your pom.xml for you.  Clean it up and make sure yours looks like this:</strong></p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.eclipse.persistence<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>org.eclipse.persistence.jpa<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.7.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.junit.jupiter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit-jupiter-engine<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.7.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.23<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.hibernate<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>hibernate-validator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>7.0.0.Final<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.glassfish<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>javax.el<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.hibernate<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>hibernate-validator-cdi<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>7.0.0.Final<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-surefire-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.22.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-failsafe-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.22.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>...</pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>Create an Entity as demonstrated in class.  This should be a central and important concept to your business domain.  <em><strong>Do not</strong></em> implement <strong>User</strong>, <strong>Group</strong> or <strong>Role</strong> (in the context of security).  We will do that in a later lab.  Focus on the <strong>business</strong> or <strong>enterprise</strong> aspects of your domain.<br />\n 创建一个实体，如在课堂上演示的。对于您的业务领域，这应该是一个重要的重要概念。 <em><strong>请勿</strong></em>实施<strong>用户</strong>，<strong>组</strong>或<strong>角色</strong>（在安全方面）。我们将在以后的实验室中进行。专注于域的 “业务” 或 “企业” 方面。</p>\n<ol>\n<li>\n<p>Use an appropriate PK strategy, and use an appropriate data type for your PK (as per the options discussed in class)<br />\n 使用适当的 PK 策略，并为您的 PK 使用适当的数据类型（根据课程中讨论的选项）</p>\n</li>\n<li>\n<p>Include appropriate equals and hashCode methods for your PK strategy<br />\n 为您的 PK 策略包括适当的 equals 和 hashCode 方法</p>\n</li>\n<li>\n<p>Include at least one temporal data type<br />\n 包括至少一种时间数据类型</p>\n</li>\n<li>\n<p>Include at least three different data types.  There is no limit to the number of attributes you can include.  Your attributes should be sufficient to represent your entity.  Exercise good design and judgment.<br />\n 至少包括三种不同的数据类型。您可以包含的属性数量没有限制。您的属性应足以代表您的实体。进行良好的设计和判断。</p>\n</li>\n<li>\n<p>Include appropriate Constructors, accessors and mutators<br />\n 包括适当的构造函数，访问器和修改器</p>\n</li>\n<li>\n<p>Include appropriate bean validation constraints based on your database types and sizes<br />\n 根据数据库类型和大小包括适当的 bean 验证约束</p>\n</li>\n<li>\n<p>Include appropriate toString method for formatted output<br />\n 包括适当的 toString 方法以格式化输出</p>\n</li>\n</ol>\n</li>\n<li>\n<p>Document the following on your wiki page:</p>\n<ol>\n<li>Paragraph that describes the business domain you have chosen to work with, and why.<br />\n 描述您选择使用的业务领域的段落，以及原因。</li>\n<li>Write a second paragraph answering the following questions: There is only one entity required for Lab 5, but what other entities from your business domain can you think of?  How might they relate to one another?  You can answer this in narrative form, or you can answer it with a database diagram.  One of your midterm questions will be very similar, about the design of your FP, so this is to help get you started early.<br />\n 写第二段回答以下问题：实验 5 仅需要一个实体，但是您能想到您业务领域中的其他哪个实体？它们可能如何相互联系？您可以以叙述形式回答此问题，也可以使用数据库图来回答。关于 FP 的设计，您的期中问题之一将非常相似，因此这有助于您早日入门。</li>\n</ol>\n</li>\n<li>\n<p>Create a JUnit test class as demonstrated in class<br />\n 创建一个 JUnit 测试类，如在类中演示的</p>\n<p>For additional examples (beyond my in-class demonstration) you can refer to Goncalves sample code Chapter 06 - JPA Managing and Querying ex03.<br />\n 有关其他示例（除了我的课堂演示之外），您可以参考 Goncalves 示例代码第 06 章 - JPA 管理和查询 ex03。</p>\n<ol>\n<li>You must use  <code>EntityManagerFactory</code>  to create an  <code>EntityManager</code> .  You <strong>may not</strong> use JDBC on this lab.</li>\n<li>Make appropriate use of JUnit test fixtures as discussed in class, to obtain an EntityManager and also to stage consistent test data for your assertions<br />\n 适当使用课堂上讨论的 JUnit 测试夹具，获取实体管理器，并为您的断言提供一致的测试数据</li>\n<li>Include test methods for CRUD functionality\n<ol>\n<li>Create -  <code>em.persist</code></li>\n<li>Read -  <code>em.find</code>  and print to standard output</li>\n<li>Update - entity mutators (set methods) within a transaction</li>\n<li>Delete -  <code>em.remove</code></li>\n</ol>\n</li>\n<li>Use at least one assertion in each test method to check pass/fail<br />\n 在每个测试方法中使用至少一个断言来检查通过 / 失败</li>\n<li><strong>You must implement all test cases for your entity class</strong><br />\n 您必须为实体类实施所有测试案例</li>\n</ol>\n</li>\n<li>\n<p>Document in your wiki page by adding code block(s) containing the output of your Test class.  Clearly identify each operation and discuss what is being tested.<br />\n 添加包含测试类输出的代码块到文档。清楚地识别每个操作并讨论正在测试的内容。</p>\n</li>\n<li>\n<p>Submit to Blackboard</p>\n<ol>\n<li>Right your <strong>uid-fp</strong> project and select &quot;Clean&quot;</li>\n<li>Go to your NetBeans Projects directory.  Create a zip file of the <strong>uid-fp</strong> folder and submit it to the Blackboard assignment.</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"extra-credit-5-points\"><a class=\"anchor\" href=\"#extra-credit-5-points\">#</a> Extra Credit (5 Points)</h3>\n<ol>\n<li>Include a second JUnit test class for bean validation.  <strong>Do not mix</strong> JPA and Validation test cases, keep them within their respective test class.<br />\n 包括第二个 JUnit 测试类以进行 bean 验证。 <strong>请勿混用</strong> JPA 和 Validation 测试用例，请将它们放在各自的测试类中。</li>\n<li>Use abstraction to keep generic functionality and test fixtures at a more re-usable level in your test cases.<br />\n 使用抽象可将通用功能和测试装置保持在测试用例中更可重用的级别。</li>\n<li>Include pass/fail (sunny-day/rainy-day) test cases for each of your validation constraints.<br />\n 为每个验证约束包括通过 / 失败（晴天 / 阴雨天）测试用例。</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMD 515. Advanced Software Programming",
                "Java"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmd-515/week-4/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmd-515/week-4/",
            "title": "Week 4. Web Applications, Servlet and JSP",
            "date_published": "2021-02-13T14:46:55.000Z",
            "content_html": "<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"servlet\"><a class=\"anchor\" href=\"#servlet\">#</a> Servlet</h2>\n<ul>\n<li>Let - suffix. Diminutive suffix. Smaller. 后缀。较小的后缀。小一点。</li>\n<li>Little Server, Part of a Server, Server-like 小服务器，服务器的一部分，类似服务器</li>\n<li>Servlets: Smaller - yes. Lesser - no!</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2021/02/15/zVf7GMn8blUwWFg.jpg\" alt=\"\" /></p>\n<h3 id=\"httpservlet\"><a class=\"anchor\" href=\"#httpservlet\">#</a> HttpServlet</h3>\n<ul>\n<li>Read explicit data sent by client (such as form data, request parameters)<br />\n 读取客户端发送的显式数据（例如表单数据，请求参数）</li>\n<li>Read implicit data sent by client (such as request headers)<br />\n 读取客户端发送的隐式数据（例如请求标头）</li>\n<li>Invoke other services and generate results<br />\n 读取客户端发送的隐式数据（例如请求标头）</li>\n<li>Send explicit data back to client (HTML, etc)<br />\n 将明确的数据发送回客户端（HTML 等）</li>\n<li>Send the implicit data to client (such as status codes and response headers)<br />\n 将隐式数据发送到客户端（例如状态码和响应头）</li>\n</ul>\n<h4 id=\"a-typical-http-request-典型的http请求\"><a class=\"anchor\" href=\"#a-typical-http-request-典型的http请求\">#</a> A Typical HTTP Request 典型的 HTTP 请求</h4>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token request-line\"><span class=\"token property\">GET</span> /search-servlet?keywords=servlets+jsp HTTP/1.1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header-name keyword\">Accept:</span> image/gif, image/jpg, */*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token header-name keyword\">Accept-Encoding:</span> gzip</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token header-name keyword\">Connection:</span> Keep-Alive</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token header-name keyword\">Cookie:</span> userID=id456578</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token header-name keyword\">Host:</span> www.somebookstore.com</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token header-name keyword\">Referer:</span> http://www.somebookstore.com/findbooks.html</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token header-name keyword\">User-Agent:</span> Mozilla/4.0 (compatible; MSIE 6.0;Windows NT 5.0)</pre></td></tr></table></figure><h4 id=\"http-requestresponse\"><a class=\"anchor\" href=\"#http-requestresponse\">#</a> HTTP Request/Response</h4>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"><span>Request</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token request-line\"><span class=\"token property\">GET</span> /servlet/SomeName</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>HTTP/1.1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token header-name keyword\">Host:</span> ...</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token header-name keyword\">Header2:</span> ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>HeaderN:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>(Blank Line)</pre></td></tr></table></figure><figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"><span>Response</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token response-status\">HTTP/1.1 <span class=\"token property\">200 OK</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header-name keyword\">Content-Type:</span> text/html</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token header-name keyword\">Header2:</span> ...</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token header-name keyword\">HeaderN:</span> ...</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>(Blank Line)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&lt;!DOCTYPE ...></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&lt;HTML></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&lt;HEAD>...&lt;/HEAD></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>&lt;BODY></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&lt;/BODY>&lt;/HTML></pre></td></tr></table></figure><h3 id=\"a-servlet-that-generates-plain-text\"><a class=\"anchor\" href=\"#a-servlet-that-generates-plain-text\">#</a> A Servlet That Generates Plain Text</h3>\n<p>生成纯文本的 Servlet</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">testPackage</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Always use packages.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span><span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">PrintWriter</span> out <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://i.loli.net/2021/02/15/avXzom6xDgMs8EA.jpg\" alt=\"\" /></p>\n<h4 id=\"interpreting-helloworld-servlet\"><a class=\"anchor\" href=\"#interpreting-helloworld-servlet\">#</a> Interpreting HelloWorld Servlet</h4>\n<dl>\n<dt><code>@WebServlet(&quot;/address&quot;)</code></dt>\n<dd>This is the URL relative to your context path<br />\n 这是相对路径的 URL</dd>\n<dt><code>doGet</code></dt>\n<dd>Code for an HTTP GET request.  <code>doPost</code>  also common.<br />\nHTTP GET 请求的代码。  <code>doPost</code>  也很常见。</dd>\n<dt><code>HttpServletRequest</code></dt>\n<dd>Contains anything that comes from the browser<br />\n 包含来自浏览器的所有内容</dd>\n<dt><code>HttpServletResponse</code></dt>\n<dd>Used to send stuff to the browser. Most common is getWriter for a PrintWriter that points at browser.<br />\n 用于向浏览器发送内容。最常见的是指向浏览器的 PrintWriter 的 getWriter。</dd>\n<dt><code>@Override</code></dt>\n<dd>General best practice when overriding inherited methods<br />\n 覆盖继承方法时的常规最佳方式</dd>\n</dl>\n<h3 id=\"ide-generated-servlet-and-jsp\"><a class=\"anchor\" href=\"#ide-generated-servlet-and-jsp\">#</a> IDE Generated Servlet and JSP</h3>\n<ul>\n<li>NetBeans Scaffolding 脚手架</li>\n<li><code>processRequest()</code>  method</li>\n<li>Time-saver!\n<ul>\n<li>Scaffolding: Trust, but Verify</li>\n<li>Note - try-with-resources</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"pojo-javabean-conventions-and-el-约定\"><a class=\"anchor\" href=\"#pojo-javabean-conventions-and-el-约定\">#</a> POJO (JavaBean) Conventions and EL 约定</h4>\n<ul>\n<li>\n<p>Java Classes</p>\n<dl>\n<dt>Non-public fields:</dt>\n<dd><code>private String myVariable</code></dd>\n<dt>Non-private accessors:</dt>\n<dd><code>public String getMyVariable()</code></dd>\n<dt>Non-private mutators:</dt>\n<dd><code>public void setMyVariable(String myVar)</code></dd>\n</dl>\n</li>\n<li>\n<p>EL (given an instance of MyClass named myClass)<br />\n <code>$&#123;myClass.myVariable&#125;</code></p>\n</li>\n</ul>\n<blockquote>\n<p>What matters is the method name, not the variable name 重要的是方法名称，而不是变量名称</p>\n</blockquote>\n<p>Here is the usual rule to turn a method into property: 以下是将方法转换为属性的常用规则</p>\n<ul>\n<li>Drop the word  <code>get</code>  or  <code>set</code>  and change the next letter to lowercase\n<ul>\n<li>Method name:  <code>getFirstName</code></li>\n<li>Property name:  <code>firstName</code></li>\n<li>Example:  <code>#&#123;customer.firstName&#125;</code></li>\n</ul>\n</li>\n<li>Exception 1: boolean properties\n<ul>\n<li>If getter returns boolean or Boolean</li>\n<li>Method name:  <code>getPrime</code>  or  <code>isPrime</code></li>\n<li>Property name:  <code>prime</code></li>\n<li>Example:  <code>#&#123;myNumber.prime&#125;</code></li>\n</ul>\n</li>\n<li>Exception 2: consecutive uppercase letters\n<ul>\n<li>If two uppercase letters in a row after  <code>get</code>  or  <code>set</code></li>\n<li>Method name:  <code>getURL</code></li>\n<li>Property name:  <code>URL</code>  (not uRL)</li>\n<li>Example:  <code>#&#123;webSite.URL&#125;</code></li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Method Names</th>\n<th>Property Name</th>\n<th>Example EL Usage</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<p>getFirstName<br />\nsetFirstName</p>\n</td>\n<td>\n<p>firstName</p>\n</td>\n<td>\n<p><code>$&#123;customer.firstName&#125;</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>isExecutive<br />\nsetExecutive<br />\n(boolean property)</p>\n</td>\n<td>\n<p>executive</p>\n</td>\n<td>\n<p><code>$&#123;customer.executive&#125;</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>getExecutive<br />\nsetExecutive<br />\n(boolean property)</p>\n</td>\n<td>\n<p>executive</p>\n</td>\n<td>\n<p><code>$&#123;customer.executive&#125;</code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>getZIP<br />\nsetZIP</p>\n</td>\n<td>\n<p>ZIP</p>\n</td>\n<td>\n<p><code>$&#123;address.ZIP&#125;</code></p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"servlet-as-controller\"><a class=\"anchor\" href=\"#servlet-as-controller\">#</a> Servlet as Controller</h3>\n<h4 id=\"redirect\"><a class=\"anchor\" href=\"#redirect\">#</a> Redirect</h4>\n<ul>\n<li>Stops processing of the request and sends HTTP status code for redirect.</li>\n<li>Browser URL becomes that which you redirect<br />\nto</li>\n<li><strong>Can be any URL</strong></li>\n<li>Client (browser) initiates a <strong>new request</strong></li>\n</ul>\n<h4 id=\"forward\"><a class=\"anchor\" href=\"#forward\">#</a> Forward</h4>\n<ul>\n<li>Passes the control of the request to another servlet or JSP</li>\n<li><strong>Includes</strong> the request and response objects</li>\n<li>Client browser is unaware</li>\n<li>URL does not change in client</li>\n<li>URL is relative to web application context</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YWVlLzcvYXBpL2phdmF4L3NlcnZsZXQvUmVxdWVzdERpc3BhdGNoZXIuaHRtbA==\">Forward vs Include</span>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3Mub3JhY2xlLmNvbS9qYXZhZWUvNy90dXRvcmlhbC9zZXJ2bGV0czAwNy5odG0jQk5BR0k=\">http://docs.oracle.com/javaee/7/tutorial/servlets007.htm#BNAGI</span></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"reading-form-data-in-servlets\"><a class=\"anchor\" href=\"#reading-form-data-in-servlets\">#</a> Reading Form Data in Servlets</h3>\n<dl>\n<dt><code>request.getParameter(&quot;name&quot;)</code></dt>\n<dd>\n<ul>\n<li>Returns URL-decoded value of first occurrence of name in query string</li>\n<li>Works identically for GET and POST requests</li>\n<li>Returns null if no such parameter is in query data</li>\n</ul>\n</dd>\n<dt><code>request.getParameterValues(&quot;name&quot;)</code></dt>\n<dd>Returns an array of the URL-decoded values of all occurrences of name in query string (or null)</dd>\n<dt><code>request.getParameterNames()</code></dt>\n<dd>or  <code>request.getParameterMap()</code></dd>\n</dl>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>Example HTML - Form Params</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FORM</span> <span class=\"token attr-name\">ACTION</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>three-params<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>First Parameter: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>INPUT</span> <span class=\"token attr-name\">TYPE</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>TEXT<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">NAME</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>param1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>BR</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Second Parameter: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>INPUT</span> <span class=\"token attr-name\">TYPE</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>TEXT<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">NAME</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>param2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>BR</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Third Parameter: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>INPUT</span> <span class=\"token attr-name\">TYPE</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>TEXT<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">NAME</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>param3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>BR</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CENTER</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>INPUT</span> <span class=\"token attr-name\">TYPE</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SUBMIT<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CENTER</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>FORM</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example Servlet - Form Params</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/three-params\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreeParams</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>docType <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"&lt;HTML>\\n\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"&lt;HEAD>&lt;TITLE>\"</span><span class=\"token operator\">+</span>title <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/TITLE>&lt;/HEAD>\\n\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">\"&lt;BODY BGCOLOR=\\\"#FDF5E6\\\">\\n\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"&lt;H1 ALIGN=\\\"CENTER\\\">\"</span> <span class=\"token operator\">+</span> title <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/H1>\\n\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">\"&lt;UL>\\n\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\" &lt;LI>&lt;B>param1&lt;/B>: \"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"param1\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\" &lt;LI>&lt;B>param2&lt;/B>: \"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"param2\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string\">\" &lt;LI>&lt;B>param3&lt;/B>: \"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"param3\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token string\">\"&lt;/UL>\\n\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token string\">\"&lt;/BODY>&lt;/HTML>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://i.loli.net/2021/02/16/c7pqDGQ4KMmEJ1z.jpg\" alt=\"\" /></p>\n<h3 id=\"validation\"><a class=\"anchor\" href=\"#validation\">#</a> Validation</h3>\n<dl>\n<dt>Check for missing</dt>\n<dd>\n<ul>\n<li>If Field missing in form, getParameter returns null</li>\n</ul>\n</dd>\n</dl>\n<pre><code>- If Field blank when form is submitted, getParameter returns an empty string or possibly a String with whitespace depending on browser\n- Must check for null before empty string!\n</code></pre>\n<dl>\n<dt>Check for malformed</dt>\n<dd>Value is present but in the wrong format</dd>\n</dl>\n<h4 id=\"best-practices\"><a class=\"anchor\" href=\"#best-practices\">#</a> Best Practices</h4>\n<ul>\n<li>Users do crazy things. Some are malicious. 有些是恶意的</li>\n<li>Client-side vs Server-side vs Both</li>\n<li>Assume user input will be bad</li>\n<li>Avoid showing stack traces to users. Stack traces belong in logs. 避免向用户显示堆栈跟踪。堆栈跟踪属于日志。\n<ul>\n<li>Use default values or suggestions on forms</li>\n<li>Re-display original form with submitted values and error messages. Previously entered values shouldn’t be lost</li>\n<li>Show standard error pages for users, not system internals</li>\n</ul>\n</li>\n<li>Without Validation standards, it may be necessary to check for null values (for example):<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>param <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">doSomethingForMissingValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">doSomethingWithParameter</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"web-validation\"><a class=\"anchor\" href=\"#web-validation\">#</a> Web Validation</h4>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvR3VpZGUvSFRNTC9Gb3Jtc19pbl9IVE1M\">HTML5 Validation</span></li>\n<li>Client-side vs Server-side vs Both</li>\n<li>What do we do in the ”real world?”</li>\n</ul>\n<p>Good? Bad? Ugly?</p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2021/02/16/6a57UF8eWgd3L9K.jpg\" alt=\"\" title=\"bad\" /><br />\n<img data-src=\"https://i.loli.net/2021/02/16/qidlHtPSzV439Mh.jpg\" alt=\"\" title=\"bad and ugly\" /><br />\n<img data-src=\"https://i.loli.net/2021/02/16/RXApZO85suJ9Y26.jpg\" alt=\"\" title=\"good\" /><br />\n<img data-src=\"https://i.loli.net/2021/02/16/bAYGSzteHxDL2Nq.jpg\" alt=\"\" title=\"good\" /></p>\n<h3 id=\"summary\"><a class=\"anchor\" href=\"#summary\">#</a> Summary</h3>\n<h4 id=\"servlet-basics\"><a class=\"anchor\" href=\"#servlet-basics\">#</a> Servlet Basics</h4>\n<ul>\n<li>Main servlet code goes in doGet or doPost:\n<ul>\n<li>The HttpServletRequest contains the incoming information</li>\n<li>The HttpServletResponse lets you set outgoing information</li>\n</ul>\n</li>\n<li>Give address with  <code>@WebServlet</code>  or  <code>web.xml</code>\n<ul>\n<li><code>@WebServlet(&quot;/some-address&quot;)</code></li>\n<li><code>public class SomeServlet extends HttpServlet &#123; … &#125;</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"forms-and-servlets\"><a class=\"anchor\" href=\"#forms-and-servlets\">#</a> Forms and Servlets</h4>\n<ul>\n<li>Make a form:  <code>&lt;form …&gt; … &lt;/form&gt;</code>\n<ul>\n<li>Relative URL for  <code>action</code> . Textfields need  <code>name</code> . Should always have submit button.</li>\n</ul>\n</li>\n<li>Read data:  <code>request.getParameter(&quot;name&quot;)</code>\n<ul>\n<li>Results in value as entered into form, not necessarily as sent over network. I.e., not URLencoded.</li>\n</ul>\n</li>\n<li>Check for missing or malformed data</li>\n</ul>\n<h2 id=\"scopes\"><a class=\"anchor\" href=\"#scopes\">#</a> Scopes</h2>\n<dl>\n<dt>Page Scope</dt>\n<dd>Only available on the same page 仅在同一页面上可用</dd>\n<dt>Request Scope</dt>\n<dd>Interaction in a single request 单个请求中的交互</dd>\n<dt>Session Scope</dt>\n<dd>Interaction across multiple requests 多个请求之间的交互</dd>\n<dt>Application Scope</dt>\n<dd>Shared state across all interactions within a web application Web 应用程序中所有交互的共享状态</dd>\n</dl>\n<h3 id=\"session-handling-会话处理\"><a class=\"anchor\" href=\"#session-handling-会话处理\">#</a> Session Handling 会话处理</h3>\n<ul>\n<li>Use session scope judiciously 明智地使用会话范围</li>\n<li>Use request scope liberally 自由地使用请求范围</li>\n<li>Session identifier travels across network, not the session itself 会话标识符跨网络传播，而不是会话本身</li>\n<li>Methods\n<ul>\n<li><code>request.getSession</code></li>\n<li><code>session.getAttribute</code></li>\n<li><code>session.setAttribute</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"java-server-pages\"><a class=\"anchor\" href=\"#java-server-pages\">#</a> Java Server Pages</h2>\n<p>With servlets, it is easy to</p>\n<ul>\n<li>Read form data</li>\n<li>Read HTTP request headers</li>\n<li>Set HTTP status codes and response headers</li>\n<li>Use cookies and sessions</li>\n<li>Share data among servlets</li>\n<li>Remember data between requests</li>\n</ul>\n<p>But, it sure is a pain to</p>\n<ul>\n<li>Use those println statements to generate HTML</li>\n<li>Maintain HTML and collaborate with Web Designers</li>\n</ul>\n<blockquote>\n<p>Entire JSP page gets translated into a servlet (once), and servlet is what actually gets invoked (for each request) 整个 JSP 页面被翻译成一个 servlet（一次），而 servlet 是实际被调用的（对于每个请求）</p>\n</blockquote>\n<p>Ideas:</p>\n<ul>\n<li>Use regular HTML for most of page</li>\n<li>Mark servlet code with special tags</li>\n</ul>\n<p>Example:</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>HTML</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>HEAD</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TITLE</span><span class=\"token punctuation\">></span></span>Order Confirmation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TITLE</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    &lt;LINK REL=STYLESHEET HREF=\"JSP-Styles.css” TYPE=\"text/css\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>HEAD</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>BODY</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>H2</span><span class=\"token punctuation\">></span></span>Order Confirmation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>H2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Thanks for ordering</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>I</span><span class=\"token punctuation\">></span></span>&lt;%= request.getParameter(\"title\") %><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>I</span><span class=\"token punctuation\">></span></span>!</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>BODY</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>HTML</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"benefits-of-java-server-pages\"><a class=\"anchor\" href=\"#benefits-of-java-server-pages\">#</a> Benefits of Java Server Pages</h3>\n<p>Although JSP technically can’t do anything servlets can’t do, JSP makes it easier to:</p>\n<ul>\n<li>Write HTML</li>\n<li>Read and maintain the HTML</li>\n</ul>\n<p>JSP makes it possible to:</p>\n<ul>\n<li>Use standard HTML tools</li>\n<li>Have different members of your team do the HTML layout than do the Java programming</li>\n</ul>\n<p>JSP encourages you to Separate the (Java) code that creates the content from the (HTML) code that presents it</p>\n<h3 id=\"jsp-syntax-old-style-语法\"><a class=\"anchor\" href=\"#jsp-syntax-old-style-语法\">#</a> JSP Syntax (Old Style) 语法</h3>\n<p>Still Used:</p>\n<ul>\n<li><code>@taglib</code></li>\n<li><code>@include</code></li>\n<li><code>@page</code></li>\n</ul>\n<p>Legacy - Don’t use on new code:</p>\n<ul>\n<li>JSP Comment  <code>&lt;%-- Comment --%&gt;</code></li>\n<li>JSP Expressions  <code>&lt;%= expression %&gt;</code></li>\n<li>JSP Scriptlets  <code>&lt;% code %&gt;</code></li>\n<li>JSP Declarations  <code>&lt;%! code %&gt;</code></li>\n</ul>\n<h3 id=\"jstl-and-el\"><a class=\"anchor\" href=\"#jstl-and-el\">#</a> JSTL and EL</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VjbGlwc2UtZWU0ai9qc3AtYXBp\">https://github.com/eclipse-ee4j/jsp-api</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VjbGlwc2UtZWU0ai9qc3RsLWFwaQ==\">https://github.com/eclipse-ee4j/jstl-api</span></p>\n<ul>\n<li>EL (Expression Language) can be accessed anywhere via  <code>$&#123;expression&#125;</code>  EL 表达式</li>\n<li>Familiar implicit objects 熟悉的隐式对象</li>\n</ul>\n<h3 id=\"el-implicit-objects-隐式对象\"><a class=\"anchor\" href=\"#el-implicit-objects-隐式对象\">#</a> EL Implicit Objects 隐式对象</h3>\n<table>\n<thead>\n<tr>\n<th>Implicit Object</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<p>pageScope</p>\n</td>\n<td>\n<p>Maps page-scoped variable names to their values<br />\n 将页面范围的变量名映射为其值</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>requestScope</p>\n</td>\n<td>\n<p>Maps request-scoped variable names to their values<br />\n 将请求范围的变量名映射为其值</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>sessionScope</p>\n</td>\n<td>\n<p>Maps session-scoped variable names to their values<br />\n 将会话范围的变量名映射为其值</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>applicationScope</p>\n</td>\n<td>\n<p>Maps application-scoped variable names to their values<br />\n 将应用程序范围的变量名映射为其值</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>param</p>\n</td>\n<td>\n<p>Maps a request parameter name to a single value<br />\n 将请求参数名映射到单个值</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>paramValues</p>\n</td>\n<td>\n<p>Maps a request parameter name to an array of values<br />\n 将请求参数名映射到值数组</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>header</p>\n</td>\n<td>\n<p>Maps a request header name to a single value<br />\n 将请求头名映射到单个值</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>headerValues</p>\n</td>\n<td>\n<p>Maps a request header name to an array of values<br />\n 将请求头名映射到值数组</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>cookie</p>\n</td>\n<td>\n<p>Maps a cookie name to a single cookie<br />\n 将 cookie 名映射到单个 cookie</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>pageContext</p>\n</td>\n<td>\n<p>The context for the JSP page. Provides access to various objects:<br />\nJSP 页面的内容环境。提供对各种对象的访问：</p>\n<ul>\n<li>servletContext: The context for the application’s servlet and web components<br />\n 应用程序的 servlet 和 Web 组件的内容环境</li>\n<li>session: The session object for the client<br />\n 客户端的会话对象</li>\n<li>request: The request triggering the execution of the JSP<br />\n 该请求触发 JSP 的执行</li>\n<li>response: The response returned by the JSP page<br />\nJSP 页面返回的响应</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"el-operators-运算符\"><a class=\"anchor\" href=\"#el-operators-运算符\">#</a> EL Operators 运算符</h3>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>.</code></td>\n<td>Access a bean property or Map entry</td>\n</tr>\n<tr>\n<td><code>[]</code></td>\n<td>Access an array or List element, or Map entry  <code>()</code>  Group an expression</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td><strong>Arithmetic</strong>: Addition</td>\n</tr>\n<tr>\n<td><code>-</code></td>\n<td><strong>Arithmetic</strong>: Subtraction or negation</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td><strong>Arithmetic</strong>: Multiplication</td>\n</tr>\n<tr>\n<td><code>/</code>  or  <code>div</code></td>\n<td><strong>Arithmetic</strong>: Division</td>\n</tr>\n<tr>\n<td><code>%</code>  or  <code>mod</code></td>\n<td><strong>Arithmetic</strong>: Remainder</td>\n</tr>\n<tr>\n<td><code>==</code>  or  <code>eq</code> ,  <code>!=</code>  or  <code>ne</code></td>\n<td><strong>Relational</strong>: Equal and Not Equal</td>\n</tr>\n<tr>\n<td><code>&lt;</code>  or  <code>lt</code> ,  <code>&lt;=</code>  or  <code>le</code></td>\n<td><strong>Relational</strong>: Less Than and Less Than or Equal To</td>\n</tr>\n<tr>\n<td><code>&gt;</code>  or  <code>gt</code> ,  <code>&gt;=</code>  or  <code>ge</code></td>\n<td><strong>Relational</strong>: Greater Than and Greater Than or Equal</td>\n</tr>\n<tr>\n<td><code>&amp;&amp;</code>  or  <code>and</code></td>\n<td><strong>Logical</strong> AND</td>\n</tr>\n<tr>\n<td><code>||</code>  or  <code>or</code></td>\n<td><strong>Logical</strong> OR</td>\n</tr>\n<tr>\n<td><code>!</code>  or  <code>not</code></td>\n<td><strong>Logical</strong> NOT</td>\n</tr>\n<tr>\n<td><code>empty</code></td>\n<td>Prefix operation that can be used to determine whether a value is null or empty.</td>\n</tr>\n<tr>\n<td><code>A ? B : C</code></td>\n<td>Evaluate B or C, depending on the result of the evaluation of A</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"dot-v-brace-大括号中的点\"><a class=\"anchor\" href=\"#dot-v-brace-大括号中的点\">#</a> dot v brace 大括号中的点</h4>\n<dl>\n<dt><code>$&#123;bean.map.myKey&#125;</code></dt>\n<dd>Resolves to  <code>bean.getMap().get(&quot;myKey&quot;);</code></dd>\n<dt><code>$&#123;bean.map[&quot;myKey&quot;]&#125;</code></dt>\n<dd>Resolves to  <code>bean.getMap().get(&quot;myKey&quot;);</code></dd>\n<dt><code>$&#123;bean.map[&quot;my.dotted.key&quot;]&#125;</code></dt>\n<dd>Resolves to  <code>bean.getMap().get(&quot;my.dotted.key&quot;);</code></dd>\n<dt><code>$&#123;bean.map[bean2.someField]&#125;</code></dt>\n<dd>Resolves to  <code>bean.getMap().get(bean2.getSomeField());</code></dd>\n</dl>\n<h4 id=\"el-reserved-words\"><a class=\"anchor\" href=\"#el-reserved-words\">#</a> EL Reserved Words</h4>\n<table>\n<tbody>\n<tr>\n<td>and</td>\n<td>or</td>\n<td>not</td>\n<td>eq</td>\n</tr>\n<tr>\n<td>ne</td>\n<td>lt</td>\n<td>gt</td>\n<td>le</td>\n</tr>\n<tr>\n<td>ge</td>\n<td>true</td>\n<td>false</td>\n<td>null</td>\n</tr>\n<tr>\n<td>instanceof</td>\n<td>empty</td>\n<td>div</td>\n<td>mod</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"el-expression-examples\"><a class=\"anchor\" href=\"#el-expression-examples\">#</a> EL Expression Examples</h3>\n<table>\n<thead>\n<tr>\n<th>EL Expression</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>$&#123;!empty param.Add&#125;</code></td>\n<td>False if the request parameter named  <code>Add</code>  is null or an empty string.</td>\n</tr>\n<tr>\n<td><code>$&#123;pageContext.request.contextPath&#125;</code></td>\n<td>The context path.</td>\n</tr>\n<tr>\n<td><code>$&#123;sessionScope.cart.numberOfItems&#125;</code></td>\n<td>Value of the numberOfItems property of the session-scoped attribute named cart.</td>\n</tr>\n<tr>\n<td><code>$&#123;param['mycom.productId']&#125;</code></td>\n<td>The value of the request parameter named mycom.productId.</td>\n</tr>\n<tr>\n<td><code>$&#123;param.customerNumber&#125;</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>$&#123;header[&quot;host&quot;]&#125;</code>  or  <code>$&#123;header.host&#125;</code></td>\n<td>The host header</td>\n</tr>\n<tr>\n<td><code>$&#123;requestScope.customer&#125;</code></td>\n<td>The request scoped customer bean</td>\n</tr>\n<tr>\n<td><code>$&#123;header[&quot;user-agent&quot;]&#125;</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>$&#123;customer.customerNumber&#125;</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jstl-tag-libraries-标签库\"><a class=\"anchor\" href=\"#jstl-tag-libraries-标签库\">#</a> JSTL Tag Libraries 标签库</h3>\n<ul>\n<li>Used in combination with EL</li>\n<li>Replacements for older style JSP syntax 替换旧式 JSP 语法\n<ul>\n<li>Core (Variable support, flow control, URL management)</li>\n<li>Formatting (Formatting and I18N)</li>\n<li>SQL (Database)</li>\n<li>Functions (String manipulation, Collection length)</li>\n<li>XML (XML parsing and transformation)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VjbGlwc2UtZWU0ai9qc3RsLWFwaQ==\">https://github.com/eclipse-ee4j/jstl-api</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3Mub3JhY2xlLmNvbS9qYXZhZWUvNS9qc3RsLzEuMS9kb2NzL3RsZGRvY3Mv\">http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3Mub3JhY2xlLmNvbS9qYXZhZWUvNS9qc3RsLzEuMS9kb2NzL2FwaS8=\">http://docs.oracle.com/javaee/5/jstl/1.1/docs/api/</span></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"summary-2\"><a class=\"anchor\" href=\"#summary-2\">#</a> Summary</h3>\n<ul>\n<li>Be familiar with older JSP syntax due to legacy code in the marketplace</li>\n<li>For new JSP work, use EL and JSTL, but once we learn JSF you may prefer that</li>\n<li>Careful with SQL and XML tags 小心使用 SQL 和 XML 标签\n<ul>\n<li>Useful for prototyping and rapid design, and perhaps for smaller, iterative applications or deadlines.<br />\n 对于原型设计和快速设计很有用，也许对较小的迭代应用程序或截止日期很有用。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"mvc\"><a class=\"anchor\" href=\"#mvc\">#</a> MVC</h2>\n<ul>\n<li>Model (POJO/JavaBean)</li>\n<li>View (JSP/JSTL)</li>\n<li>Controller (Servlets)</li>\n</ul>\n<h3 id=\"limit-code-in-presentation-layer-在应用层中限制代码\"><a class=\"anchor\" href=\"#limit-code-in-presentation-layer-在应用层中限制代码\">#</a> Limit Code in Presentation Layer 在应用层中限制代码</h3>\n<ul>\n<li>\n<p>You have two options</p>\n<ul>\n<li>Put 25 lines of Java code directly in the JSP page<br />\n 将 25 行 Java 代码直接放在 JSP 页面中</li>\n<li>Put those 25 lines in a separate Java class and put 1 line in the JSP page that invokes it<br />\n 将这 25 行放在单独的 Java 类中，并在调用它的 JSP 页面中放入 1 行</li>\n</ul>\n</li>\n<li>\n<p>Why is the second option much better?<br />\n 为什么第二种选择更好？</p>\n<ul>\n<li>Development. You write the separate class in a Java environment (editor or IDE), not an HTML environment<br />\n 开发。您在 Java 环境（编辑器或 IDE）而不是 HTML 环境中编写单独的类</li>\n<li>Debugging. If you have syntax errors, you see them immediately at compile time. Simple print statements can be seen.<br />\n 调试。如果您有语法错误，则在编译时会立即看到它们。可以看到简单的打印语句。</li>\n<li>Testing. You can write a test routine with a loop that does 10,000 tests and reapply it after each change.<br />\n 测试。您可以编写一个具有 10,000 个测试的循环的测试例程，并在每次更改后重新应用它。</li>\n<li>Reuse. You can use the same class from multiple pages.<br />\n 重用。您可以在多个页面中使用相同的类。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"why-combine-servlets-and-jsp-为什么要结合servlet和jsp\"><a class=\"anchor\" href=\"#why-combine-servlets-and-jsp-为什么要结合servlet和jsp\">#</a> Why Combine Servlets and JSP? 为什么要结合 Servlet 和 JSP？</h3>\n<ul>\n<li>\n<p>Typical picture: use JSP to make it easier to develop and maintain the HTML content<br />\n 使用 JSP 使开发和维护 HTML 内容更加容易</p>\n<ul>\n<li>For simple dynamic code, call servlet code from scripting elements<br />\n 对于简单的动态代码，请从脚本元素中调用 servlet 代码</li>\n<li>For slightly more complex applications, use custom classes called from scripting elements<br />\n 对于稍微复杂的应用程序，请使用从脚本元素调用的自定义类</li>\n<li>For moderately complex applications, use beans and custom tags<br />\n 对于中等复杂的应用程序，请使用 beans 和自定义标签</li>\n</ul>\n</li>\n<li>\n<p>But, that’s not enough</p>\n<ul>\n<li>For complex processing, starting with JSP is awkward<br />\n 对于复杂的处理，以 JSP 开头很尴尬</li>\n<li>Despite the ease of separating the real code into separate classes, beans, and custom tags, the assumption behind JSP is that a single page gives a single basic look<br />\n 尽管可以轻松地将实际代码分为单独的类、beans 和自定义标签，但后面的假设 JSP 是单个页面具有单个基本外观</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"possibilities-for-handling-request-处理请求的可能方式\"><a class=\"anchor\" href=\"#possibilities-for-handling-request-处理请求的可能方式\">#</a> Possibilities for Handling Request 处理请求的可能方式</h3>\n<ul>\n<li>Servlet only. Works well when:<br />\n 仅 Servlet。在以下情况下效果很好：\n<ul>\n<li>Output is a binary type. E.g.: an image<br />\n 输出是二进制类型。例如：一张图片</li>\n<li>There is no output. E.g.: you are doing forwarding or redirection as in Search Engine example.<br />\n 没有输出。例如：您正在按照搜索引擎示例进行转发或重定向。</li>\n<li>Format/layout of page is highly variable. E.g.: portal.<br />\n 页面的格式 / 布局是高度可变的。例如：门户。</li>\n</ul>\n</li>\n<li>JSP only. Works well when:<br />\n 仅 JSP。在以下情况下效果很好：\n<ul>\n<li>Output is mostly character data. E.g.: HTML<br />\n 输出主要是字符数据。例如：HTML</li>\n<li>Format/layout mostly fixed.<br />\n 格式 / 布局大部分固定。</li>\n</ul>\n</li>\n<li>Combination (MVC architecture). Needed when:<br />\n 组合（MVC 体系结构）。在以下情况下需要：\n<ul>\n<li>A single request will result in multiple substantially different-looking results.<br />\n 单个请求将导致多个外观完全不同的结果。</li>\n<li>You have a large development team with different team members doing the Web development and the business logic.<br />\n 一个庞大的开发团队，由不同的团队成员进行 Web 开发和业务逻辑。</li>\n<li>You perform complicated data processing, but have a relatively fixed layout.<br />\n 执行复杂的数据处理，但是布局相对固定。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mvc-misconceptions-mvc的误解\"><a class=\"anchor\" href=\"#mvc-misconceptions-mvc的误解\">#</a> MVC Misconceptions MVC 的误解</h3>\n<ul>\n<li>An elaborate framework is necessary<br />\n 一个详尽的框架是必要的\n<ul>\n<li>Frameworks are often useful<br />\n 框架通常很有用\n<ul>\n<li>JSF (JavaServer Faces)\n<ul>\n<li>You should strongly consider JSF 2.x for medium/large projects!<br />\n 您应该强烈考虑将 JSF 2.x 用于大中型项目！</li>\n</ul>\n</li>\n<li>Spring MVC</li>\n<li>Struts</li>\n</ul>\n</li>\n<li>They are not required!<br />\n 它们不是必需的！\n<ul>\n<li>Implementing MVC with the builtin RequestDispatcher works very well for most simple and even moderately complex applications<br />\n 使用内置的 RequestDispatcher 实现 MVC 对于大多数简单甚至中等复杂的应用程序都非常有效</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>MVC totally changes your system design<br />\nMVC 完全改变了您的系统设计\n<ul>\n<li>You can use MVC for individual requests<br />\n 您可以将 MVC 用于单个请求</li>\n<li>Think of it as the MVC approach, not the MVC architecture<br />\n 将其视为 MVC 方法，而不是 MVC 体系结构\n<ul>\n<li>Also called the Model 2 approach</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mvc-flow-of-control-mvc控制流程\"><a class=\"anchor\" href=\"#mvc-flow-of-control-mvc控制流程\">#</a> MVC Flow of Control MVC 控制流程</h3>\n<p><img data-src=\"https://i.loli.net/2021/02/19/qa31edYPEvUnuDW.png\" alt=\"\" /></p>\n<h3 id=\"implement-mvc-with-requestdispatcher-使用requestdispatcher实施mvc\"><a class=\"anchor\" href=\"#implement-mvc-with-requestdispatcher-使用requestdispatcher实施mvc\">#</a> Implement MVC with RequestDispatcher 使用 RequestDispatcher 实施 MVC</h3>\n<ul>\n<li>\n<p>Define beans to represent result data<br />\n 定义 beans 代表结果数据</p>\n<ul>\n<li>Ordinary Java classes with at least one  <code>getBlah</code>  method<br />\n 具有至少一个 getBlah 方法的普通 Java 类</li>\n</ul>\n</li>\n<li>\n<p>Use a servlet to handle requests<br />\n 使用 Servlet 处理请求</p>\n<ul>\n<li>Servlet reads request parameters, checks for missing and malformed data, calls business logic, etc.<br />\nServlet 读取请求参数，检查丢失和格式错误的数据，调用业务逻辑等。</li>\n</ul>\n</li>\n<li>\n<p>Obtain bean instances<br />\n 获取 bean 实例</p>\n<ul>\n<li>The servlet invokes business logic (application-specific code) or data-access code to obtain the results.<br />\nServlet 调用业务逻辑（特定于应用程序的代码）或数据访问代码以获取结果。</li>\n</ul>\n</li>\n<li>\n<p>Store the bean in the request, session, or servlet context<br />\n 将 bean 存储在请求、会话或 servlet 环境中</p>\n<ul>\n<li>The servlet calls setAttribute on the request, session, or servlet context objects to store a reference to the beans that represent the results of the request.<br />\nServlet 在请求、会话或 Servlet 环境对象上调用 setAttribute，以存储对表示请求结果的 bean 的引用。</li>\n</ul>\n</li>\n<li>\n<p>Forward the request to a JSP page.<br />\n 将请求转发到 JSP 页面。</p>\n<ul>\n<li>The servlet determines which JSP page is appropriate to the situation and uses the forward method of RequestDispatcher to transfer control to that page.<br />\nServlet 确定哪个 JSP 页面适合于这种情况，并使用 RequestDispatcher 的 forward 方法将控制权转移到该页面。</li>\n</ul>\n</li>\n<li>\n<p>Extract the data from the beans.<br />\n 从 beans 中提取数据。</p>\n<ul>\n<li>JSP 1.2 (Old!)\n<ul>\n<li>The JSP page accesses beans with       <code>jsp:useBean</code>  and a scope matching the location of step 4. The page then uses  <code>jsp:getProperty</code>  to output the bean properties.<br />\nJSP 页面使用 jsp：useBean 和与步骤 4 的位置匹配的范围访问 bean。然后，该页面使用 jsp：getProperty 输出 bean 属性。</li>\n</ul>\n</li>\n<li>JSP 2.0 (Preferred!)\n<ul>\n<li>The JSP page uses  <code>$&#123;nameFromServlet.property&#125;</code>  to output bean properties</li>\n</ul>\n</li>\n<li>Either way, JSP page does not create or modify bean; it merely extracts and displays data that servlet created.<br />\n 无论哪种方式，JSP 页面都不会创建或修改 bean。它仅提取并显示 servlet 创建的数据。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"error-pages\"><a class=\"anchor\" href=\"#error-pages\">#</a> Error Pages</h3>\n<ul>\n<li>Can be done in a standard way for Java web applications with web.xml<br />\n 可以使用 web.xml，以标准方式完成 Java Web 应用程序</li>\n<li>Bad practice to leave application server default error pages - and can introduce security concerns by exposing too much information about your application logic<br />\n 不当做法：保留服务器的默认错误页面 —— 可能通过暴露有关应用程序逻辑的过多信息，而引起安全问题</li>\n</ul>\n<h2 id=\"more-platform-basics-更多平台基础\"><a class=\"anchor\" href=\"#more-platform-basics-更多平台基础\">#</a> More Platform Basics 更多平台基础</h2>\n<h3 id=\"jndi-and-resources\"><a class=\"anchor\" href=\"#jndi-and-resources\">#</a> JNDI and Resources</h3>\n<ul>\n<li>JNDI as defined by Java EE Tutorial:<br />\nJava EE 教程定义的 JNDI：\n<ul>\n<li>“The Java Naming and Directory Interface (JNDI) naming service enables components to locate other components and resources.”<br />\n“Java 命名和目录接口（JNDI）命名服务，使组件能够查找其他组件和资源。”</li>\n</ul>\n</li>\n<li>Resources, as defined by Java EE Tutorial:<br />\nJava EE 教程定义的资源：\n<ul>\n<li>“A program object that provides connections to other systems, such as database servers and messaging systems.”<br />\n“提供与其他系统（如数据库服务器和消息系统）连接的程序对象。”</li>\n</ul>\n</li>\n</ul>\n<p>Resources are identified by a unique and human friendly name called the JNDI name (i.e. jdbc/MyDataSource)<br />\n 资源通过唯一且人性化的名称（称为 JNDI 名称）进行标识（即 jdbc / MyDataSource）</p>\n<h3 id=\"jdbc-resource\"><a class=\"anchor\" href=\"#jdbc-resource\">#</a> JDBC Resource</h3>\n<ul>\n<li>Connection Pool 连接池</li>\n<li>JDBC Resource</li>\n<li>Creation Options 创建选项\n<ul>\n<li>NetBeans</li>\n<li>glassfish-resources.xml</li>\n<li>Glassfish Admin GUI</li>\n<li>asadmin</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"injection-注入\"><a class=\"anchor\" href=\"#injection-注入\">#</a> Injection 注入</h3>\n<ul>\n<li>Allows us to obtain references to resources without having to instantiate them directly.<br />\n 允许我们获得对资源的引用，而不必直接实例化它们。</li>\n<li>Declare the required resources via annotations (Injection Points)<br />\n 通过注解（注入点）声明所需的资源</li>\n<li>Container provides the required resources at runtime, and manages their lifecycle based on our specified scope<br />\n 容器在运行时提供所需的资源，并根据我们指定的范围管理其生命周期</li>\n<li>Java EE Platform provides 2 types:\n<ul>\n<li>Resource Injection 资源注入</li>\n<li>Dependency Injection 依赖注入</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"resource-injection\"><a class=\"anchor\" href=\"#resource-injection\">#</a> Resource Injection</h4>\n<ul>\n<li>As defined in the Java EE Tutorial:\n<ul>\n<li>“Resource injection enables you to inject any resource available in the JNDI namespace into any container-managed object, such as a servlet, an enterprise bean, or a managed bean.”<br />\n“资源注入使您能够将 JNDI 命名空间中任何可用的资源，注入到任何容器管理的对象中，例如 servlet、企业 bean 或托管 bean。”</li>\n</ul>\n</li>\n<li>Commonly used for <strong>DataSource and Validator</strong><br />\n 常用于数据源和验证器</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Java EE 5 Way</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">InitialContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InitialContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">DataSource</span> ds <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">)</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc/myDataSrc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NamingException</span> ne<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Java EE 7+ Way</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Resource</span><span class=\"token punctuation\">(</span>lookup<span class=\"token operator\">=</span>”jdbc<span class=\"token operator\">/</span>myDataSource”<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">DataSource</span> myDs<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"servlet-http\"><a class=\"anchor\" href=\"#servlet-http\">#</a> Servlet HTTP</h2>\n<h3 id=\"request-headers\"><a class=\"anchor\" href=\"#request-headers\">#</a> Request Headers</h3>\n<ul>\n<li>Use  <code>request.getHeader</code>  for arbitrary header 任意头\n<ul>\n<li>Remember to check for null 记得检查是否为空</li>\n<li>Cookies, authorization info, content length, and content type have shortcut methods<br />\nCookies，授权信息，内容长度和内容类型具有快捷方式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"response-headers\"><a class=\"anchor\" href=\"#response-headers\">#</a> Response Headers</h3>\n<ul>\n<li>Setting response headers 设置响应头\n<ul>\n<li>In general, set with  <code>response.setHeader</code></li>\n<li>In special cases, set with  <code>response.setContentType</code> ,  <code>response.setContentLength</code> ,  <code>response.addCookie</code> ,and  <code>response.sendRedirect</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"response-codes\"><a class=\"anchor\" href=\"#response-codes\">#</a> Response Codes</h3>\n<ul>\n<li>Setting status codes 设置状态码\n<ul>\n<li>Redirect user with  <code>response.sendRedirect(someURL)</code>  重定向用户使用</li>\n</ul>\n</li>\n<li>If you insert user-supplied data into the URL, encode with  <code>URLEncoder.encode</code> <br />\n 将用户提供的数据插入 URL，请使用 <code>URLEncoder.encode</code>\n<ul>\n<li>Send error pages with  <code>sendError</code>  发送错误页面</li>\n<li>In general, set via  <code>response.setStatus</code></li>\n</ul>\n</li>\n<li>Some sample status codes 一些常用状态码\n<ul>\n<li>200 (default)</li>\n<li>302 (forwarding; set with  <code>sendRedirect</code> ) 转发</li>\n<li>401 (unauthorized and needs authenticaton) 未经授权且需要认证</li>\n<li>403 (forbidden) 禁止</li>\n<li>404 (not found; set with  <code>sendError</code> ) 页面未找到</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"links\"><a class=\"anchor\" href=\"#links\">#</a> Links</h1>\n<p>Mozilla Developer Network</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9MZWFybi9IVE1ML0Zvcm1zL1lvdXJfZmlyc3RfSFRNTF9mb3Jt\">MDN - Your first HTML form</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9NZXRob2Rz\">MDN - HTTP request methods</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9MZWFybi9Db21tb25fcXVlc3Rpb25zL1doYXRfaXNfYV9VUkw=\">MDN - What is a URL?</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9MZWFybi9IVE1ML0ludHJvZHVjdGlvbl90b19IVE1ML0NyZWF0aW5nX2h5cGVybGlua3M=\">MDN - Creating hyperlinks</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJz\">MDN - HTTP headers</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9SZXNwb25zZV9jb2Rlcw==\">MDN - Response codes</span></li>\n</ul>\n<h1 id=\"lab\"><a class=\"anchor\" href=\"#lab\">#</a> Lab</h1>\n<h2 id=\"summary-3\"><a class=\"anchor\" href=\"#summary-3\">#</a> Summary</h2>\n<p>The purpose of this assignment is to learn the basics of an MVC style approach using JSP/Servlet, and to become familiar with these technologies in order to compare their use to later frameworks.</p>\n<h2 id=\"requirements\"><a class=\"anchor\" href=\"#requirements\">#</a> Requirements</h2>\n<h3 id=\"documentation\"><a class=\"anchor\" href=\"#documentation\">#</a> Documentation</h3>\n<p>Create a wiki page in your personal space titled <strong>Lab 4.</strong></p>\n<h3 id=\"database-setup\"><a class=\"anchor\" href=\"#database-setup\">#</a> Database Setup</h3>\n<p>Use your sample database and itmd4515 user from <a href=\"/computer-science/mse/itmd-515/week-3/\">Lab 3 - Junit, JDBC and Bean Validation</a>.</p>\n<h3 id=\"project-setup\"><a class=\"anchor\" href=\"#project-setup\">#</a> Project Setup</h3>\n<p>Create a <strong>Java with Maven Web Application</strong> project in NetBeans with the following coordinates and configuration:</p>\n<ol>\n<li>Project Name: <strong>uid-fp</strong></li>\n<li>Artifact ID: <strong>uid-fp</strong>(default is fine)</li>\n<li>Group ID: <strong>edu.itmd4515.uid</strong></li>\n<li>Version: <strong>1.0-SNAPSHOT</strong> (default is fine)</li>\n<li>Use a base package for your Java code of <strong>edu.itmd4515.uid</strong></li>\n<li>Under Server, choose Payara Server and Java EE 8 Web</li>\n</ol>\n<p>Accept the Lab 4 assignment to create your GitHub repository and configure your projects for source control as documented in Lab 2 - Setup and Introductory Webapp.</p>\n<blockquote>\n<p>Deviating from the package convention given above will mean that you can not benefit from Sonar and other automated tools, and I will not be able to fix this. Please follow the specification!</p>\n<p>We will be working in this repository from now until the end of the semester.  Please remember, I will be looking for multiple commits.  I would suggest using the lab number in your commit message as a prefix so you can also review the history throughout the semester, for example:</p>\n<ul>\n<li>Lab 4 - Initial Commit</li>\n<li>Lab 4 - POJO implementation and HTML form</li>\n<li>Lab 4 - Servlet MVC Controller</li>\n<li>Lab 4 - Fixed the Servlet MVC Controller RequestDispatcher logic</li>\n<li>Lab 4 - Finishing touches (comments, javadoc, code style)</li>\n</ul>\n</blockquote>\n<h3 id=\"project-requirements\"><a class=\"anchor\" href=\"#project-requirements\">#</a> Project Requirements</h3>\n<p>Implement the following within your uid-fp project:</p>\n<blockquote>\n<p><strong>Make sure you are following standard Java naming conventions. Please review the following if you are not sure what those naming conventions are:</strong><br />\n 确保您遵循标准的 Java 命名约定。如果您不确定这些命名约定是什么，请查看以下内容：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JlaWxseS5jb20vbGlicmFyeS92aWV3L2phdmEtOC1wb2NrZXQvOTc4MTQ5MTkwMTA4My9jaDAxLmh0bWw=\">Java 8 Pocket Guide by Patricia Liguori, Robert Liguori - Chapter 1. Naming Conventions</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9qYXZhL2NvZGVjb252ZW50aW9ucy0xMzUwOTkuaHRtbA==\">Code Conventions for the Java Programming Language - 9 Naming Conventions</span> (dated, but still correct)</li>\n</ul>\n</blockquote>\n<ol>\n<li>\n<p>Use your POJO from <a href=\"/computer-science/mse/itmd-515/week-3/\">Lab 3 - Junit, JDBC and Bean Validation</a> for the following requirements.  Enhance it by adding or refining fields as needed.</p>\n<blockquote>\n<p><strong>Important - Refactor your POJO from Lab 3 to use  <code>javax.validation</code>  packages instead of  <code>jakarta.validation</code>  packages.</strong></p>\n<p>This can be as simple as changing the import statements and substituting javax for jakarta on those import lines.  For your new code in Lab 4, make sure to use  <code>javax.validation</code>  and not  <code>jakarta.validation</code>  imports.  As I mentioned in the earlier weeks, there is much still changing in the Jakarta Enterprise landscape.  Many packages will be shifting from their old namespaces to new jakarta namespaces, and things like Payara need time to &quot;catch up&quot; with all this change.</p>\n<p>Lab 3 worked fine with  <code>jakarta.validation</code>  packages because it was running outside Payara.  Lab 4 will only work with  <code>javax.validation</code>  packages because the Hibernate Validator implementation library included with Payara is using the  <code>javax.validation</code>  packages.</p>\n</blockquote>\n</li>\n<li>\n<p>Add an HTML form and a Servlet to your project.<br />\n 将 HTML 表单和 Servlet 添加到您的项目。</p>\n<ol>\n<li>The form should contain fields necessary to create a new instance of your entity.<br />\n 该表单应包含创建实体的新实例所必需的字段。</li>\n<li>The form should POST to the Servlet.<br />\n 该表单应该 POST 到 Servlet。</li>\n<li>The form should be contained within a JSP page<br />\n 该表单应包含在 JSP 页面中</li>\n</ol>\n</li>\n<li>\n<p>Process the form submission in your Servlet by overriding the doPost method as demonstrated in class<br />\n 通过覆盖类中演示的 doPost 方法，来处理 Servlet 中的表单提交</p>\n<ol>\n<li>\n<p>Get the parameters of the form in your Servlet<br />\n 在 Servlet 中获取表单的参数</p>\n</li>\n<li>\n<p>Build and validate your entity using a Validator (obtain the Validator through Resource Injection as discussed in class)<br />\n 使用验证器构建和验证您的实体（如本课程中所讨论的，通过 “资源注入” 获取验证器）</p>\n</li>\n<li>\n<p>If the user input passes validation:<br />\n 如果用户输入通过验证：</p>\n<ol>\n<li>Set the validated entity as a request attribute<br />\n 将经过验证的实体，设置为请求属性</li>\n<li><strong>Forward</strong> (using RequestDispatcher) the user to a confirmation view in the WEB-INF/views directory of your project.  You may need to create this directory.<br />\n<strong> 转发</strong>（使用 RequestDispatcher），将用户转到项目的 WEB-INF /views 目录中的确认视图。您可能需要创建此目录。</li>\n<li>As demonstrated in class, the confirmation view should display fields of your entity using Expression Language<br />\n 确认视图应使用 “表达式语言” 显示您实体的字段。</li>\n<li>Document this with a description and screenshots on your wiki page.  The screenshots should display your form (before) and your confirmation view (after).<br />\n 用描述和屏幕截图记录下来。屏幕截图应显示表单（之前）和确认视图（之后）。</li>\n</ol>\n</li>\n<li>\n<p>If the user input does not pass validation<br />\n 如果用户输入未通过验证</p>\n<ol>\n<li><strong>Forward</strong> (using RequestDispatcher) the user back to the form.<br />\n<strong> 转发</strong>（使用 RequestDispatcher）将用户返回表单。</li>\n<li>Display appropriate error messages so they can fix their mistake(s).<br />\n 显示适当的错误消息，以便他们可以纠正错误。</li>\n<li>Re-populate the form with data from their prior submission.<br />\n 用他们先前提交的数据重新填充表单。</li>\n<li>Document this with a description and screenshots on your wiki page.  The screenshots should display your form with bad input (before) and your form with error messages (after).<br />\n 用描述和屏幕截图对此进行记录。屏幕截图应显示输入错误的表单（之前）和显示错误消息的表单（之后）。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>Write a brief summary paragraph to document:</p>\n<ol>\n<li>Your understanding of the difference between the forward and redirect operations.<br />\n 转发和重定向操作之间的区别。</li>\n<li>How would you be validating user submissions without the Bean Validation API standard?<br />\n 如果没有 Bean Validation API 标准，您将如何验证用户提交的内容？</li>\n<li>How do you think this approach would scale to a real application with 100's of entities?<br />\n 您认为这种方法如何扩展到具有 100 个实体的真实应用程序？</li>\n<li>Why didn't we need to include any additional dependencies (i.e. Bean Validation, JDBC) in this project?<br />\n 为什么在这个项目中我们不需要包含任何其他依赖项（即 Bean 验证，JDBC）？</li>\n</ol>\n</li>\n<li>\n<p>Use Sonar to analyze your code before submitting.  I have created Sonar projects for everyone.</p>\n</li>\n<li>\n<p>Submit to Blackboard</p>\n<ol>\n<li>Right your <strong>uid-fp</strong> project and select &quot;Clean&quot;</li>\n<li>Go to your NetBeans Projects directory.  Create a zip file of the <strong>uid-fp</strong> folder and submit it to the Blackboard assignment.</li>\n</ol>\n</li>\n<li>\n<p>Using JDBC, connect your webapp to the databse.</p>\n<ol>\n<li>Make sure you add the MySQL JDBC driver to your pom.xml.  Refer back to Lab 3 (or the lecture) if you don't remember how to do this.</li>\n<li>Create a Payara JDBC Resource for connectivity to your itmd4515 database.  There are different way to do this:\n<ol>\n<li>Adding  <code>&lt;data-source&gt;</code>  configuration to web.xml</li>\n<li>Using a  <code>@DataSourceDefinition</code>  annotation</li>\n<li>Configuring a Payara JDBC Connection Pool and JDBC Resource</li>\n</ol>\n</li>\n<li>Ensure that Payara has access to the JDBC driver for MySQL <strong>at runtime</strong>.  Which of the above options require us to do &quot;extra steps&quot; as system or application administrators to handle this?</li>\n</ol>\n<details><summary>Code</summary><div>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSourceDefinition</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>enterprise<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationScoped</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@ApplicationScoped</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@DataSourceDefinition</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        name <span class=\"token operator\">=</span> <span class=\"token string\">\"java:app/jdbc/itmd4515DS\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        className <span class=\"token operator\">=</span> <span class=\"token string\">\"com.mysql.cj.jdbc.MysqlDataSource\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        serverName <span class=\"token operator\">=</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        portNumber <span class=\"token operator\">=</span> <span class=\"token number\">3306</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        databaseName <span class=\"token operator\">=</span> <span class=\"token string\">\"Chinook\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        user <span class=\"token operator\">=</span> <span class=\"token string\">\"itmd4515\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        password <span class=\"token operator\">=</span> <span class=\"token string\">\"itmd4515\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        properties <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token string\">\"zeroDateTimeBehavior=CONVERT_TO_NULL\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token string\">\"useSSL=false\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token string\">\"serverTimezone=America/Chicago\"</span>            </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Lab4DbConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n</li>\n<li>\n<p>In your Servlet, obtain a DataSource using  <code>@Resource</code>  Injection</p>\n</li>\n<li>\n<p><strong>Only on successful validation</strong> write the submitted entity to the database using JDBC.</p>\n</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMD 515. Advanced Software Programming",
                "Java"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmm-571/lecture-3/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmm-571/lecture-3/",
            "title": "Lecture 3. Direct and Manage Project Work",
            "date_published": "2021-02-10T02:56:45.000Z",
            "content_html": "<h1 id=\"direct-and-manage-project-work-指导和管理项目工作\"><a class=\"anchor\" href=\"#direct-and-manage-project-work-指导和管理项目工作\">#</a> Direct and Manage Project Work 指导和管理项目工作</h1>\n<p>(p.90)</p>\n<p>Direct and Manage Project Work is the process of leading and performing the work defined in the project management plan and implementing approved changes to achieve the project’s objectives.<br />\n 指导和管理项目工作是，领导和执行项目管理计划中定义的工作，以及，实施已批准的更改，以实现项目目标的过程。</p>\n<p>The key benefit provides overall management of the project work deliverables, and thus improves the probability of project success.<br />\n 主要好处是对项目工作的可交付成果进行全面管理，从而提高了项目成功的可能性。</p>\n<p>Involves… 包括</p>\n<ul>\n<li>Planned project activities to complete project deliverables<br />\n 计划的项目活动以完成项目可交付成果</li>\n<li>Accomplish established objectives<br />\n 完成既定目标</li>\n</ul>\n<p>(p. 92)</p>\n<p>The Project Manager directs the performance of the planned project activities and manages the various technical and organizational interfaces and through monitor-and-control, applies the necessary guidance to ensure the project remains on track.<br />\n 项目经理指导执行计划好的项目活动，并管理各种技术和组织接口，并通过监视和控制，应用必要的指导，以确保项目步入正轨。</p>\n<h2 id=\"project-documents-项目文件\"><a class=\"anchor\" href=\"#project-documents-项目文件\">#</a> Project Documents 项目文件</h2>\n<p>(p. 92)</p>\n<ul>\n<li>Requirements 需求</li>\n<li>Change requests 变更需求</li>\n<li>Lessons learned register 经验教训注册</li>\n<li>Milestone list 里程碑清单</li>\n<li>Project communications: 项目交流\n<ul>\n<li>Action items 行动项目</li>\n<li>Status reports 状态报告</li>\n<li>Issue logs 问题日志</li>\n<li>Assumptions 假设</li>\n<li>Known risks 已知风险</li>\n<li>Minutes 分钟</li>\n<li>Etc.</li>\n</ul>\n</li>\n</ul>\n<p>(p. 93)</p>\n<ul>\n<li>Project schedule (HUGE!) 项目进度表（巨大！）</li>\n<li>Requirements trackability matrix (RTM; annoying but necessary) 需求可跟踪性矩阵（RTM；烦人但有必要）<br />\nExample RTM can link the non technical to technical requirements 示例 RTM 可以将非技术要求与技术要求联系起来</li>\n<li>Risk register (huge!  - see final course project for details) 风险登记册（巨大！- 有关详细信息，请参阅最终课程项目）</li>\n</ul>\n<h2 id=\"deliverables-可交付成果\"><a class=\"anchor\" href=\"#deliverables-可交付成果\">#</a> Deliverables 可交付成果</h2>\n<p>(p. 95)<br />\n“a deliverable is any unique and verifiable product, result, or capacity to perform a service…”<br />\n“可交付成果是指任何独特且可验证的产品，结果或执行服务的能力……”</p>\n<p>This is an excellent test question!<br />\n 这是一个很好的测试问题！</p>\n<p>What you deliver to your customer!<br />\n 您交付给客户的东西！</p>\n<h2 id=\"issue-log-youll-need-to-use-this-问题日志\"><a class=\"anchor\" href=\"#issue-log-youll-need-to-use-this-问题日志\">#</a> Issue Log – You’ll need to use this 问题日志</h2>\n<p>(p.96)</p>\n<ul>\n<li>Topic – what the issue is 主题–问题是什么</li>\n<li>Who identified it 谁识别了</li>\n<li>When it was discovered 被发现时</li>\n<li>Priority (high, low, medium -&gt; “Show stopper”) 优先级（高，低，中 -&gt;“显示挡块”）</li>\n<li>Who owns the resolution 谁拥有决议</li>\n<li>What happens if the issue is not resolved 如果问题未解决，该怎么办？</li>\n<li>Target closure date 目标截止日期\n<ul>\n<li>Dates of Status/closure 状态 / 关闭日期</li>\n<li>Use “alt/enter” to build a new line on an excel spreadsheet. 使用 “ alt /enter” 在 excel 电子表格上建立新行。</li>\n<li>Date every entry, and have a name on every entry 为每个条目加上日期，并在每个条目上都有一个名称</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"issue-vs-risk-问题与风险\"><a class=\"anchor\" href=\"#issue-vs-risk-问题与风险\">#</a> Issue vs. Risk 问题与风险</h2>\n<dl>\n<dt>Risk 风险</dt>\n<dd>something good or bad that might happen<br />\n 可能发生的好事或坏事</dd>\n<dt>Issue 问题</dt>\n<dd>a known activity that must be dealt with, may be the result of a risk item manifesting itself.<br />\n 必须处理的已知活动，可能是风险项目本身表现出来的结果。</dd>\n</dl>\n<h2 id=\"change-requests-why\"><a class=\"anchor\" href=\"#change-requests-why\">#</a> Change requests – why?</h2>\n<p>(p. 96)</p>\n<p>Modify: 调整</p>\n<ul>\n<li>project policies 项目政策</li>\n<li>Scope 范围</li>\n<li>Any baselined document 任何基准文件</li>\n<li>Cost 成本</li>\n<li>Budget 预算</li>\n<li>Quality demand 质量要求</li>\n<li>Product results 产品结果</li>\n<li>Requirements 要求</li>\n</ul>\n<p>When: 什么时候</p>\n<ul>\n<li>Corrective action 纠正措施</li>\n<li>Preventative action 预防措施</li>\n<li>Defect repair 缺陷修复</li>\n<li>Updates 更新</li>\n<li>New information 新讯息</li>\n</ul>\n<h1 id=\"manage-project-knowledge\"><a class=\"anchor\" href=\"#manage-project-knowledge\">#</a> Manage Project Knowledge</h1>\n<p>(p. 98)<br />\n“...is the process of using existing knowledge and creating new knowledge to achieve the project’s objectives and contribute to organizational learning.”<br />\n“管理项目知识，是利用现有知识，并创造新知识，以实现项目目标，并促进组织学习的过程。”</p>\n<h2 id=\"2-types-of-knowledge\"><a class=\"anchor\" href=\"#2-types-of-knowledge\">#</a> 2 Types of Knowledge</h2>\n<p>(p. 100)</p>\n<dl>\n<dt>Explicit knowledge (words, pictures, &amp; numbers can express them) 明确的知识（单词，图片和数字可以表达它们）</dt>\n<dd>\n<ul>\n<li>Relatively easy to capture 比较容易捕捉</li>\n<li>Relatively easy to share 比较容易分享</li>\n</ul>\n</dd>\n<dt>Tacit (Beliefs, insights, ability &amp; experience) 默契（信念，见解，能力和经验）</dt>\n<dd>\n<ul>\n<li>Hard to share 很难分享</li>\n<li>Stored in minds (typically experts) 储存在头脑中（通常是专家）</li>\n<li>Shared through conversations 通过对话分享</li>\n<li>(like feelings) （喜欢的感觉）</li>\n</ul>\n</dd>\n</dl>\n<h2 id=\"observations-on-tacit-knowledge-隐性知识观察\"><a class=\"anchor\" href=\"#observations-on-tacit-knowledge-隐性知识观察\">#</a> Observations on Tacit Knowledge  隐性知识观察</h2>\n<ul>\n<li>\n<p>Stories shared at the right time to deliver knowledge<br />\n 在适当的时间分享故事以传递知识</p>\n</li>\n<li>\n<p>First hand experience is trusted more<br />\n 第一手经验值得信赖</p>\n</li>\n<li>\n<p>Expert can gauge what learner is ready to learn<br />\n 专家可以评估哪些学习者准备学习</p>\n</li>\n<li>\n<p>Expert can alter sequence of learning to optimize delivery<br />\n 专家可以更改学习顺序以优化交付</p>\n</li>\n<li>\n<p>People can use body language to express important points<br />\n 人们可以使用肢体语言来表达要点</p>\n</li>\n<li>\n<p>People can be excellent source of on-demand chunks of knowledge<br />\n 人们可以成为按需分配知识的绝佳来源</p>\n</li>\n</ul>\n<h2 id=\"methods-to-share-knowledge-分享知识的方法\"><a class=\"anchor\" href=\"#methods-to-share-knowledge-分享知识的方法\">#</a> Methods to Share Knowledge 分享知识的方法</h2>\n<p>(p. 103)</p>\n<ul>\n<li>Networking</li>\n<li>Communities of practice</li>\n<li>Meetings</li>\n<li>Work shadowing</li>\n<li>Seminars/conferences</li>\n<li>Workshops/training/interactive-learning</li>\n<li>Story telling (huge!)</li>\n</ul>\n<h1 id=\"monitor-and-control-project-work-监控项目工作\"><a class=\"anchor\" href=\"#monitor-and-control-project-work-监控项目工作\">#</a> Monitor and Control Project Work 监控项目工作</h1>\n<p>(p. 105)</p>\n<p>…track, review, &amp; report project progress compared to plan.<br />\n… 跟踪，审查和报告与计划相比的项目进度。</p>\n<p>Value:<br />\nAllows stakeholders to understand the current state of the project, to recognize the actions taken to address any key performance issues, and to have visibility into the future project status with cost and schedule forecasts.<br />\n 价值：使利益相关者能够了解项目的当前状态，认识到为解决任何关键绩效问题而采取的行动，并可以通过成本和进度预测来了解未来的项目状态。</p>\n<h1 id=\"perform-integrated-change-control-执行综合变更控制\"><a class=\"anchor\" href=\"#perform-integrated-change-control-执行综合变更控制\">#</a> Perform Integrated Change Control 执行综合变更控制</h1>\n<p>(p. 113)</p>\n<p>“…is the process of reviewing all change requests; approving changes and managing changes to deliverables, project documents, and the project management plan; and communicating the decisions” to the appropriate stakeholders.<br />\n“…… 是审查所有变更请求的过程；批准变更并管理对可交付成果，项目文档和项目管理计划的变更；并将决策传达给适当的利益相关者。</p>\n<p>Value:<br />\nit allows for documented changes within the project to be considered in an integrated manner while addressing overall project risk, which often arises from changes made without consideration of the overall objectives or plans.<br />\n 价值：它允许在解决总体项目风险的同时，以综合的方式考虑项目内已记录的变更，这些风险通常是由于未考虑总体目标或计划而进行的变更引起的。</p>\n<h2 id=\"2-failures-to-react-to-change-or-react-fast-enough\"><a class=\"anchor\" href=\"#2-failures-to-react-to-change-or-react-fast-enough\">#</a> 2 failures to react to change, or react fast enough</h2>\n<h3 id=\"the-challenge-space-shuttle-disaster\"><a class=\"anchor\" href=\"#the-challenge-space-shuttle-disaster\">#</a> The Challenge space shuttle disaster.</h3>\n<p>挑战航天飞机灾难。<br />\nThe unexpected change was a very cold launch pad:<br />\n 意外的变化是一个非常冷的发射台</p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/Da9QGH_WivM\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<p>Challenger: A Rush To Launch<br />\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/2FehGJQlOf0\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<blockquote>\n<p>Jan/’85 - 53 degree Fahrenheit temperature allowed primary “o” ring to fail one year earlier (Allan McDonald) Director of Rocket Booster Project @5:36 min)</p>\n</blockquote>\n<h3 id=\"chicago-marathon-death\"><a class=\"anchor\" href=\"#chicago-marathon-death\">#</a> Chicago Marathon Death</h3>\n<p>“CHICAGO, Oct. 7 — As temperatures soared into the upper 80s, hundreds of runners in the Chicago marathon fell ill and at least one died on Sunday, prompting officials here to halt the annual race for the first time in its 30-year history.”*</p>\n<p>Details (optional viewing)</p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/uQ8Dj5F00ig\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<h2 id=\"the-performance-integrated-change-control-process\"><a class=\"anchor\" href=\"#the-performance-integrated-change-control-process\">#</a> The performance integrated change control process…</h2>\n<p>(p. 115)<br />\n 绩效综合变更控制流程…</p>\n<p>“is conducted from project start through completion and is the ultimate responsibility of the project manager.”<br />\n“从项目开始到完成，都是项目经理的最终责任。”</p>\n<p>Change control process:<br />\n(p. 119)</p>\n<ul>\n<li>Identify 识别</li>\n<li>Document 文件</li>\n<li>Decide on changes ;<br />\n 决定变化；<br />\n“Review changes, approving, rejecting, deferring, or making other decisions about changes to the project documents, deliverables, or baselines.<br />\n“审查有关项目文档，可交付成果或基准变更的变更，批准，拒绝，推迟或做出其他决定。</li>\n<li>Track changes: 跟踪变化\n<ul>\n<li>Identified 已识别</li>\n<li>Registered 已登记</li>\n<li>Assessed (huge!) 已评估</li>\n<li>Approved 已确认</li>\n<li>Tracked 已跟踪</li>\n<li>Communicate completion 沟通完成</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"decision-making-huge\"><a class=\"anchor\" href=\"#decision-making-huge\">#</a> Decision Making (Huge!)</h3>\n<ul>\n<li>Voting 投票</li>\n<li>Autocratic decision making – one person votes for all<br />\n 专制决策 —— 一人投票赞成</li>\n<li>Multicriteria decision analysis: the use of a decision matrix to provide an analytical approach to selecting a correct option.  (See next slide.)<br />\n 多准则决策分析：使用决策矩阵为选择正确选项提供一种分析方法。 （请参阅下一张幻灯片。）</li>\n</ul>\n<h1 id=\"assignment-b\"><a class=\"anchor\" href=\"#assignment-b\">#</a> Assignment B</h1>\n<p>Dr. Covey’s “The 7 Habits of Highly Effect People” Essay Questions</p>\n<h2 id=\"purposeintent-目的意图\"><a class=\"anchor\" href=\"#purposeintent-目的意图\">#</a> Purpose/Intent: 目的 / 意图</h2>\n<p>Scrum Masters are defined as “Servant Leaders.”  An important attribute of Servant Leaders is they develop the skills and abilities of the people in their sphere of influence. This book will show you how to improve yourself as a leader, professionally, and as a human.  And, once you gain comfort in improving yourself, you will be well positioned to grow the personal abilities of your team members.  The idea of this assignment is to have you read, understand, and demonstrate that you can apply the lessons in this book while in a team leadership role.  In addition to strengthening your leadership ability, this assignment is in direct support of employee development, which is a component of human resources.  Human resources is a unit of this course.<br />\nScrum Masters 被定义为 “仆人领袖”。仆人式领导者的一个重要属性是他们在势力范围内发展人民的技能和能力。本书将向您展示如何提高自己的领导才能，职业素养和作为人的能力。而且，一旦您在改善自己的能力上感到舒适，就可以很好地提高团队成员的个人能力。这项任务的目的是让您阅读，理解和证明您可以在担任团队领导角色时应用本书中的课程。除了增强领导能力外，这项工作还直接支持员工发展，这是人力资源的组成部分。人力资源是本课程的一部分。</p>\n<p>BIO (as found on <span class=\"exturl\" data-url=\"aHR0cDovL0FtYXpvbi5jb20=\">Amazon.com</span>): Dr. Stephen R. Covey is a renowned leadership authority, teacher, organizational consultant, and co-founder of FranklinCovey Co. He is author of several international bestsellers, including The 7 Habits of Highly Effective People, which has sold over 20 million copies. He was named one of TIME Magazine's 25 Most Influential Americans. Also, (as found on Wikipedia), he earned an MBA from Harvard.<br />\nStephen R. Covey 博士是著名的领导机构，老师，组织顾问和 FranklinCovey Co. 的共同创始人。他是几本国际畅销书的作者，其中包括《高效人的七个习惯》，该书的销量已超过 2000 万册。他被《时代周刊》评选为 25 位最有影响力的美国人之一。另外，（在 Wikipedia 上找到），他获得了哈佛大学的 MBA 学位。</p>\n<p>Time Estimate: Students indicate that it takes about 20 hours to read this book.  They typically read it in English, though that is not required (it has been translated into over 20 languages) After you complete reading this book, I anticipate it will take about 2 to 3 hours to complete this written component of this assignment.   I hope you will work on it for a bit, put it down, and come back once you think about it some more (and repeat this process).</p>\n<p>Why I chose this book:</p>\n<ul>\n<li>Mr. Covey provides a great example of leadership, through example, in this book.<br />\n 本书以身作则，科维先生提供了一个很好的领导实例。</li>\n<li>Specifically, in habits 1-3, there are many hints as to how to be a great Scrum Master.<br />\n 具体来说，在习惯 1-3 中，有很多关于如何成为一名出色的 Scrum Master 的提示。</li>\n<li>There are many tips on how to personally improve to get more of what you desire out of life.<br />\n 关于如何自我改善以从生活中获得更多的期望，有很多技巧。</li>\n<li>Mr. Covey demonstrates his excellent leadership skills in this book using Ethos (character), Pathos (emotion), and Logos (Logic).  Just type in any of these three terms into Google, and you will find much information on these subjects.  Also, I have read Wikipedia for these items, and they do a good job on these topics.  Ethos, Pathos and Logos are the core of being accepted as credible and trusted.<br />\nCovey 先生在本书中使用了 Ethos（角色），Pathos（情感）和 Logos（逻辑）展示了他出色的领导才能。只需在 Google 中输入这三个术语中的任何一个，您就会发现有关这些主题的很多信息。另外，我已经阅读了 Wikipedia 中的这些项目，它们在这些主题上做得很好。 Ethos，Pathos 和 Logos 是被公认为可信和受信任的核心。</li>\n<li>This book has been translated into about 24 languages. International students may be able to read this book in their favorite language.<br />\n 本书已被翻译成大约 24 种语言。国际学生可以用他们喜欢的语言阅读这本书。</li>\n<li>This book is easy to find, and can be purchased at a relatively low price.  It is also found in most libraries.  But, I do recommend buying it, and taking notes in it as you read it.<br />\n 这本书很容易找到，可以以较低的价格购买。在大多数库中也可以找到它。但是，我建议您购买它，并在阅读时记笔记。</li>\n</ul>\n<blockquote>\n<p>There will be no questions on exams from this book.</p>\n<p>As for the minimum word count on your answers, when you answer a question, use as few words as possible.  But, use just enough words to get your meaning across. I say this because using as few words as possible to deliver your meaning is a skill that will help you succeed in business.  Compact, concise, meaningful e-mails get read, and then acted on. Long and dull e-mails that take a while to get to the point do not get read.  In fact, they tend to get ignored, and the author’s future communications will tend to be ignored too.  What this means in this instance is that I am expecting for you to read the book and understand what the principles that Covey shares mean to you.  And, establishing a minimum word count is not a good way to determine if you derived meaning from the book (or not).<br />\n 至于回答的最少单词数，当您回答问题时，请使用尽可能少的单词。但是，只用足够多的词来表达您的意思即可。我之所以这样说，是因为使用尽可能少的单词来表达您的意思是一项可以帮助您成功开展业务的技能。阅读紧凑，简洁，有意义的电子邮件，然后采取行动。冗长而乏味的电子邮件需要花费一些时间才能到达目的。实际上，它们往往会被忽略，作者未来的交流也将被忽略。在这种情况下，这意味着我希望您阅读本书并了解 Covey 所分享的原则对您而言意味着什么。而且，确定最小字数不是确定您是否从书中得出含义的好方法。</p>\n</blockquote>\n<h2 id=\"the-assignment\"><a class=\"anchor\" href=\"#the-assignment\">#</a> The Assignment:</h2>\n<p>Please read the questions below before you read the book. Please copy/paste the questions found here into a MS Word document, answer each question, then post your MS Word document in Blackboard.  The idea is to answer the 5 following questions in an essay format (using as few words as possible).  The contribution of each question to your score for this assignment immediately follows the essay prompt in parenthesis.<br />\n 在阅读本书之前，请先阅读以下问题。请将此处找到的问题复制 / 粘贴到 MS Word 文档中，回答每个问题，然后将您的 MS Word 文档张贴在 Blackboard 中。想法是以论文形式（使用尽可能少的单词）回答以下五个问题。每个问题对您本次作业分数的贡献都紧随括号中的论文提示。</p>\n<ol>\n<li>\n<p>What personal change do you want to make to become more effective in your professional and personal life? (10%)<br />\n 您想进行哪些个人更改以使其在职业和个人生活中更加有效？</p>\n</li>\n<li>\n<p>What are the first 6 of the habits as outlined by Steven Covey? Please describe each in five or less sentences. (20%)<br />\n 史蒂文・科维（Steven Covey）概述的前 6 种习惯是什么？请用五句话以内描述每个习惯。</p>\n</li>\n<li>\n<p>The 7th habit is to “sharpen the saw.”  What is your personal ongoing plan to stay relevant as technology changes as the decades pass by? (30%)<br />\n 第七个习惯是 “磨锯子”。在过去的几十年中，随着技术的变化，您个人目前的计划是什么，以保持相关性？</p>\n</li>\n<li>\n<p>Scrum Masters are to be “servant leaders.” Steven Covey demonstrates his “servant leader” ability through this book. A “servant leader” strives to ensure that “other people’s highest priority needs are being served. The best test, and difficult to administer, is: Do those served (followers) grow as persons? Do they, while being served, become healthier, wiser, freer, more autonomous, more likely themselves to become servant (leaders) … A servant-leader focuses primarily on the growth and well-being of people and the communities to which they belong. … The servant-leader shares power, puts the needs of others first and helps people develop and perform as highly as possible.”  Basically, a true leader, as defined by the servant leader ideology, improves those that follow them.  What is the most important item from this book that will help you improve others? (30%)<br />\n Scrum Master 将成为 “仆人式领导者”。史蒂文・科维（Steven Covey）通过这本书展示了他的 “仆人领袖” 能力。 “服务负责人” 致力于确保 “满足其他人的最高优先需求”。最好的测试且难以管理，是：被服务的人（追随者）会随着人的成长而成长吗？他们在得到服务时会变得更健康，更明智，更自由，更自治，更可能自己成为仆人（领导者）吗…… 仆人领导者主要关注人民及其所属社区的成长和福祉。 …… 仆人领导者分享权力，将他人的需求放在首位，并帮助人们尽可能地发展和表现。” 基本上，如仆人领导者思想所定义的那样，一个真正的领导者可以改善跟随他们的人。本书中最重要的是什么可以帮助您改善他人？</p>\n</li>\n<li>\n<p>What did you learn from this homework assignment that will help you achieve your professional and/or personal goals? (10%)<br />\n 您从这项家庭作业中学到了什么，可以帮助您实现职业和 / 或个人目标？</p>\n</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMM 571. Project Management",
                "项目管理"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmd-515/week-3/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmd-515/week-3/",
            "title": "Week 3. Junit, JDBC and Bean Validation",
            "date_published": "2021-02-06T06:26:05.000Z",
            "content_html": "<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"jdbc\"><a class=\"anchor\" href=\"#jdbc\">#</a> JDBC</h2>\n<h3 id=\"using-preparedstatement\"><a class=\"anchor\" href=\"#using-preparedstatement\">#</a> Using  <code>PreparedStatement</code></h3>\n<p><code>PreparedStatement</code>  is a subclass of Statement that allows you to pass arguments to a precompiled SQL statement.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> value <span class=\"token operator\">=</span> <span class=\"token number\">100_000.00</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> query <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * FROM Employee WHERE Salary > ?\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Parameter for substitution</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">PreparedStatement</span> pStmt <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pStmt<span class=\"token punctuation\">.</span><span class=\"token function\">setDouble</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Substitutes value for the first parameter in the prepared statement.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span> pStmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<ul>\n<li>In this code fragment, a prepared statement returns all columns of all rows whose salary is greater than $100,000.</li>\n<li><code>PreparedStatement</code>  is useful when you have a SQL statements that you are going to execute multiple times.</li>\n</ul>\n</blockquote>\n<h4 id=\"situation\"><a class=\"anchor\" href=\"#situation\">#</a> Situation</h4>\n<ul>\n<li>You are repeatedly executing query or update where format stays consistent, but values change<br />\n 您正在重复执行查询或更新，格式保持一致，但值改变的地方</li>\n<li>You can make a parameterized query or update, then pass in values for the placeholders<br />\n 您可以进行参数化查询或更新，然后传递占位符的值</li>\n</ul>\n<h4 id=\"advantages\"><a class=\"anchor\" href=\"#advantages\">#</a> Advantages</h4>\n<ul>\n<li>More convenient than string concatenation<br />\n 比字符串连接更方便</li>\n<li>Significantly faster with most drivers and databases<br />\n 在大多数驱动程序和数据库下，速度显著提高</li>\n<li>If values contain user data, much less susceptible to SQL injection attacks<br />\n 如果值为用户输入，则更不容易受到 SQL 注入攻击</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2021/02/06/tFn4ZXVAzpQ7WMr.jpg\" alt=\"\" title=\"SQL Injection - from Randall Munroe and xkcd.com\" /></p>\n<h3 id=\"using-callablestatement\"><a class=\"anchor\" href=\"#using-callablestatement\">#</a> Using  <code>CallableStatement</code></h3>\n<p>A  <code>CallableStatement</code>  allows non-SQL statements (such as stored procedures) to be executed against the database.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">CallableStatement</span> cStmt <span class=\"token operator\">=</span> con<span class=\"token punctuation\">.</span><span class=\"token function\">prepareCall</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;CALL EmplAgeCount (?, ?)&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cStmt<span class=\"token punctuation\">.</span>setInt <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The IN parameter is passed in to the stored procedure.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span> cStmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cStmt<span class=\"token punctuation\">.</span><span class=\"token function\">registerOutParameter</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Types</span><span class=\"token punctuation\">.</span>INTEGER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> cStmt<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> cStmt<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The OUT parameter is returned from the stored procedure.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There are \"</span> <span class=\"token operator\">+</span> count <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token string\">\" Employees over the age of \"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<ul>\n<li>Stored procedures are executed on the database.</li>\n</ul>\n</blockquote>\n<h3 id=\"transaction-事务\"><a class=\"anchor\" href=\"#transaction-事务\">#</a> Transaction 事务</h3>\n<h4 id=\"what-is-a-transaction\"><a class=\"anchor\" href=\"#what-is-a-transaction\">#</a> What is a Transaction?</h4>\n<ul>\n<li>\n<p>A transaction is a mechanism to handle groups of operations as though they were one.<br />\n 事务是一种处理一组操作的机制。</p>\n</li>\n<li>\n<p>Either all operations in a transaction occur or none occur at all.<br />\n 事务中的所有操作都发生了，或者根本没有发生。</p>\n</li>\n<li>\n<p>The operations involved in a transaction might rely on one or more databases.<br />\n 事务中涉及的操作可能依赖于一个或多个数据库。</p>\n</li>\n</ul>\n<h4 id=\"acid-properties-of-a-transaction-事务的acid属性\"><a class=\"anchor\" href=\"#acid-properties-of-a-transaction-事务的acid属性\">#</a> ACID Properties of a Transaction 事务的 ACID 属性</h4>\n<p>A transaction is formally defined by the set of properties that is known by the acronym ACID.<br />\n 事务由 ACID 属性集定义。</p>\n<dl>\n<dt>Atomicity 原子性</dt>\n<dd>A transaction is done or undone completely. In the event of a failure, all operations and procedures are undone, and all data rolls back to its previous state.<br />\n 事务全部完成或全部撤消。发生故障时，所有操作和过程都将被撤消，并且所有数据都会回滚到以前的状态。</dd>\n<dt>Consistency 一致性</dt>\n<dd>A transaction transforms a system from one consistent state to another consistent state.<br />\n 事务将系统从一个一致状态转换为另一个一致状态。</dd>\n<dt>Isolation 隔离性</dt>\n<dd>Each transaction occurs independently of other transactions that occur at the same time.<br />\n 同时发生的事务相互独立。</dd>\n<dt>Durability 耐久性</dt>\n<dd>Completed transactions remain permanent,even during system failure.<br />\n 即使在系统故障期间，已完成的事务也将保持永久不变。</dd>\n</dl>\n<p><img data-src=\"https://i.loli.net/2021/02/06/S96DsZIu3TF2yMq.png\" alt=\"\" title=\"Transferring Without Transactions\" /></p>\n<p>A - Successful transfer<br />\nB - Unsuccessful transfer (Accounts are left in an inconsistent state.)</p>\n<p><img data-src=\"https://i.loli.net/2021/02/06/Ir4MbKu1U3RGnmH.png\" alt=\"\" title=\"Successful Transfer with Transactions\" /><br />\nA - Changes within a transaction are buffered.<br />\nB - If a transfer is successful, changes are committed (made permanent).</p>\n<p><img data-src=\"https://i.loli.net/2021/02/06/djQRTNWxChPgMmo.png\" alt=\"\" title=\"Unsuccessful Transfer with Transactions\" /><br />\nA - Changes within a transaction are buffered.<br />\nB - If a problem occurs, the transaction is rolled back to the previous consistent state.</p>\n<h4 id=\"jdbc-transactions\"><a class=\"anchor\" href=\"#jdbc-transactions\">#</a> JDBC Transactions</h4>\n<p>By default, when a  <code>Connection</code>  is created, it is in auto-commit mode.</p>\n<ul>\n<li>Each individual SQL statement is treated as a transaction and automatically committed after it is executed.</li>\n<li>To group two or more statements together, you must disable auto-commit mode.<br />\n <code>con.setAutoCommit (false);</code></li>\n<li>You must explicitly call the commit method to complete the transaction with the database.<br />\n <code>con.commit();</code></li>\n<li>You can also programmatically roll back transactions in the event of a failure.<br />\n <code>con.rollback();</code></li>\n</ul>\n<h2 id=\"bean-validation\"><a class=\"anchor\" href=\"#bean-validation\">#</a> Bean Validation</h2>\n<ul>\n<li>Bean Validation 1.1 in Java EE 7</li>\n<li>Bean Validation 2.0 in Jakarta EE 8</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qYXZhZWUuZ2l0aHViLmlvL2phdmFlZS1zcGVjL2phdmFkb2NzL2phdmF4L3ZhbGlkYXRpb24vcGFja2FnZS1zdW1tYXJ5Lmh0bWw=\">javax.validation</span> package</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmpib3NzLm9yZy9oaWJlcm5hdGUvc3RhYmxlL3ZhbGlkYXRvci9yZWZlcmVuY2UvZW4tVVMvaHRtbF9zaW5nbGUv\">Hibernate Validator</span>\n<ul>\n<li>Custom Validation in all layers vs Standard Validation in Domain Model</li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2hpYmVybmF0ZS5vcmcvdmFsaWRhdG9yL2RvY3VtZW50YXRpb24vZ2V0dGluZy1zdGFydGVkLw==\">Getting Starting with Bean Validation</span>\n<ul>\n<li>Maven Coordinates</li>\n<li>Junit\n<ul>\n<li>Where to place Validator?</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qYXZhZWUuZ2l0aHViLmlvL2phdmFlZS1zcGVjL2phdmFkb2NzL2luZGV4Lmh0bWw/amF2YXgvdmFsaWRhdGlvbi9jb25zdHJhaW50cy9wYWNrYWdlLXN1bW1hcnkuaHRtbA==\">Jakarta EE 8 API Docs</span></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>Project Files/pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.hibernate.validator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>hibernate-validator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>7.0.0.Final<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.glassfish<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jakarta.el<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.hibernate.validator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>hibernate-validator-cdi<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>7.0.0.Final<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"built-in-constraints-11\"><a class=\"anchor\" href=\"#built-in-constraints-11\">#</a> Built-In Constraints - 1.1</h3>\n<table>\n<thead>\n<tr>\n<th>Constraint</th>\n<th>Accepted Types</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<p>AssertFalse<br />\nAssertTrue</p>\n</td>\n<td>\n<p>Boolean, boolean</p>\n</td>\n<td>\n<p>The annotated element must be either false or true</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>DecimalMax<br />\nDecimalMin</p>\n</td>\n<td>\n<p>BigDecimal, BigInteger, CharSequence, byte, short, int, long, and respective wrappers</p>\n</td>\n<td>\n<p>The element must be greater or lower than the specified value</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Future<br />\nPast</p>\n</td>\n<td>\n<p>Calendar, Date</p>\n</td>\n<td>\n<p>The annotated element must be a date in the future or in the past</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Max<br />\nMin</p>\n</td>\n<td>\n<p>BigDecimal, BigInteger, byte, short, int, long, and their wrappers</p>\n</td>\n<td>\n<p>The element must be greater or lower than the specified value</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Null<br />\nNotNull</p>\n</td>\n<td>\n<p>Object</p>\n</td>\n<td>\n<p>The annotated element must be null or not</p>\n</td>\n</tr>\n<tr>\n<td>Pattern</td>\n<td>CharSequence</td>\n<td>The element must match the specified regular expression</td>\n</tr>\n<tr>\n<td>Digits</td>\n<td>BigDecimal, BigInteger, CharSequence, byte, short, int, long, and respective wrappers</td>\n<td>The annotated element must be a number within accepted range</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>Object[], CharSequence, Collection&lt;?&gt;, Map&lt;?, ?&gt;</td>\n<td>The element size must be between the specified boundaries</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"new-constraints-20\"><a class=\"anchor\" href=\"#new-constraints-20\">#</a> New Constraints - 2.0</h3>\n<table>\n<thead>\n<tr>\n<th>Constraint</th>\n<th>Accepted Types</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Email</td>\n<td>CharSequence</td>\n<td>Checks whether the specified character sequence is a valid email address</td>\n</tr>\n<tr>\n<td>NotEmpty</td>\n<td>CharSequence, Collection, Map and arrays</td>\n<td>Checks whether the annotated element is not null nor empty</td>\n</tr>\n<tr>\n<td>NotBlank</td>\n<td>CharSequence</td>\n<td>Checks that the annotated character sequence is not null and the trimmed length is greater than 0. The difference to @NotEmpty is that this constraint can only be applied on character sequences and that trailing white-spaces are ignored.</td>\n</tr>\n<tr>\n<td>\n<p>Positive<br />\nNegative</p>\n</td>\n<td>\n<p>BigDecimal, BigInteger, byte, short, int, long and the respective wrappers of the primitive types</p>\n</td>\n<td>\n<p>Checks if the element is strictly positive/negative. Zero values are considered invalid.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>PositiveOrZero<br />\nNegativeOrZero</p>\n</td>\n<td>\n<p>BigDecimal, BigInteger, byte, short, int, long and the respective wrappers of the primitive types</p>\n</td>\n<td>\n<p>Checks if the element is positive/negative or zero.</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>PastOrPresent<br />\nFutureOrPresent</p>\n</td>\n<td>\n<p>java.util.Date, java.util.Calendar, java.time.*</p>\n</td>\n<td>\n<p>Checks whether the annotated date is in the present or in the past/future.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"testing\"><a class=\"anchor\" href=\"#testing\">#</a> Testing</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYXZlbi5hcGFjaGUub3JnL2d1aWRlcy9pbnRyb2R1Y3Rpb24vaW50cm9kdWN0aW9uLXRvLXRoZS1saWZlY3ljbGVodG1sI0J1aWxkX0xpZmVjeWNsZV9CYXNpY3M=\">Maven</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuanJlYmVsLmNvbS9ibG9nL3VuaXQtdGVzdGluZy1jbG91ZGFwcGxpY2F0aW9ucy1pbi1qYXZh\">Unit Tests vs Integration Tests</span>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuanJlYmVsLmNvbS9ibG9nL3VuaXQtdGVzdGluZy1pbi1qYXZh\">Unit == Maven Surefire Plugin</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuanJlYmVsLmNvbS9ibG9nL2hvdy10by11c2UtamF2YWludGVncmF0aW9uLXRlc3Rpbmc=\">Integration == Maven Failsafe Plugin</span></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"lab\"><a class=\"anchor\" href=\"#lab\">#</a> Lab</h1>\n<h2 id=\"summary\"><a class=\"anchor\" href=\"#summary\">#</a> Summary</h2>\n<p>The purpose of this assignment is to refresh on the basics of JDBC, learn the basics of Bean Validation, and to practice these techniques using JUnit test cases.</p>\n<h2 id=\"requirements\"><a class=\"anchor\" href=\"#requirements\">#</a> Requirements</h2>\n<h3 id=\"database-setup\"><a class=\"anchor\" href=\"#database-setup\">#</a> Database Setup</h3>\n<p>No custom database for this lab - but you must pick one of the sample databases to work with.  You must grant access to the sample database for your itmd4515 user (see Lab 2 - Setup and Introductory Webapp).</p>\n<p>Some MySQL sample databases were installed for you during Week 1.  Here are some links to other MySQL sample databases:</p>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9pbmRleC1vdGhlci5odG1s\">mysql</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xlcm9jaGEvY2hpbm9vay1kYXRhYmFzZQ==\">chinook</span></li>\n</ol>\n<details><summary>Process</summary><div>\n<p>导入方法：</p>\n<ul>\n<li>方法 1：Workbench<br />\n <code>File</code>  -  <code>Open SQL Script</code> ，选择  <code>world.sql</code>  文件打开，内容全选后，按  <code>Execute</code></li>\n<li>方法 2：终端打开 <code>sakila-db</code>  目录<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql -u root -p <span class=\"token operator\">&lt;</span> sakila-schema.sql</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mysql -u root -p <span class=\"token operator\">&lt;</span> sakila-data.sql</pre></td></tr></table></figure>或者下载  <code>Chinook_Mysql_AutoIncrementPKs.sql</code>  大样本数据<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql -u root -p <span class=\"token operator\">&lt;</span> Chinook_Mysql_AutoIncrementPKs.sql</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">wc</span> -l Chinook_Mysql_AutoIncrementPKs.sql</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">grep</span> -i insert Chinook_Mysql_AutoIncrementPKs.sql</pre></td></tr></table></figure></li>\n</ul>\n<p>回到 Workbench，给 itmd 账号添加数据库权限， <code>Administration</code>  -  <code>Users and Privileges</code> ，记得  <code>information_schema</code>  需要 <code>SELECT</code>  权限。</p>\n</div></details>\n<h3 id=\"project-setup\"><a class=\"anchor\" href=\"#project-setup\">#</a> Project Setup</h3>\n<p>Create a <strong>Java with Maven Java Application</strong> project in NetBeans with the following coordinates and configuration:</p>\n<ol>\n<li>Project Name: <strong>uid-lab3</strong></li>\n<li>Artifact ID: <strong>uid-lab3</strong> (default is fine)</li>\n<li>Group ID: <strong>edu.itmd4515.uid</strong></li>\n<li>Version: <strong>1.0-SNAPSHOT</strong> (default is fine)</li>\n<li>Use a base package for your Java code of <strong>edu.itmd4515.uid</strong></li>\n</ol>\n<p>Accept the Lab 3 assignment to create your GitHub repository and configure your projects for source control as documented in Lab 2 - Setup and Introductory Webapp.</p>\n<p>Note, this is a <strong>Java SE</strong> application.  It is <em><strong>not</strong></em> a web application.</p>\n<blockquote>\n<p>Deviating from the package convention given above will mean that you can not benefit from Sonar and other automated tools, and I will not be able to fix this. Please follow the specification!</p>\n</blockquote>\n<details><summary>Process</summary><div>\n<ol>\n<li>\n<p><code>Projects/Source Packages</code>  里创建一个新 Java class  <code>Driver.java</code></p>\n</li>\n<li>\n<p>Shell 查看某个数据库，选择某个数据库，按某个字段排列</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql -u itmd4515 -p</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>show databases<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>use world<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>show tables<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>desc country<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Projects/Dependencies</code>  -  <code>Add Dependency</code> <br />\nQuery  <code>mysql-connector-java</code> <br />\nor<br />\ngroupId:  <code>mysql</code> ,<br />\nartifactId:  <code>mysql-connector-java</code> ,<br />\nversion:  <code>8.0.23</code> <br />\n <code>Build with Dependencies</code></p>\n</li>\n<li>\n<p>edit  <code>Projects/Project Files/pom.xml</code>  , add  <code>&lt;scope&gt;compile&lt;/scope&gt;</code></p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Driver.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Statement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @author amehime</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Driver</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> LOG <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Driver</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/world?zeroDateTimeBehavior=CONVERT_TO_NULL\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"itmd4515\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"itmd4515\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">String</span> query <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from country where Code = ?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MEX\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span> ps<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data from database: \"</span> <span class=\"token operator\">+</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// prepared statement protects some against SQL Injection</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"drop table country;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">ResultSet</span> rs2 <span class=\"token operator\">=</span> ps<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs2<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                LOG<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data from database: \"</span> <span class=\"token operator\">+</span> rs2<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            rs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            rs2<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            LOG<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span>SEVERE<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div></details>\n<h3 id=\"project-requirements\"><a class=\"anchor\" href=\"#project-requirements\">#</a> Project Requirements</h3>\n<ol>\n<li>\n<p>What database did you select, and which table are you going to represent as a Java POJO?  What fields did you select to map from table to Java class?  <strong>Discuss</strong> in your wiki page.</p>\n</li>\n<li>\n<p>Add the following dependencies to your  <code>pom.xml</code>  using a scope you feel is appropriate:</p>\n<ol>\n<li><code>junit</code>  (latest non-beta version of junit 5)<details><summary>Code</summary><div>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.junit.jupiter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit-jupiter-engine<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.7.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></div></details>\n</li>\n<li><code>mysql-connector-java</code>  (latest non-beta version of 8)<details><summary>Code</summary><div>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.23<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>compile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></div></details>\n</li>\n<li><strong>Important</strong> - build and plugins section.  At this time, we need to add specific versions of the maven test plugins for use with JUnit 5.  Add the following to your  <code>pom.xml</code><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-surefire-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.22.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-failsafe-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.22.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span>   </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>What scope(s) did you select and why?  <strong>Discuss</strong> in your wiki page.</p>\n</li>\n<li>\n<p>Follow the Bean Validation <span class=\"exturl\" data-url=\"aHR0cDovL2hpYmVybmF0ZS5vcmcvdmFsaWRhdG9yL2RvY3VtZW50YXRpb24vZ2V0dGluZy1zdGFydGVkLyNhbGwtdXBkYXRlcw==\">Getting Started</span> guide to add Hibernate Validator and dependencies to your  <code>pom.xml</code>  using a scope you feel is appropriate.</p>\n</li>\n</ol>\n<details><summary>Process</summary><div>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>Project Files/pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.hibernate.validator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>hibernate-validator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>7.0.0.Final<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.glassfish<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jakarta.el<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.hibernate.validator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>hibernate-validator-cdi<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>7.0.0.Final<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></div></details>\n<ol start=\"5\">\n<li>\n<p>In your Lab 3 project, create the following as demonstrated in class:</p>\n<ol>\n<li>\n<p>POJO to represent the structure of a single database table.  You can pick any table in your preferred sample database.  You do not have to traverse relationships.  Keep it simple for this lab.<br />\nPOJO 代表单个数据库表的结构。你可以选择你喜欢的示例数据库中的任何表。不必遍历关系。对于本练习，请使其保持简单。</p>\n<ol>\n<li>Include all <strong>required</strong> (not null) database columns as fields in your POJO.</li>\n<li>Include a minimum of 2 bean validation constraints in your POJO.  These bean validation constraints should <strong>relate</strong> to database constraints (column length, not null, etc) or type of data (email, string, date, etc)</li>\n</ol>\n<details><summary>Process</summary><div>\n<ul>\n<li>在 <code>Projects/Source Packages</code>  新建一个 package，命名为 <code>domain</code> ，新建一个 Java Class，命名为 <code>Customer</code> 。</li>\n<li>修改 NetBeans 配置 - Editor - Formating<br />\nLanguage: Java, Ctegory: Ordering, Insertion Point: Last in Category</li>\n<li>Source - Insert Code - Add Property<br />\nName: id , Type: Integer<br />\nName: firstName, Type: String<br />\nName: lastName<br />\nName: email</li>\n<li>Source - Insert Code - Constructor （三个，一个无参数，一个全参数，一个排除 id 外的其他参数）</li>\n<li>Source - Insert Code - toString</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>···</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>validation<span class=\"token punctuation\">.</span>constraints<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Email</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>validation<span class=\"token punctuation\">.</span>constraints<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NotBlank</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>validation<span class=\"token punctuation\">.</span>constraints<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NotNull</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>validation<span class=\"token punctuation\">.</span>constraints<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Positive</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>···</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@NotNull</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Positive</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@NotBlank</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> firstName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@NotBlank</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> lastName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token annotation punctuation\">@Email</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token annotation punctuation\">@NotBlank</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div></details>\n</li>\n<li>\n<p>Two JUnit test classes.  One should be for testing the validation constraints in your POJO, and the other for testing JDBC CRUD operations.</p>\n<ol>\n<li>\n<p>Make appropriate use of test fixtures, as discussed in class.</p>\n</li>\n<li>\n<p>Make appropriate use of helper methods to extract and parameterize functionality - <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRG9uJTI3dF9yZXBlYXRfeW91cnNlbGY=\">DRY (Don't repeat yourself)</span></p>\n</li>\n<li>\n<p>In your validation test class, include at least 2 test methods proving your bean validation constraints work</p>\n</li>\n<li>\n<p>In your JDBC test class, include a test method for each of the 4 CRUD operations (Create, Read, Update, Delete).</p>\n<blockquote>\n<p>I recommend you consider inserting a row for testing purposes in the @Before test fixture, and removing it in the @After test fixture.  By following that pattern, your test cases will always be testing a consistent database row, and will be completely separate from the &quot;actual&quot; data in the tables themselves.</p>\n<p>I will be running your projects using maven, so make sure not to deviate from database name, username and password conventions outlined in our initial setup.</p>\n</blockquote>\n</li>\n</ol>\n<details><summary>Process</summary><div>\n<ul>\n<li>在 <code>Projects/Test Packages</code>  下新建两个 Java Class  <code>CustomerValidationTest</code>  和 <code>CustomerJDBCTest</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>CustomerValidationTest</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">domian<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>validation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConstraintViolation</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>validation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Validation</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>validation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Validator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>validation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ValidatorFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AfterAll</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AfterEach</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeforeAll</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeforeEach</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Assertions</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomerValidationTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 1. beforeAll</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 2. beforeEach</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 3. test1</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 4. afterEach</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 5. beforeEach</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 6. test2</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 7. afterEach</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 8. afterAll</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Validator</span> validator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@BeforeAll</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">ValidatorFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token class-name\">Validation</span><span class=\"token punctuation\">.</span><span class=\"token function\">buildDefaultValidatorFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        validator <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">getValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterAll</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// if validator were not auto-closeable, we should close it here</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token annotation punctuation\">@BeforeEach</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterEach</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customerInvalidEmail_expectFailure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">Customer</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Customer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"One\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"customercustomer.net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConstraintViolation</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> constraintViolations <span class=\"token operator\">=</span> validator<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span>constraintViolations<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> constraintViolations<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token function\">assertFalse</span><span class=\"token punctuation\">(</span>constraintViolations<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ConstraintViolation</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">></span></span> problem <span class=\"token operator\">:</span> constraintViolations<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>problem<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customerIsCompletelyValid_expectPass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token class-name\">Customer</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Customer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"One\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"customer@customer.net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ConstraintViolation</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> constraintViolations <span class=\"token operator\">=</span> validator<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span>constraintViolations<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> constraintViolations<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span>constraintViolations<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>CustomerJDBCTest</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">domian<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Customer</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AfterAll</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AfterEach</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeforeAll</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeforeEach</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Assertions</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomerJDBCTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Connection</span> connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// helper utility methods - to help us DRY (don't repeat yourself, at least</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// not in your code.  Repeat yourself all you want in your speech</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost:3306/Chinook?zeroDateTimeBehavior=CONVERT_TO_NULL\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> <span class=\"token string\">\"itmd4515\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token string\">\"itmd4515\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createACustomer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Customer</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">String</span> INSERT_SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"insert into Customer \"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token operator\">+</span> <span class=\"token string\">\"(CustomerId, FirstName, LastName, Email) \"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token operator\">+</span> <span class=\"token string\">\"values (?,?,?,?)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>INSERT_SQL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        ps<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getLastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        ps<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// returns either null, or the valid customer found in the database</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Customer</span> <span class=\"token function\">findACustomer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">Customer</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">String</span> FIND_SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"select * from Customer where CustomerId = ?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>FIND_SQL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        ps<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span> ps<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            c<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CustomerId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            c<span class=\"token punctuation\">.</span><span class=\"token function\">setFirstName</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FirstName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            c<span class=\"token punctuation\">.</span><span class=\"token function\">setLastName</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LastName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            c<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readFromDatabaseAfterUpdate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Customer</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token class-name\">String</span> UPDATE_SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"update Customer set \"</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token operator\">+</span> <span class=\"token string\">\"FirstName = ?, \"</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token operator\">+</span> <span class=\"token string\">\"LastName = ?, \"</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token operator\">+</span> <span class=\"token string\">\"Email = ? \"</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token operator\">+</span> <span class=\"token string\">\"where CustomerId = ?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>UPDATE_SQL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getLastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        ps<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        ps<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        ps<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteACustomer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token class-name\">String</span> DELETE_SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"delete from Customer where CustomerId = ?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>DELETE_SQL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        ps<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        ps<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token annotation punctuation\">@BeforeAll</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterAll</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token comment\">// before each test, you can stage any test data you need to work with</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token comment\">// you won't want to rely on the data in the tables, because the next time</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token comment\">// you run your test, it might be different</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token annotation punctuation\">@BeforeEach</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        connection <span class=\"token operator\">=</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token class-name\">Customer</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mayuri\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mizuki\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mayuri@lostyu.me\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token function\">createACustomer</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token comment\">// after each test, you can clean up any test data that you staged earlier</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterEach</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token function\">deleteACustomer</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token comment\">// testing C R U D</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\">// you never want test methods to depend on one another!</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token comment\">// don't create data in the createTest, to test it with the readTest!</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token comment\">// test methods should be atomic!</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createCustomerTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token comment\">// this is test data I am staging within this method</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token class-name\">Customer</span> customerToCreate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token number\">9998</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Method\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mayuri@lostyu.meu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token function\">createACustomer</span><span class=\"token punctuation\">(</span>customerToCreate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token comment\">// now that I've created the customer - I need to find it, and assert</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token comment\">// the create was successful</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token class-name\">Customer</span> foundInDatabase <span class=\"token operator\">=</span> <span class=\"token function\">findACustomer</span><span class=\"token punctuation\">(</span><span class=\"token number\">9998</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token function\">assertNotNull</span><span class=\"token punctuation\">(</span>foundInDatabase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>customerToCreate<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> foundInDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>customerToCreate<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> foundInDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>customerToCreate<span class=\"token punctuation\">.</span><span class=\"token function\">getLastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> foundInDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">getLastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>customerToCreate<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> foundInDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>foundInDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token comment\">// clean up the data I staged within this method</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token function\">deleteACustomer</span><span class=\"token punctuation\">(</span><span class=\"token number\">9998</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readCustomerTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token class-name\">Customer</span> readFromDatabase <span class=\"token operator\">=</span> <span class=\"token function\">findACustomer</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token function\">assertNotNull</span><span class=\"token punctuation\">(</span>readFromDatabase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">,</span> readFromDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateCustomerTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token class-name\">Customer</span> readFromDatabaseBeforeUpdate <span class=\"token operator\">=</span> <span class=\"token function\">findACustomer</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        readFromDatabaseBeforeUpdate<span class=\"token punctuation\">.</span><span class=\"token function\">setLastName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Updated Successfully\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        <span class=\"token function\">readFromDatabaseAfterUpdate</span><span class=\"token punctuation\">(</span>readFromDatabaseBeforeUpdate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token class-name\">Customer</span> updatedInDatabase <span class=\"token operator\">=</span> <span class=\"token function\">findACustomer</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>readFromDatabaseBeforeUpdate<span class=\"token punctuation\">.</span><span class=\"token function\">getLastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>updatedInDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">getLastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteCustomerTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        <span class=\"token comment\">// this is test data I am staging within this method</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token class-name\">Customer</span> customerToDelete <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token number\">9998</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Method\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mayuri@lostyu.me\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token function\">createACustomer</span><span class=\"token punctuation\">(</span>customerToDelete<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token comment\">// now that I've created the customer - I need to delete it, and then</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token comment\">// try to re-find it, in order to assert that I can not - and therefore</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        <span class=\"token comment\">// it has been successfully deleted</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        <span class=\"token function\">deleteACustomer</span><span class=\"token punctuation\">(</span><span class=\"token number\">9998</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token class-name\">Customer</span> tryAndFindDeletedCustomerInDatabase <span class=\"token operator\">=</span> <span class=\"token function\">findACustomer</span><span class=\"token punctuation\">(</span><span class=\"token number\">9998</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token function\">assertNull</span><span class=\"token punctuation\">(</span>tryAndFindDeletedCustomerInDatabase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>Run - Test Project</li>\n<li>Shell</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> NetBeansProjects/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ls</span> -ltr</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span> lab3</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mvn clean <span class=\"token builtin class-name\">test</span></pre></td></tr></table></figure></div></details>\n</li>\n</ol>\n</li>\n<li>\n<p>Document Lab 3 execution in your wiki page by taking a screenshot of your NetBeans Test Results window (the red/yellow/green stoplight view shown in class).  Discuss any other issues or insights you had with Lab 3.</p>\n</li>\n<li>\n<p>Test your Java SE project on the command line using maven.  Document your experience (with code block output) on your wiki page, and discuss how command line Java relates to Maven (hint - think classpath and dependencies).  What would you need to do (step by step) in order to run your project without maven, using only the Java SE provided java and javac binaries?  In what ways does Maven help us?</p>\n</li>\n<li>\n<p>Submit to Blackboard</p>\n<ol>\n<li>Right click your <strong>uid-lab3</strong>project and select  <code>Clean</code></li>\n<li>Go to your NetBeans Projects directory.  Create a zip file of the <strong>uid-lab3</strong> folder named (you guessed it) <strong>uid-lab3.zip</strong>.  Submit that zip file to the Blackboard assignment.</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMD 515. Advanced Software Programming",
                "Java",
                "Database",
                "JDBC"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmm-571/lecture-2/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmm-571/lecture-2/",
            "title": "Lecture 2. Integration Project Management",
            "date_published": "2021-02-01T10:56:45.000Z",
            "content_html": "<h1 id=\"work-breakdown-structure-wbs-工作分解结构\"><a class=\"anchor\" href=\"#work-breakdown-structure-wbs-工作分解结构\">#</a> Work Breakdown Structure (WBS) 工作分解结构</h1>\n<blockquote>\n<p>“A hierarchical decomposition of the total scope of work to be carried out by the project team to accomplish the project objectives and create the required deliverables.” (PMBOK 6<sup>th</sup> Ed. P. 726)<br />\n 项目团队要执行的总工作范围的分层分解，以完成项目目标并创建所需的可交付成果。</p>\n</blockquote>\n<ul>\n<li>Organizes work in hierarchy format<br />\n 以层次结构格式组织工作</li>\n<li>For each level down, tasks have a more limited scope, that is they are more narrowly defined<br />\n 对于每个级别向下，任务的范围更有限，也就是说，它们的定义更狭窄</li>\n<li>Can be either pictorial (like an organizational hierarchy chart) or in an outline like format<br />\n 可以是图片（如组织结构层次结构图表），也可以是大纲（如格式）</li>\n</ul>\n<h2 id=\"why-is-the-wbs-useful\"><a class=\"anchor\" href=\"#why-is-the-wbs-useful\">#</a> Why is the WBS Useful?</h2>\n<ul>\n<li>Documents what needs to get done.<br />\n 记录需要完成的工作。</li>\n<li>Organizes work.<br />\n 组织工作。</li>\n<li>Great tool to show people what you have in mind.<br />\n 伟大的工具，向人们展示你的想法。</li>\n</ul>\n<h2 id=\"what-the-wbs-does-for-you\"><a class=\"anchor\" href=\"#what-the-wbs-does-for-you\">#</a> What the WBS Does For You</h2>\n<ul>\n<li>Budget 预算\n<ul>\n<li>Allocate Labor Expense 分配人工费用</li>\n<li>Allocate Non-Labor Expense 分配非人工费用</li>\n</ul>\n</li>\n<li>Time Line 时间线\n<ul>\n<li>Defining What to do First 定义先做什么</li>\n<li>Determining Work Sequence 确定工作顺序</li>\n</ul>\n</li>\n<li>Responsibility Matrix 责任矩阵\n<ul>\n<li>Assigning Ownership 分配所有权</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"work-package\"><a class=\"anchor\" href=\"#work-package\">#</a> Work Package</h2>\n<blockquote>\n<p>“The work defined at the lowest level of the work breakdown structure for which cost and duration are estimated and managed.” (PMBOK 6th ed. P.726)<br />\n 在工作分解结构的最低级别定义的工作，其成本和工期被估算和管理。</p>\n</blockquote>\n<p>At the lowest level of your WBS you’ll find the work packages.<br />\n 在 WBS 的最低级别，您会用到工作包。</p>\n<p>This represents the components of the project that will be managed as separate tasks.<br />\n 这表示将作为单独任务管理的项目组件。</p>\n<p>They are not ordered when looking left to right on the pictorial WBS.  At the same level of decomposition in the outline format, there is no order.  This activity is left to the project schedule.<br />\n 在图片 WBS 上从左向右看时，它们没有顺序。 在大纲格式的相同分解级别上，没有顺序。 该活动留在项目进度表中。</p>\n<p>Their size is dictated by the duration that the project manager can manage.<br />\n 它们的大小由项目经理可以管理的持续时间决定。</p>\n<h2 id=\"wbs-examples\"><a class=\"anchor\" href=\"#wbs-examples\">#</a> WBS Examples</h2>\n<p>Barn Defined:</p>\n<p>A barn is a structure that farmers use to hose cows, horses etc. in. They also keep their farm equipment in their barns; like tractors etc.</p>\n<h3 id=\"wbs-outline-form-大纲式\"><a class=\"anchor\" href=\"#wbs-outline-form-大纲式\">#</a> WBS; Outline Form 大纲式</h3>\n<pre><code>Barn Construction\n\t1.1.0.    Foundation\n\t\t1.1.1     Excavation*\n\t\t1.1.2     Footers &amp; Slab*\n\t2.1.0.    Structure\n\t\t2.1.1     Frame &amp; Roof*\n\t\t2.1.2     Siding*\n</code></pre>\n<p><code>*</code>  These are work packages</p>\n<h3 id=\"wbs-pictoral-form-画报式\"><a class=\"anchor\" href=\"#wbs-pictoral-form-画报式\">#</a> WBS; Pictoral Form 画报式</h3>\n<p>The pictorial form of the WBS, for a project of anything larger than a very small project, will:<br />\n 对于任何大于很小项目的项目，WBS 的图形形式都将：</p>\n<ul>\n<li>Likely not fit on a sheet of paper, or,<br />\n 可能不适合放在一张纸上，或者</li>\n<li>It will be too small to read on a PC screen<br />\n 太小了，无法在 PC 屏幕上阅读<br />\n But, in terms of a nice way to learn about WBSs, it works quite well.  So, for the remainder of this presentation, the pictorial form will be used.<br />\n 但是，它确实是学习 WBS 的一种好方法。</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2021/02/03/uaDUv4feiTGsqwz.png\" alt=\"\" title=\"Boxes with red fonts are work packages\" /></p>\n<h2 id=\"decompose-class-question-分解类问题\"><a class=\"anchor\" href=\"#decompose-class-question-分解类问题\">#</a> Decompose; Class Question 分解；类问题</h2>\n<p>It means each level down is more subdivided than the previous level.<br />\n 这意味着每个下级都比上一个级别更细分。</p>\n<p>The result of all this decomposing is the list of work packages that you will want to manage to.<br />\n 所有这些分解的结果都是要管理的工作包列表。</p>\n<blockquote>\n<p>Decomposition 分解<br />\n “A technique used for dividing and subdividing the project scope and project deliverables into smaller, more manageable parts” (PMBOK 6th ed p. 704)<br />\n 一种技术，可以将项目范围和项目可交付成果，划分并细分为更小、更易于管理的部分</p>\n</blockquote>\n<h2 id=\"wbs-is-used-in-creating\"><a class=\"anchor\" href=\"#wbs-is-used-in-creating\">#</a> WBS is Used in Creating...</h2>\n<h3 id=\"responsibility-matrix-责任矩阵\"><a class=\"anchor\" href=\"#responsibility-matrix-责任矩阵\">#</a> Responsibility matrix 责任矩阵</h3>\n<p><img data-src=\"https://i.loli.net/2021/02/03/SaA3HfYWcXQdVeM.png\" alt=\"\" title=\"Example Map of \u000bWBS to “Responsibility Matrix”\" /></p>\n<table>\n<thead>\n<tr>\n<th>Who</th>\n<th>Responsibility</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Tom</td>\n<td>Excavation</td>\n</tr>\n<tr>\n<td>Cindy</td>\n<td>Footers &amp; Slab</td>\n</tr>\n<tr>\n<td>Bull</td>\n<td>Frame &amp; Roof</td>\n</tr>\n<tr>\n<td>Arun</td>\n<td>Siding</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"work-package-based-estimating-基于工作包的估算\"><a class=\"anchor\" href=\"#work-package-based-estimating-基于工作包的估算\">#</a> Work Package Based Estimating 基于工作包的估算</h3>\n<p><img data-src=\"https://i.loli.net/2021/02/03/BKtwJhOqLpRxuV8.png\" alt=\"\" title=\"Example of Work Package Based Estimating\" /></p>\n<table>\n<thead>\n<tr>\n<th>Task</th>\n<th>Cost</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Excavation</td>\n<td>$250K</td>\n</tr>\n<tr>\n<td>Footers &amp; Slab</td>\n<td>$750K</td>\n</tr>\n<tr>\n<td>Frame &amp; Roof</td>\n<td>$175K</td>\n</tr>\n<tr>\n<td>Siding</td>\n<td>$50K</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"schedule-matrix-进度矩阵\"><a class=\"anchor\" href=\"#schedule-matrix-进度矩阵\">#</a> Schedule Matrix 进度矩阵</h3>\n<table>\n<thead>\n<tr>\n<th>#</th>\n<th>Tasks (in order)</th>\n<th>Requires</th>\n<th>Who</th>\n<th>Duration in days</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Perform Excavation</td>\n<td></td>\n<td>Cindy</td>\n<td>15</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Set footers and slab</td>\n<td>1</td>\n<td>Tom</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Build Frame &amp; Roof</td>\n<td>2</td>\n<td>Bull</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Siding</td>\n<td>3</td>\n<td>Arun</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"mermaid\"><svg id=\"mermaid-1615277010142\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 784 196\" height=\"196\" style=\"max-width: 784px;\"><g></g><g class=\"grid\" transform=\"translate(75, 146)\" fill=\"none\" font-size=\"10\" font-family=\"sans-serif\" text-anchor=\"middle\"><path class=\"domain\" stroke=\"currentColor\" d=\"M0.5,-111V0.5H634.5V-111\"></path><g class=\"tick\" opacity=\"1\" transform=\"translate(0.5,0)\"><line stroke=\"currentColor\" y2=\"-111\"></line><text fill=\"#000\" y=\"3\" dy=\"1em\" stroke=\"none\" font-size=\"10\" style=\"text-anchor: middle;\">2021-01-01</text></g><g class=\"tick\" opacity=\"1\" transform=\"translate(67.5,0)\"><line stroke=\"currentColor\" y2=\"-111\"></line><text fill=\"#000\" y=\"3\" dy=\"1em\" stroke=\"none\" font-size=\"10\" style=\"text-anchor: middle;\">2021-01-03</text></g><g class=\"tick\" opacity=\"1\" transform=\"translate(133.5,0)\"><line stroke=\"currentColor\" y2=\"-111\"></line><text fill=\"#000\" y=\"3\" dy=\"1em\" stroke=\"none\" font-size=\"10\" style=\"text-anchor: middle;\">2021-01-05</text></g><g class=\"tick\" opacity=\"1\" transform=\"translate(200.5,0)\"><line stroke=\"currentColor\" y2=\"-111\"></line><text fill=\"#000\" y=\"3\" dy=\"1em\" stroke=\"none\" font-size=\"10\" style=\"text-anchor: middle;\">2021-01-07</text></g><g class=\"tick\" opacity=\"1\" transform=\"translate(267.5,0)\"><line stroke=\"currentColor\" y2=\"-111\"></line><text fill=\"#000\" y=\"3\" dy=\"1em\" stroke=\"none\" font-size=\"10\" style=\"text-anchor: middle;\">2021-01-09</text></g><g class=\"tick\" opacity=\"1\" transform=\"translate(334.5,0)\"><line stroke=\"currentColor\" y2=\"-111\"></line><text fill=\"#000\" y=\"3\" dy=\"1em\" stroke=\"none\" font-size=\"10\" style=\"text-anchor: middle;\">2021-01-11</text></g><g class=\"tick\" opacity=\"1\" transform=\"translate(400.5,0)\"><line stroke=\"currentColor\" y2=\"-111\"></line><text fill=\"#000\" y=\"3\" dy=\"1em\" stroke=\"none\" font-size=\"10\" style=\"text-anchor: middle;\">2021-01-13</text></g><g class=\"tick\" opacity=\"1\" transform=\"translate(467.5,0)\"><line stroke=\"currentColor\" y2=\"-111\"></line><text fill=\"#000\" y=\"3\" dy=\"1em\" stroke=\"none\" font-size=\"10\" style=\"text-anchor: middle;\">2021-01-15</text></g><g class=\"tick\" opacity=\"1\" transform=\"translate(534.5,0)\"><line stroke=\"currentColor\" y2=\"-111\"></line><text fill=\"#000\" y=\"3\" dy=\"1em\" stroke=\"none\" font-size=\"10\" style=\"text-anchor: middle;\">2021-01-17</text></g><g class=\"tick\" opacity=\"1\" transform=\"translate(601.5,0)\"><line stroke=\"currentColor\" y2=\"-111\"></line><text fill=\"#000\" y=\"3\" dy=\"1em\" stroke=\"none\" font-size=\"10\" style=\"text-anchor: middle;\">2021-01-19</text></g></g><g><rect x=\"0\" y=\"48\" width=\"746.5\" height=\"24\" class=\"section section0\"></rect><rect x=\"0\" y=\"72\" width=\"746.5\" height=\"24\" class=\"section section1\"></rect><rect x=\"0\" y=\"96\" width=\"746.5\" height=\"24\" class=\"section section2\"></rect><rect x=\"0\" y=\"120\" width=\"746.5\" height=\"24\" class=\"section section3\"></rect></g><g><rect id=\"a1\" rx=\"3\" ry=\"3\" x=\"75\" y=\"50\" width=\"501\" height=\"20\" transform-origin=\"325.5px 60px\" class=\"task task0 \"></rect><rect id=\"a2\" rx=\"3\" ry=\"3\" x=\"576\" y=\"74\" width=\"66\" height=\"20\" transform-origin=\"609px 84px\" class=\"task task1 \"></rect><rect id=\"a3\" rx=\"3\" ry=\"3\" x=\"642\" y=\"98\" width=\"34\" height=\"20\" transform-origin=\"659px 108px\" class=\"task task2 \"></rect><rect id=\"task1\" rx=\"3\" ry=\"3\" x=\"676\" y=\"122\" width=\"33\" height=\"20\" transform-origin=\"692.5px 132px\" class=\"task task3 \"></rect><text id=\"a1-text\" font-size=\"11\" x=\"325.5\" y=\"63.5\" text-height=\"20\" class=\" taskText taskText0  width-27.28125\">Cindy           </text><text id=\"a2-text\" font-size=\"11\" x=\"609\" y=\"87.5\" text-height=\"20\" class=\" taskText taskText1  width-21.421875\">Tom      </text><text id=\"a3-text\" font-size=\"11\" x=\"659\" y=\"111.5\" text-height=\"20\" class=\" taskText taskText2  width-18.734375\">Bull </text><text id=\"task1-text\" font-size=\"11\" x=\"692.5\" y=\"135.5\" text-height=\"20\" class=\" taskText taskText3  width-22.796875\">Arun</text></g><g><text dy=\"0em\" x=\"10\" y=\"62\" class=\"sectionTitle sectionTitle0\"><tspan alignment-baseline=\"central\" x=\"10\">Perform Excavation</tspan></text><text dy=\"0em\" x=\"10\" y=\"86\" class=\"sectionTitle sectionTitle1\"><tspan alignment-baseline=\"central\" x=\"10\">Set footers and slab</tspan></text><text dy=\"0em\" x=\"10\" y=\"110\" class=\"sectionTitle sectionTitle2\"><tspan alignment-baseline=\"central\" x=\"10\">Build Frame &amp; Roof</tspan></text><text dy=\"0em\" x=\"10\" y=\"134\" class=\"sectionTitle sectionTitle3\"><tspan alignment-baseline=\"central\" x=\"10\">Siding</tspan></text></g><g class=\"today\"><line x1=\"2333\" x2=\"2333\" y1=\"25\" y2=\"171\" class=\"today\"></line></g><text x=\"392\" y=\"25\" class=\"titleText\">Gantt Chart</text></svg></pre><h2 id=\"wbs-dictionary\"><a class=\"anchor\" href=\"#wbs-dictionary\">#</a> WBS Dictionary</h2>\n<p>Behind the items in the WBS is something called the WBS dictionary<br />\nWBS 的项目背后是一种叫做 WBS 字典的东西</p>\n<p>It contains detailed information on each item in the WBS (e.g. budget etc.), including work packages.<br />\n 它包含 WBS 中每个项目的详细信息（例如预算等），包括工作包。</p>\n<blockquote>\n<p>“A document that provides detailed deliverable, activity, and scheduling information about each component in the work breakdown structure” (PMBOK P. 726)<br />\n 一个文档，提供了 WBS 工作分解结构中，每个组件的详细可交付性、活动和计划信息。</p>\n</blockquote>\n<h2 id=\"hints\"><a class=\"anchor\" href=\"#hints\">#</a> Hints</h2>\n<h3 id=\"how-to-create-a-wbs\"><a class=\"anchor\" href=\"#how-to-create-a-wbs\">#</a> How to create a WBS</h3>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/FklYonNknRs\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<h3 id=\"work-package-points\"><a class=\"anchor\" href=\"#work-package-points\">#</a> Work Package Points</h3>\n<p>PMs typically don’t set up the cost allocation methodology – get help<br />\nPMs 通常不设置成本分配方法 – 获取帮助</p>\n<p>Could be direct, indirect, capital, expense, etc.<br />\n 可能是直接的、间接的、资本的、费用等。</p>\n<p>There are Sarbanes-Oxley implications on this - take this seriously.<br />\nSarbanes-Oxley 对此有影响 - 认真对待这一点。</p>\n<p>Share billing rates with team members at your own peril<br />\n 与团队成员共享计费费率，风险自担</p>\n<h2 id=\"summary\"><a class=\"anchor\" href=\"#summary\">#</a> Summary</h2>\n<p>The WBS Provides Input to…</p>\n<ul>\n<li>Responsibility matrix 责任矩阵</li>\n<li>Schedule building 进度构建</li>\n<li>Work package based estimating 基于工作包的估算</li>\n<li>Other processes too</li>\n</ul>\n<h1 id=\"design-thinking\"><a class=\"anchor\" href=\"#design-thinking\">#</a> Design Thinking</h1>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/pXtN4y3O35M\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/_r0VX-aU_T8\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<h1 id=\"integration-project-management-综合项目管理\"><a class=\"anchor\" href=\"#integration-project-management-综合项目管理\">#</a> Integration Project Management 综合项目管理</h1>\n<blockquote>\n<p>Integration Project Management is…<br />\n”…the processes and activities to identify, define, combine, unify, and coordinate” various Project Management activities.” (p.69)<br />\n 确定、定义、合并、统一和协调各种项目管理活动的流程和活动</p>\n</blockquote>\n<p><strong>Main ideas…</strong></p>\n<ul>\n<li>Resource allocations<br />\n 资源分配</li>\n<li>Balancing competing needs<br />\n 平衡竞争需求</li>\n<li>Examining any alternatives<br />\n 检查其他选择</li>\n<li>Tailoring<br />\n 定制</li>\n<li>Managing cross area dependencies<br />\n 管理跨区域依赖性</li>\n</ul>\n<p><strong>Key concepts (p.72) 关键概念</strong></p>\n<ul>\n<li>Coordinate deliverables<br />\n 协调可交付成果</li>\n<li>Develop project plan<br />\n 制定项目计划</li>\n<li>Ensuring the right resources are accessible to the team.<br />\n 确保团队可以访问正确的资源。</li>\n<li>Monitor and control to keep project plan viable<br />\n 进行监控以确保项目计划的可行性</li>\n<li>Oversee changes to project plan<br />\n 监督项目计划的变更</li>\n<li>Keep the project on track<br />\n 保持项目进度</li>\n<li>Communicating with stakeholders (especially actual project vs. expected)<br />\n 与利益相关者沟通（尤其是实际项目与预期项目）</li>\n</ul>\n<p><strong>Emergent Changes (p.73) 紧急变更</strong></p>\n<ul>\n<li>Automated tools (MS Project, Jira, etc.)<br />\n 自动化工具（MS Project，Jira 等）</li>\n<li>Expanding roles of the PM<br />\nPM 的扩展作用</li>\n<li>Agile + PM = Hybrid<br />\n 敏捷 + PM = 混合</li>\n</ul>\n<h2 id=\"develop-project-charter-制定项目章程\"><a class=\"anchor\" href=\"#develop-project-charter-制定项目章程\">#</a> Develop Project Charter 制定项目章程</h2>\n<blockquote>\n<p>“…the process of developing a document that formally authorizes the existence of a project and provides the project manager with the authority to apply organization resources to project activities.” (p. 75)<br />\n“… 制定文档的过程，该文档正式授权项目的存在，并为项目经理提供将组织资源应用于项目活动的权限。”<br />\nUsually internally initiated, and written by the PM.<br />\n 通常由内部发起，由 PM 编写</p>\n</blockquote>\n<h3 id=\"statement-of-work-工作陈述\"><a class=\"anchor\" href=\"#statement-of-work-工作陈述\">#</a> Statement Of Work 工作陈述</h3>\n<p>A contract for going outside the company or organization.<br />\n 公司或组织之外的合同。</p>\n<h3 id=\"pm-charter-pm许可\"><a class=\"anchor\" href=\"#pm-charter-pm许可\">#</a> PM Charter PM 许可</h3>\n<p>The PM Charter establishes the relationship between the performing and requesting organization. (p. 77)<br />\n PM 许可，建立执行和请求组织之间的关系。</p>\n<h3 id=\"business-case-main-points-p77-商业案例要点\"><a class=\"anchor\" href=\"#business-case-main-points-p77-商业案例要点\">#</a> Business Case Main Points (p.77) 商业案例要点</h3>\n<ul>\n<li>Idea<br />\n 理念</li>\n<li>Cost justification (NPV)<br />\n 成本合理</li>\n<li>Due date<br />\n 截止日期</li>\n</ul>\n<h3 id=\"business-case-considerations-p78-商业案例考虑\"><a class=\"anchor\" href=\"#business-case-considerations-p78-商业案例考虑\">#</a> Business Case Considerations (p.78) 商业案例考虑</h3>\n<ul>\n<li>Market demand<br />\n 市场需求</li>\n<li>Organizational need<br />\n 组织需求</li>\n<li>Customer request<br />\n 顾客要求</li>\n<li>Technology advancements<br />\n 技术进步</li>\n<li>Legal requirements<br />\n 法律要求</li>\n<li>Ecological/social impacts<br />\n 生态 / 社会影响</li>\n</ul>\n<h3 id=\"agreements-p78-协议\"><a class=\"anchor\" href=\"#agreements-p78-协议\">#</a> Agreements (p.78) 协议</h3>\n<ul>\n<li>\n<p>Service level agreement(SLA): Internal document.(If you can’t get one, just expect people not to live up to expectations)<br />\n 服务水平协议（SLA）：内部文件。<br />\n（如果您无法获得该文件，只能指望人们不能达到期望）</p>\n</li>\n<li>\n<p>Memorandums of understanding<br />\n 谅解备忘录</p>\n</li>\n<li>\n<p>Letters of agreements<br />\n 协议书</p>\n</li>\n<li>\n<p>Verbal promises<br />\n 口头承诺</p>\n<ul>\n<li>Trust<br />\n 信任</li>\n<li>Miss-remembering<br />\n 遗忘</li>\n<li>Altering terms during execution<br />\n 执行期间更改条款</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"expert-judgement-p79-专家判断\"><a class=\"anchor\" href=\"#expert-judgement-p79-专家判断\">#</a> Expert Judgement (p.79) 专家判断</h3>\n<p>Vision implementation<br />\n 愿景实施</p>\n<p>Risk identification<br />\n 风险识别</p>\n<p>Technical knowledge<br />\n 技术知识</p>\n<p>Organizational strategy/alignment<br />\n 组织策略 / 调整</p>\n<h3 id=\"data-gathering-数据收集\"><a class=\"anchor\" href=\"#data-gathering-数据收集\">#</a> Data Gathering 数据收集</h3>\n<p>Brain Storming 头脑风暴<br />\n <div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/9K8W4ooygUU\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div><br />\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/YXZamW4-Ysk\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<p>Focus groups 专门小组<br />\n <div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/3TwgVQIZPsw\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<p>Interviews 采访<br />\n <div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/4eOynrI2eTM\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<p>Design Thinking 设计思维<br />\n <div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/pXtN4y3O35M\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<h3 id=\"interpersonal-team-skills-人际交往能力\"><a class=\"anchor\" href=\"#interpersonal-team-skills-人际交往能力\">#</a> Interpersonal Team Skills 人际交往能力</h3>\n<p>Meeting management<br />\n 会议管理</p>\n<ul>\n<li>PAL(Purpose, Agenda, Length)<br />\n 目的，议程，长度</li>\n<li>Start on time<br />\n 准时开始</li>\n<li>Minutes<br />\n 分钟</li>\n<li>Action Items/Follow Up<br />\n 动作项目 / 跟进</li>\n</ul>\n<h3 id=\"develop-project-charter-outputs-开发项目许可输出\"><a class=\"anchor\" href=\"#develop-project-charter-outputs-开发项目许可输出\">#</a> Develop Project Charter Outputs 开发项目许可输出</h3>\n<p>(p.81)</p>\n<ul>\n<li>Purpose of the project or effort<br />\n 项目目的或努力</li>\n<li>SMART goals/KPIs<br />\nSMART 目标 / KPIs</li>\n<li>High level requirements<br />\n 高水平要求\n<ul>\n<li>What is included<br />\n 包含什么</li>\n<li>What is not included<br />\n 不包含什么</li>\n</ul>\n</li>\n<li>Key deliverables<br />\n 主要成果</li>\n<li>Known risks<br />\n 已知风险</li>\n<li>Due dates<br />\n 截止日期</li>\n<li>Key customer identification (stakeholders)<br />\n 关键客户标识（利益相关者）</li>\n<li>Definition of success<br />\n 成功的定义</li>\n<li>ID of Project Manager and who is “sponsor”<br />\n 项目经理的 ID，谁是 “发起人”</li>\n<li>Assumptions<br />\n 假设条件</li>\n<li>Signature of sponsor<br />\n 保荐人签名</li>\n<li>Cost/Benefit (taken from business case)<br />\n 成本 / 收益（摘自业务案例）</li>\n</ul>\n<h2 id=\"develop-project-management-plan-制定项目管理计划\"><a class=\"anchor\" href=\"#develop-project-management-plan-制定项目管理计划\">#</a> Develop Project Management Plan 制定项目管理计划</h2>\n<p>(p.82)</p>\n<p>Friendly Reminder:<br />\n 友情提醒：<br />\nThe Project Plan identifies how the project is to be: (P.83)<br />\n 项目计划确定了项目的目标：</p>\n<ul>\n<li>Executed 已执行</li>\n<li>Monitored and controlled 监视与控制</li>\n<li>Closed 关闭</li>\n</ul>\n<h3 id=\"project-management-plan-contains-项目管理计划包括\"><a class=\"anchor\" href=\"#project-management-plan-contains-项目管理计划包括\">#</a> Project management plan contains… 项目管理计划包括</h3>\n<ul>\n<li>Project charter (p. 83)<br />\n 项目许可</li>\n<li>Environmental factors (p.84)<br />\n 环境因素（第 84 页）</li>\n<li>Pertinent information about the organization (culture etc.) (p. 84)<br />\n 有关组织的相关信息（文化等）</li>\n<li>Governance (p.84)<br />\n 治理方式</li>\n<li>Available resources (p. 84)<br />\n 可用资源</li>\n</ul>\n<h3 id=\"operational-process-assets-业务流程资产\"><a class=\"anchor\" href=\"#operational-process-assets-业务流程资产\">#</a> Operational Process Assets 业务流程资产</h3>\n<p>(p.84)</p>\n<ul>\n<li>Change control procedure<br />\n 变更控制程序</li>\n<li>Monitor/control processes<br />\n 监控程序</li>\n<li>Informational repository (lessons learned  <code>Without an AI front end, these tend to be useless</code> )<br />\n 信息库（经验教训  <code>没有AI前端，这些往往毫无用处</code> ）</li>\n<li>Templates<br />\n 范本</li>\n</ul>\n<h3 id=\"gather-requirements-需求收集\"><a class=\"anchor\" href=\"#gather-requirements-需求收集\">#</a> Gather Requirements 需求收集</h3>\n<ul>\n<li>Brainstorm<br />\n 头脑风暴</li>\n<li>Checklists<br />\n 清单</li>\n<li>Focus groups<br />\n 专门小组</li>\n<li>interviews<br />\n 面试</li>\n</ul>\n<p>The checklist manifesto:</p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/18ns58FyPmY\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<p>项目需求收集方法：</p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/oOgrRUcLyew\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<blockquote>\n<ol>\n<li>Understand the need/establish metrics and goals<br />\n 了解需求 / 建立指标和目标</li>\n<li>Understand the constraints<br />\n 了解约束</li>\n<li>What do I need to know?<br />\n 我需要知道些什么？</li>\n<li>Who can provide the above information?<br />\n 谁可以提供上述信息？</li>\n<li>What techniques will I use to collect the information?<br />\n 我将使用什么技术来收集信息？</li>\n<li>When will the information be collected?<br />\n 什么时候收集信息？</li>\n<li>What is needed to collect the information?<br />\n 收集信息需要什么</li>\n</ol>\n</blockquote>\n<h1 id=\"questions\"><a class=\"anchor\" href=\"#questions\">#</a> Questions</h1>\n<h2 id=\"turn-a-group-of-diverse-strangers-into-a-team\"><a class=\"anchor\" href=\"#turn-a-group-of-diverse-strangers-into-a-team\">#</a> Turn a group of diverse strangers into a team</h2>\n<p>将一群不同的陌生人变成一个团队</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVkLmNvbS90YWxrcy9hbXlfZWRtb25kc29uX2hvd190b190dXJuX2FfZ3JvdXBfb2Zfc3RyYW5nZXJzX2ludG9fYV90ZWFtP3V0bV9zb3VyY2U9bmV3c2xldHRlcl9kYWlseSZhbXA7dXRtX2NhbXBhaWduPWRhaWx5JmFtcDt1dG1fbWVkaXVtPWVtYWlsJmFtcDt1dG1fY29udGVudD1pbWFnZV9fMjAxOC0wNS0yNA==\">Amy Edmondson: How to turn a group of strangers into a team | TED Talk</span></p>\n<h3 id=\"bio\"><a class=\"anchor\" href=\"#bio\">#</a> BIO:</h3>\n<p>(WIKIPEDIA) Amy C. Edmondson is a Professor of Leadership and Management at the Harvard Business School, who studies human interactions that lead to the creation of successful enterprises that contribute to the betterment of society. She has been recognized by the biannual Thinkers50 global ranking of management thinkers in 2011, 2013, 2015 and 2017. She studies teaming, psychological safety, and leadership.  Her articles have been published numerous academic and management outlets, including Harvard Business Review, Administrative Science Quarterly, Academy of Management Journal and California Management Review.</p>\n<p>艾米・C・埃德蒙森（Amy C. Edmondson）是哈佛商学院的领导力和管理学教授，她研究人与人之间的互动，这些互动促使人们创建成功的企业，从而为改善社会做出贡献。在 2011、2013、2015 和 2017 年，她被管理思想家每半年两次的《Thinkers50》全球排名所认可。她研究团队合作，心理安全和领导力。她的文章已在许多学术和管理领域发表，包括《哈佛商业评论》，《行政科学季刊》，《管理学院学报》和《加利福尼亚管理评论》</p>\n<h3 id=\"background-for-this-ted-talk\"><a class=\"anchor\" href=\"#background-for-this-ted-talk\">#</a> Background for this TED Talk:</h3>\n<p>Teaming is “coordinating and collaborating with people across boundaries of all kinds -- expertise, distance, time zone … to get work done.”<br />\n 团队合作是 “与跨越各种边界的人员进行协调和协作 - 专业知识，距离，时区…… 以完成工作。”</p>\n<p>The Issue: “With 24/7 global fast-paced operations, crazy shifting schedules and ever-narrower expertise, more and more of us have to work with different people (specialties, cultures, languages, etc.) all the time to get our work done. We (no longer) have the luxury of stable teams.”<br />\n 问题是：“随着全球 24/7 全天候快节奏的运营，疯狂的日程安排和越来越狭窄的专业知识，我们越来越多的人不得不一直与不同的人（专业，文化，语言等）合作，以获取我们的完成工作。我们（不再）拥有稳定的团队。”</p>\n<p>Background for question number 6:<br />\n 问题 6 的背景：</p>\n<p>When problem solving, a huge barrier to success is something called “paralysis by analysis.”  The translation for these few words is that given a problem or an issue, there are times when a human, or a team of humans, will spend a vast amount of time examining the problem, and never accomplishing anything (except for further analysis).  A great value of PDCA removes the expectation of being 100% right on the first attempt.  This means the team has the chance of putting out at least a partial solution for a problem fast, the ability to learn from a partial solution, and the upfront expectation with stakeholders that the team’s effort to solve a particular problem will be a learning event (rather than a perfect fix on the first attempt).<br />\n 解决问题时，成功的巨大障碍是所谓的 “分析瘫痪”。这几个词的翻译是，给定一个问题或一个问题，有时一个人或一组人将花费大量时间检查问题，而从不完成任何事情（除非进行进一步分析）。 PDCA 的巨大价值消除了初次尝试时 100％正确的期望。这意味着团队有机会快速提出问题的至少部分解决方案，有能力从部分解决方案中学习，以及与利益相关者的共同期望，即团队为解决特定问题所做的努力将是一次学习活动（而不是第一次尝试的完美解决方案）。</p>\n<h3 id=\"questions-for-based-on-the-video\"><a class=\"anchor\" href=\"#questions-for-based-on-the-video\">#</a> Questions for based on the video:</h3>\n<ol>\n<li>\n<p>How are the teams she described similar to IT Project Teams in industry today?<br />\n 她描述的团队与当今行业的 IT 项目团队有何相似之处？</p>\n</li>\n<li>\n<p>What are the key learnings from this video that you can use in strengthening a heterogeneous (highly diverse) project team?<br />\n 您可以从此视频中学到哪些主要知识，以帮助他们加强异构（高度多样化）的项目团队？</p>\n</li>\n<li>\n<p>At an individual level, do you have any experiences in being a member, or leader, of a heterogeneous team? If the team was successful, what contributed to this?<br />\n 在个人层面上，您是否有担任异类团队成员或领导的经验？如果团队成功了，这有什么贡献？</p>\n</li>\n<li>\n<p>If a team leader says I don’t have the answer, how do they maintain respect; or what else should they say?<br />\n 如果团队负责人说我没有答案，那么他们如何保持尊重？或者他们还应该说些什么？</p>\n</li>\n<li>\n<p>For one of these diverse teams, that is expected to make significant contributions, what environment do leaders need to establish for their team members?<br />\n 对于预计将做出重大贡献的这些多元化团队之一，领导者需要为其团队成员建立什么样的环境？</p>\n</li>\n<li>\n<p>While I was watching this video, I thought of a few Scrum ideas; fail fast and iterative development.  Also, there is a topic in process improvement called Plan, Do, Check, Act/Adjust (for an excellent discussion on PDCA, I highly recommend you go to: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudmlzaW9udGVtZW5vcy5jb20vYmxvZy9wbGFuLWRvLWNoZWNrLWFkanVzdC9hY3QtcGRjYS1jeWNsZS1pbi1sZWFuLWFnaWxl\">Plan - Do - Check - Adjust/Act (PDCA) Cycle in Lean-Agile</span>. Also a key point of PDCA is after you finish the “A” part you go right back to “P”).  Do you see the same similarities between what the successful rescuers did and these concepts as I do?<br />\n 在观看此视频时，我想到了一些混乱的想法；快速迭代失败。此外，过程改进中还有一个主题，称为计划，执行，检查，操作 / 调整。另外，PDCA 的关键是完成 “A” 部分后，您将立即回到 “P”。您是否像我一样看到成功的援救者所做的与这些概念相同的相似之处？</p>\n<p><img data-src=\"https://i.loli.net/2021/02/22/3XmKjJFDesZQAUV.png\" alt=\"\" /></p>\n</li>\n</ol>\n<h1 id=\"quiz\"><a class=\"anchor\" href=\"#quiz\">#</a> Quiz</h1>\n<ol>\n<li class=\"quiz true\">\n<p>Integration management is: the processes and activities to identify, define, combine, unify, and coordinate” various Project Management activities.”</p>\n<blockquote>\n<p>集成管理是识别，定义，组合，统一和协调 “各种项目管理活动” 的过程和活动。</p>\n</blockquote>\n</li>\n<li class=\"quiz false\">\n<p>Develop risk management is: the process of developing a document that formally authorizes the existence of a project and provides the project manager with the authority to apply organization resources to project activities.”</p>\n<blockquote>\n<p>The definition is for Develop project charter<br />\n 制定项目章程是制定文档的过程，该文档正式授权项目的存在并为项目经理提供将组织资源应用于项目活动的权限。”</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>If you are a small company, with only 1 project to consider, and the NPV of that project is +10,000.</p>\n<ul class=\"options\">\n<li class=\"correct\">do the project</li>\n<li>don’t do the project</li>\n</ul>\n<blockquote>\n<p>如果您是一家小型公司，只考虑一个项目，那么该项目的 NPV 为 + 10,000。</p>\n</blockquote>\n</li>\n<li class=\"quiz true\">\n<p>Gathering data for requirements can include:</p>\n<ul>\n<li>Brain Storming 头脑风暴</li>\n<li>Focus groups 专门小组</li>\n<li>Interviews 面谈</li>\n<li>Design Thinking 设计思维</li>\n</ul>\n<blockquote>\n<p>收集需求数据可以包括</p>\n</blockquote>\n</li>\n<li class=\"quiz true\">\n<p>Brainstorming is the idea that when many people meet, and share ideas, that better ideas, and maybe unique ideas, can be generated.</p>\n<blockquote>\n<p>头脑风暴是一种想法，当许多人见面并分享想法时，就会产生更好的想法，甚至可能是独特的想法。</p>\n</blockquote>\n</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMM 571. Project Management",
                "项目管理"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmm-571/lecture-1/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmm-571/lecture-1/",
            "title": "Lecture 1. Understanding Project Management Basics",
            "date_published": "2021-01-26T07:56:45.000Z",
            "content_html": "<h1 id=\"project-defined-项目定义\"><a class=\"anchor\" href=\"#project-defined-项目定义\">#</a> Project Defined 项目定义</h1>\n<p>PMI’s Definition of Project \u000b(PMBOK 6<sup>th</sup> ed., p.715)</p>\n<p>“A temporary endeavor undertaken to create a unique product, service or result.”<br />\n 为创造独特的产品、服务或结果，而付出的暂时努力。</p>\n<h1 id=\"why-do-we-do-projects-为什么要做项目\"><a class=\"anchor\" href=\"#why-do-we-do-projects-为什么要做项目\">#</a> Why do we do projects 为什么要做项目</h1>\n<h2 id=\"vision-mission-project-defined\"><a class=\"anchor\" href=\"#vision-mission-project-defined\">#</a> Vision, Mission &amp; Project Defined</h2>\n<dl>\n<dt>The Vision 愿景 = why</dt>\n<dd>The over-arching idea that the leader promotes,  which when correctly conceived and stated, will drive people to invest themselves in making the vision come to fruition.<br />\n 领导者所倡导的总体思想，在正确构想和陈述后，将促使人们为实现愿景而投入自己的力量。</dd>\n<dt>The Mission 使命 = what</dt>\n<dd>An expression of the vision that drives to a specific plan of action.<br />\n 愿景的表达驱动着特定的行动计划。</dd>\n<dt>The Project 项目 = how</dt>\n<dd>Implements a part of the mission.<br />\n 执行任务的一部分</dd>\n</dl>\n<p>Example:</p>\n<ul>\n<li><strong>The Vision</strong> = The leader of the organization wants humans to have access to good quality food, fast, all around the globe.<br />\n 愿景 = 该组织的领导者希望人类能够在全球范围内快速获取优质食品。</li>\n<li><strong>The Mission</strong> = The organization will build restaurants, in accordance with the vision<br />\n 使命 = 组织将根据愿景建立餐厅。</li>\n<li><strong>The Project</strong> = Build a restaurant, in support of the vision, at the corner of 31<sup>st</sup> and State Street in Chicago.<br />\n 项目 = 在芝加哥 31 号街和州街的拐角处建立一家餐厅，以支持愿景。</li>\n</ul>\n<h3 id=\"example-visions\"><a class=\"anchor\" href=\"#example-visions\">#</a> Example Visions</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9maXRzbWFsbGJ1c2luZXNzLmNvbS92aXNpb24tc3RhdGVtZW50LWV4YW1wbGVzLw==\">17 Vision Statement Examples To Spark Your Imagination</span></p>\n<p>“To become the world’s most loved, most flown, and most profitable airline.” – Southwest Air<br />\n“成为世界上最受欢迎，最飞行，最赚钱的航空公司。” –西南航空</p>\n<p>“Our vision is to create a better every-day life for many people.” – IKEA<br />\n“我们的愿景是为许多人创造更好的日常生活。” –宜家</p>\n<p>“To be the best quick service restaurant experience. Being the best means providing outstanding quality, service, cleanliness, and value, so that we make every customer in every restaurant smile.” – McDonald’s<br />\n“成为最佳的快速服务餐厅体验。做到最好意味着提供卓越的质量，服务，清洁度和价值，以便我们让每家餐厅的每个顾客都微笑。” –麦当劳</p>\n<h3 id=\"what-makes-an-effective-vision-statement-什么是有效的愿景声明\"><a class=\"anchor\" href=\"#what-makes-an-effective-vision-statement-什么是有效的愿景声明\">#</a> What Makes an Effective Vision Statement? 什么是有效的愿景声明？</h3>\n<p>There are specific characteristics that effective vision statements have in common. Look for these traits when updating your current vision statement or crafting a new one.<br />\n 有效的愿景陈述具有一些共同的特征。在更新当前的愿景声明或制定新的愿景声明时，请寻找这些特征。</p>\n<ul>\n<li><strong>Future-focused.</strong> Create a future-focused vision statement by providing the “big picture” and clearly describing what your organization will be like in several years.<br />\n 面向未来。通过提供 “全局图” 并清楚地描述您的组织在几年后的状况，创建面向未来的愿景声明。</li>\n<li><strong>Directional.</strong> Vision statements that provide direction can serve as a guide to organizational plans and strategies.<br />\n 定向的。提供方向的愿景声明可以作为组织计划和策略的指南。</li>\n<li><strong>Specific.</strong> An effective vision statement should be clear and focused enough to shape decision-making.<br />\n 具体。有效的愿景声明应清晰明确且重点突出，以制定决策。</li>\n<li><strong>Relevant and purpose-driven.</strong> By reflecting your company’s response to the challenges of the day, a purpose-driven vision statement can motivate your team.<br />\n 相关性和目标驱动力。通过反映贵公司对当今挑战的反应，以目标为导向的愿景声明可以激励您的团队。</li>\n<li><strong>Values-based.</strong> Use your vision statement to describe the specific values that are required to support the organization.<br />\n 基于价值。使用您的愿景声明来描述支持组织所需的特定价值。</li>\n<li><strong>Challenging.</strong> A vision statement can challenge your employees and customers by inspiring them to do great things and achieve a higher level of standards.<br />\n 具有挑战性的。愿景声明可以激发员工做大事并达到更高的标准，从而挑战您的员工和客户。</li>\n<li><strong>Unique and memorable.</strong> Your company’s vision statement will make more of an impact if it highlights what makes your organization different and why it matters.<br />\n 独特而难忘。如果公司的愿景声明着重说明使您的组织与众不同的原因及其重要性，那么它将产生更大的影响。</li>\n<li><strong>Inspiring.</strong> Vision statements that inspire employees to commit to a cause are more effective than those that do not.<br />\n 鼓舞人心。鼓舞员工致力于事业的愿景声明比没有愿景的声明更为有效。</li>\n</ul>\n<h2 id=\"core-competency-the-key-to-organizational-success-核心竞争力组织成功的关键\"><a class=\"anchor\" href=\"#core-competency-the-key-to-organizational-success-核心竞争力组织成功的关键\">#</a> Core Competency: The key to organizational success 核心竞争力：组织成功的关键</h2>\n<dl>\n<dt>A Core Competency 核心竞争力</dt>\n<dd>Something the organization does amazingly well<br />\n 该组织在某些事情上表现出色<br />\n Very hard for others to reproduce<br />\n 他人很难复制<br />\n Deliverables are valuable to customers<br />\n 交付的产品对客户而言很有价值</dd>\n</dl>\n<p>Once you have a vision, a core competency must be cultivated to maintain a competitive advantage.<br />\n 一旦有了愿景，就必须培养核心能力以保持竞争优势。</p>\n<p>Projects are how you enact, and continually improve, the components of your core competency.<br />\n 项目是您制定和不断提高核心能力组成部分的方式。</p>\n<h2 id=\"other-specific-reasons-to-have-projects-拥有项目的其他具体原因\"><a class=\"anchor\" href=\"#other-specific-reasons-to-have-projects-拥有项目的其他具体原因\">#</a> Other Specific Reasons to Have Projects 拥有项目的其他具体原因</h2>\n<ul>\n<li>Grow/strengthen competitive advantage<br />\n 扩大 / 加强竞争优势</li>\n<li>Legal mandate<br />\n 扩大 / 加强竞争优势</li>\n<li>Leverage new technology<br />\n 利用新技术</li>\n<li>Make money<br />\n 挣钱</li>\n<li>Improve existing process<br />\n 改善现有流程</li>\n<li>Public good<br />\n 公益事业</li>\n<li>Competitive response<br />\n 竞争性反应</li>\n<li>Money is in the budget<br />\n 钱在预算中</li>\n<li><strong>Marketing Life Cycle</strong><br />\n 营销生命周期</li>\n</ul>\n<blockquote>\n<p>Projects must support the organization’s vision and mission, or they will fail.<br />\n 项目必须支持组织的愿景和使命，否则将失败。</p>\n</blockquote>\n<h2 id=\"the-stages-of-the-product-life-cycle-产品生命周期\"><a class=\"anchor\" href=\"#the-stages-of-the-product-life-cycle-产品生命周期\">#</a> the Stages of the Product Life Cycle 产品生命周期</h2>\n<ul>\n<li>Introduction 介绍</li>\n<li>Growth 成长</li>\n<li>Maturity 到期</li>\n<li>Decline 下降</li>\n</ul>\n<blockquote>\n<p>Q: What the Product Life Cycle has to do with Project Management?<br />\n 产品生命周期与项目管理有什么关系？<br />\nA: Project Managers are needed at each step!<br />\n 每个步骤都需要项目经理！</p>\n</blockquote>\n<h3 id=\"example-product-life-cycle-incandescent-light-bulbs\"><a class=\"anchor\" href=\"#example-product-life-cycle-incandescent-light-bulbs\">#</a> Example Product Life Cycle: Incandescent Light Bulbs</h3>\n<p>产品生命周期示例：白炽灯泡</p>\n<dl>\n<dt>Introduction</dt>\n<dd>People willing to pay a lot, only wealthy people can get it (These wealthy people are called the innovators or early adopters.)<br />\n 愿意付出很多的人，只有有钱的人才能得到（这些有钱的人被称为创新者或早期采用者。）</dd>\n<dt>Growth</dt>\n<dd>Mass production starts, price comes down, it is relatively easy to buy and more and more people buy it.<br />\n 开始批量生产，价格下降，它相对容易购买，越来越多的人购买。</dd>\n<dt>Maturity</dt>\n<dd>Only few don’t have it; marketing starts adding features to rebuild interest in product again (dimmable, soft-white, different shapes, etc.)<br />\n 只有很少的人没有它。营销开始添加功能以再次建立对产品的兴趣（可调光，柔白，不同形状等）</dd>\n<dt>Decline</dt>\n<dd>A new innovation comes along, making this product inferior (Spiral florescent lights and LEDs came along)<br />\n 随之而来的是一项新的创新，使该产品的质量下降（同时出现了螺旋荧光灯和 LED）</dd>\n</dl>\n<p><img data-src=\"https://i.loli.net/2021/01/28/orFybwgA4psSO6k.png\" alt=\"\" title=\"KMJ, alpha masking by Edokter - de.wikipedia, original upload 26. June, 2004 byTransparentised version of Image:Gluehlampe 01 KMJ.jpg\" /></p>\n<h1 id=\"where-a-project-starts-项目从何处开始\"><a class=\"anchor\" href=\"#where-a-project-starts-项目从何处开始\">#</a> Where a project starts 项目从何处开始</h1>\n<h2 id=\"project-business-case-项目业务案例\"><a class=\"anchor\" href=\"#project-business-case-项目业务案例\">#</a> Project Business Case 项目业务案例</h2>\n<p>(PMBOK 6<sup>th</sup> ed., p.29)</p>\n<p>“A documented economic feasibility study used to establish the validity of the benefits of a” specific effort “that is used as a basis for authorization of further project management activities.”<br />\n“有记录的经济可行性研究，用于确定 “特定努力” 所产生的收益的有效性，以此作为进一步项目管理活动授权的基础。”</p>\n<h2 id=\"some-components-一些组件\"><a class=\"anchor\" href=\"#some-components-一些组件\">#</a> Some Components 一些组件</h2>\n<p>(PMBOK 6<sup>th</sup> ed., p.31-32)</p>\n<h3 id=\"business-need-业务需求分析\"><a class=\"anchor\" href=\"#business-need-业务需求分析\">#</a> Business Need 业务需求分析</h3>\n<ul>\n<li>Why is this project desired?<br />\n 为什么需要这个项目？</li>\n<li>How does it support the organizational vision/Mission?<br />\n 它如何支持组织的愿景 / 使命？</li>\n<li>Description of prosed project.<br />\n 进行中的项目的描述。</li>\n</ul>\n<h3 id=\"analysis-of-the-situation-情况分析\"><a class=\"anchor\" href=\"#analysis-of-the-situation-情况分析\">#</a> Analysis of the Situation 情况分析</h3>\n<ul>\n<li>Critical success factors<br />\n 成功的关键因素</li>\n<li>Known risks<br />\n 已知风险</li>\n<li>Identification of examined options, and option selection criteria used<br />\n 确定已检查的选项以及使用的选项选择标准</li>\n<li>NPV (if appropriate, assess financial viability)<br />\n 净现值（如果适用，评估财务可行性）</li>\n</ul>\n<h3 id=\"recommendation-建议\"><a class=\"anchor\" href=\"#recommendation-建议\">#</a> Recommendation 建议</h3>\n<ul>\n<li>Proceed or not &amp; why<br />\n 是否继续以及为什么</li>\n<li>expected due date<br />\n 预计到期日</li>\n</ul>\n<h3 id=\"evaluation-评价\"><a class=\"anchor\" href=\"#evaluation-评价\">#</a> Evaluation 评价</h3>\n<ul>\n<li>Identification of factors that will be used to determine if the deliverable of the project is a success.<br />\n 确定将用于确定项目可交付成果是否成功的因素</li>\n<li>How will success measures be tracked, and who will they be reported to<br />\n 如何跟踪成功的措施，以及向谁报告</li>\n</ul>\n<h2 id=\"a-statement-of-work-sow-andor-project-charter\"><a class=\"anchor\" href=\"#a-statement-of-work-sow-andor-project-charter\">#</a> A Statement of Work (SOW) and/or Project Charter</h2>\n<p>工作说明书（SOW）和 / 或 项目章程</p>\n<p>These documents formally launch a project…<br />\n 这些文件正式启动了一个项目</p>\n<p>PMI Definitions: 定义</p>\n<dl>\n<dt>Statement of Work (SOW) 工作说明书</dt>\n<dd>A narrative description of products, services, or results to be delivered by the project. (PMBOK 6<sup>th</sup> ed., p.724)<br />\n 对项目要交付的产品，服务或结果的叙述性描述。</dd>\n<dt>Project Charter 项目章程</dt>\n<dd>A document issued by the project initiator or sponsor that formally authorizes the existence of a project and provides the project manager with the authority to apply organizational resources to project activities. (PMBOK 6<sup>th</sup> ed., p.715)<br />\n 由项目发起者或赞助者发布的文件，正式授权项目的存在并为项目经理提供将组织资源应用于项目活动的权限。</dd>\n</dl>\n<h2 id=\"4-key-considerations-四个关键注意事项\"><a class=\"anchor\" href=\"#4-key-considerations-四个关键注意事项\">#</a> 4 Key Considerations 四个关键注意事项</h2>\n<p><img data-src=\"https://i.loli.net/2021/02/01/AUblVRYZKqOwMtv.png\" alt=\"\" title=\"The Iron Triangle - (Kerzner, 2009, pp.5-6)\" /></p>\n<p>The role of a project manager is to successfully balance the four key considerations; <ins>Time</ins>, <ins>Cost</ins>, <ins>Quality</ins> and <ins>Scope</ins>.<br />\n 项目经理的作用是成功平衡四个关键因素：时间，成本，质量和范围。</p>\n<p>A successful project will:\u000b<br />\n一个成功的项目将：</p>\n<ul>\n<li>Be within an acceptable level of adherence to each of these 4 considerations (Time, Cost, Quality and Scope), as based on the stated needs of stakeholders who have the power to determine success.<br />\n 根据有能力确定成功的利益相关者所陈述的需求，在对这四个考虑因素（时间，成本，质量和范围）中的每一个方面都处于可接受的可接受水平内。</li>\n<li>The consumers of the project’s deliverables are satisfied.<br />\n 消费者对项目交付成果感到满意。</li>\n<li>The necessary resources for the project (technology, specific professional skills, unique materials, etc.) are available to the project team when they are needed.<br />\n 必要时，项目团队可以使用项目的必要资源（技术，特定的专业技能，独特的材料等）。<br />\nThough not a part of the Iron Triangle, this was added because in the PMBOK 6<sup>th</sup> ed., on p.10, “resources” are specifically mentioned along side of Time, Cost, Quality and Scope.<br />\n 尽管不是铁三角的一部分，但由于在 PMBOK 的第 6 版中，第 111 页而添加了它。在图 10 中，在时间，成本，质量和范围旁边特别提到了 “资源”。</li>\n</ul>\n<p>PMI’s Definitions as found in the PMBOK 6<sup>th</sup> Ed.:</p>\n<dl>\n<dt>Cost 成本</dt>\n<dd>Project Cost Management should consider the effect of project decisions on the subsequent recurring cost of using, maintain, and supporting the product, service or result of the project (p. 233)<br />\n 项目成本管理应考虑，项目决策对随后使用、维护和支持产品、服务或项目结果的经常性成本的影响</dd>\n<dt>Quality 质量</dt>\n<dd>The degree to which a set of inherent characteristics fulfills requirements. (p. 718)<br />\n 一组固有特性满足要求的程度。<br />\nTo PMI, just meeting requirements as a core success criteria. Modern quality experts establish the expectation customer satisfaction.  For example, and according to Juran, meeting expectations regarding fitness of use is the definition of quality.<br />\n 对于 PMI，仅将满足要求作为核心成功标准即可。现代质量专家建立了对客户满意的期望。例如，据 Juran 所说，满足有关使用适用性的期望，是质量的定义。</dd>\n<dt>Scope 范围</dt>\n<dd>The sum of the products, services, and results to be provided as a project.  (p. 722)<br />\n 作为项目提供的产品，服务和结果的总和。</dd>\n<dt>Time 时间</dt>\n<dd>A limited period or interval, as between two successive events. <span class=\"exturl\" data-url=\"aHR0cDovL0RpY3Rpb25hcnkuY29t\">Dictionary.com</span> – 4<sup>th</sup> definition<br />\n 如两个连续事件之间的，有限的时间段或间隔。</dd>\n</dl>\n<h1 id=\"what-project-managers-do\"><a class=\"anchor\" href=\"#what-project-managers-do\">#</a> What project managers do</h1>\n<h2 id=\"specifically-on-the-project-managers-role\"><a class=\"anchor\" href=\"#specifically-on-the-project-managers-role\">#</a> Specifically on the Project Manager’s Role</h2>\n<p>(PMBOK 6<sup>th</sup> ed p.52)</p>\n<ul>\n<li>Possess understanding, <strong>knowledge</strong> and experience<br />\n 具有理解力，<strong>知识</strong> 和经验</li>\n<li>“Provides <strong>leadership</strong>”<br />\n 提供领导能力</li>\n<li>Coordination through communication<br />\n 通过沟通进行协调</li>\n<li>Existence of requirements<br />\n 需求存在</li>\n<li>Planning, including project schedules (Gantt charts/ MS Project)<br />\n 规划，包括项目进度表（甘特图 / MS Project）</li>\n<li>Monitor/control<br />\n 监控 / 控制</li>\n<li>SMART Goals/Metrics/KPIs Project execution<br />\nSMART 目标 / 指标 / KPI 项目执行</li>\n<li>Project’s outcome<br />\n 项目成果</li>\n<li>The PM does not need to be an expert!<br />\nPM 不必是专家！</li>\n</ul>\n<h3 id=\"knowledge\"><a class=\"anchor\" href=\"#knowledge\">#</a> Knowledge</h3>\n<ul>\n<li>Technical 技术</li>\n<li>Project management 项目管理</li>\n<li>Understanding 理解</li>\n<li>Experience 经验</li>\n</ul>\n<h3 id=\"leadership\"><a class=\"anchor\" href=\"#leadership\">#</a> Leadership</h3>\n<p>For a team:<br />\n 对于团队</p>\n<ul>\n<li>Guide 指南</li>\n<li>Motivate 激励</li>\n<li>Direct 直接</li>\n</ul>\n<p>PM’s Leadership Abilities (in no order):<br />\nPM 的领导能力（无顺序）</p>\n<ul>\n<li>Negotiation 谈判</li>\n<li>Communication 沟通</li>\n<li>Problem solving 解决问题</li>\n<li>Critical thinking 批判性思维</li>\n<li>Interpersonal skills 人际交往技巧</li>\n</ul>\n<h2 id=\"process-groups\"><a class=\"anchor\" href=\"#process-groups\">#</a> Process Groups</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcm9qZWN0bWFuYWdlbWVudGFjYWRlbXkubmV0L2FydGljbGVzL2ZpdmUtdHJhZGl0aW9uYWwtcHJvY2Vzcy1ncm91cHMv\">The Five Traditional Process Groups Explained</span></p>\n<h2 id=\"project-manager-responsibilities-defined\"><a class=\"anchor\" href=\"#project-manager-responsibilities-defined\">#</a> Project Manager Responsibilities Defined</h2>\n<p>(PMBOK 6<sup>th</sup> ed., p.52 &amp; p.716)</p>\n<p>“The project manager is the person assigned by the <ins>performing organization</ins> to lead the team that is responsible for achieving the project objectives.”<br />\n 项目经理是绩效组织指派的人员，负责领导负责实现项目目标的团队</p>\n<blockquote>\n<p>This definition assumes the entire company is the “performing organization.”<br />\n 此定义假设整个公司都是 “绩效组织”。</p>\n</blockquote>\n<h1 id=\"smart-goal\"><a class=\"anchor\" href=\"#smart-goal\">#</a> SMART Goal</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmlzaW5ndGlkZWNhcGl0YWwub3JnL2Jsb2cvMjAxNy8wOC8xNy9nZXQtcmVhbC1zbWFydC1zZXR0aW5nLWdvYWxzLXdlbGwv\">Get Real SMART: Setting Goals — Well.</span></p>\n</blockquote>\n<p>When you ask a typical person about their goals, often they will respond by detailing their dreams – their dream job, their dream house, their dream business.<br />\n 当您问一个人目标是什么时，他们通常会详细说明他们的梦想来进行回答 - 他们的梦想工作，他们的梦想家园，他们的梦想生意。</p>\n<p>Dreams are important; they give us a direction to move towards, but I think it’s important to note that they are not the same as goals.<br />\n 梦想很重要。它们为我们提供了前进的方向，但是我认为必须注意它们与目标不同。</p>\n<p>Goals (when written well), like dreams, are aspirational — but they are also more specific. While a dream may be the roof of the building, goals are the steps and landings of the stairwell. For example, if your dream is to run a world-renowned restaurant, your goal-trajectory might be: get accepted into, and graduate from culinary school; land a job as a cook at a notable restaurant; move through the ranks in notable restaurants until you reach chef status; find a financial backer and open the restaurant; gain exposure and win accolades; etc.<br />\n 目标（如写得好），就像梦想一样，是有抱负的，但目标也更具体。梦想可能是建筑物的屋顶，而目标是楼梯间的台阶和平台。例如，如果您的梦想是经营一家举世闻名的餐厅，那么您的目标轨迹可能是：被烹饪学校录取并毕业；在著名的餐厅找到厨师的工作；在知名餐厅中晋升，直至获得厨师身份；寻找资金支持者并开设餐厅；获得曝光并赢得赞誉；等等</p>\n<p>The thing is, most people aren’t very good at setting goals either. While the goals laid out above are better at giving direction to someone’s career, they could be stronger. How? By making them SMART.<br />\n 问题是，大多数人也不太擅长设定目标。尽管以上列出的目标，可以更好地指导某人的职业发展，但目标还可以变得更强。该怎么做？通过使它们更 SMART。</p>\n<h2 id=\"smart-lexicon-use-example\"><a class=\"anchor\" href=\"#smart-lexicon-use-example\">#</a> SMART + Lexicon Use Example</h2>\n<p>SMART 词典使用示例</p>\n<p>Related Lexicon (new words)<br />\n 相关词汇新词</p>\n<ul>\n<li>Program 程序</li>\n<li>SMART\n<ul>\n<li><strong>S</strong>pecific 特定的</li>\n<li><strong>M</strong>easurable 可衡量的</li>\n<li><strong>A</strong>chievable 可达到的</li>\n<li><strong>R</strong>ealistic / <strong>R</strong>elevant 现实 / 相关的</li>\n<li><strong>T</strong>ime bound 有时限的</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"specific-特定的\"><a class=\"anchor\" href=\"#specific-特定的\">#</a> Specific 特定的</h3>\n<p>A specific goal is a goal that has a bit of depth to it. It isn’t saying “I want to go to culinary school”, it’s saying “I want to graduate from The Culinary Institute of America in their baking program”. Specificity is important so that you know exactly what needs to be done in order for the goal to be deemed a success.<br />\n 一个特定的目标是有一定深度的目标。这并不是说 “我想去烹饪学校”，而是 “我想从美国烹饪学院的烘烤计划中毕业”。特异性很重要，因为这样您可以确切地知道需要做什么才能使目标成功。</p>\n<h3 id=\"measurable-可衡量的\"><a class=\"anchor\" href=\"#measurable-可衡量的\">#</a> Measurable 可衡量的</h3>\n<p>A measurable goal is one that is based on some sort of metric. Instead of saying “I want to have good knife skills”, a measurable goal would be: “I want to be able to finely and evenly dice 5 onions per minute.”<br />\n 可衡量的目标是基于某种度量标准的目标。一个可衡量的目标不是说 “我想拥有良好的刀技能”，而是：“我希望能够每分钟细细均匀地切成 5 个洋葱。”</p>\n<h3 id=\"attainable-可达到的\"><a class=\"anchor\" href=\"#attainable-可达到的\">#</a> Attainable 可达到的</h3>\n<p>A goal that is attainable is a goal that you can accomplish. People have a tendency to get over-zealous with their goals when they are excited and passionate. However, setting goals that you will not be able to accomplish doesn’t make sense for anyone. It’s more important to be realistic than too aspirational here. Break down larger goals into pieces if you need to, in order to accomplish them. For example: if your big goal is to open a restaurant, but you aren’t very good at cooking yet, a smaller and more attainable goal would be to learn to cook well, or even learn to cook a few things well. As you attain certain goals and get better at something, new goals may become attainable.</p>\n<p>可达到的目标就是你可以实现的目标。当人们充满激情和激情时，他们倾向于对目标过度热情。但是，设定一个任何人都无法实现的目标是没有意义的。在这里，现实主义比追求梦想更重要。如果需要，可以将较大的目标分解为多个部分，以实现它们。例如：如果您的主要目标是开一家餐厅，但您还不是很擅长做饭，那么一个较小且可以实现的目标将是学习烹饪，甚至学会烹饪一些东西。当您达到某些目标并在某些方面变得更好时，新的目标可能会实现。</p>\n<h3 id=\"relevant-相关的\"><a class=\"anchor\" href=\"#relevant-相关的\">#</a> Relevant 相关的</h3>\n<p>Relevant goals are goals that help you progress to your dream. If you are trying to reach culinary stardom at any cost, it doesn’t make sense to waste your precious time learning to be an awesome mechanic. Sure, it might be super useful to you personally, but in this case, it doesn’t help you reach your dream or goals.</p>\n<p>相关的目标是可以帮助您实现梦想的目标。如果您想不惜一切代价想争取美食家的认可，却浪费您宝贵的时间来学习成为一名出色的机械师。当然，这对您个人可能很有用，但在这种情况下，它并不能帮助您实现梦想或目标。</p>\n<h3 id=\"time-bound-有时限的\"><a class=\"anchor\" href=\"#time-bound-有时限的\">#</a> Time-bound 有时限的</h3>\n<p>The best goals are also time bound. Adding this constraint is important so that you are able to keep yourself accountable. Setting goals is sort of like creating a to-do list. You have on your list what you want to do today, what you want to do tomorrow, etc. With goals you may have daily goals, monthly goals, yearly goals, etc. Be very specific with the dates you choose, and make sure that you would also be able to complete the goal without unreasonable stress.</p>\n<p>最好的目标也是有时间限制的。添加此约束很重要，这样您就可以对自己负责。设定目标有点像创建待办事项列表。您的清单上有今天要做什么，明天要做什么等等。有了目标，您可能会有每日目标，每月目标，年度目标等。请对选择的日期非常明确，并确保您也可以在没有不合理压力的情况下完成目标。</p>\n<h2 id=\"goals-关于目标\"><a class=\"anchor\" href=\"#goals-关于目标\">#</a> Goals 关于目标</h2>\n<ul>\n<li>Metrics are just a way to measure<br />\n 指标只是一种衡量方法</li>\n<li>Goals need to be flexible to allow for unique situations<br />\n 目标必须灵活，以适应特殊情况</li>\n<li>SMART goals are needed to make metrics meaningful<br />\n 需要 SMART 目标，以使指标有意义</li>\n<li>Goals provide context for metrics<br />\n 目标为指标提供了背景</li>\n</ul>\n<h3 id=\"example\"><a class=\"anchor\" href=\"#example\">#</a> Example</h3>\n<p>Together, SMART goals help shape a roadmap for reaching your dreams. One SMART goal for an aspiring restaurant owner who has spent years perfecting their trade, and is now ready to venture off on their own may look like this:<br />\nSMART 目标有助于制定实现梦想的路线图。对于一个有抱负的餐馆老板，他们花了多年的时间完善自己的贸易，现在准备自己冒险，这是一个 SMART 目标，看起来可能是这样的：</p>\n<p>By January 15, 2018, I want to have developed, and tested (have friends and family sample, and give rating on a 1-10 scale) five sample items for the menu.<br />\n 到 2018 年 1 月 15 日，我希望开发和测试菜单上的五个示例项目（具有朋友和家人的示例，并以 1-10 的等级进行评级）。</p>\n<ul>\n<li><strong>Was This Specific?</strong> – They didn’t say: “I want to have a menu written” They said: “developed, and tested (have friends and family sample, and give rating on a 1-10 scale) five sample items”<br />\n 这可测量吗？ –可以测量五个项目。 1-10 的评分等级是一个指标。是否已开发 / 测试过某些产品–是或否？</li>\n<li><strong>Was This Measurable?</strong> – Five items can be measured. A rating scale of 1-10 is a metric. Is something developed/tested – yes or no?<br />\n 这是可以实现的吗？ –该博客文章撰写于 2017 年 8 月，因此可能取决于厨师的奉献精神和能力。为了我们的目的，我们将假设五个项目是一个合理的数字。</li>\n<li><strong>Was This Attainable?</strong> – This blog piece was written in August 2017, so depending on the dedication and ability of the chef, this may or may not be attainable. We are going to assume that five items is, for our purposes, a reasonable number.<br />\n 这是可以实现的吗？ –该博客文章撰写于 2017 年 8 月，因此可能取决于厨师的奉献精神和能力。为了我们的目的，我们将假设五个项目是一个合理的数字。</li>\n<li><strong>Was This Relevant?</strong> – Having a menu is the corner stone of a restaurant, so this is relevant.<br />\n 这相关吗？ –拥有菜单是餐厅的基石，所以这很重要。</li>\n<li><strong>Was This Time-bound?</strong> – Yes, by saying “by January, 15, 2018” the goal is explicitly time-bound.<br />\n 这有时间限制吗？ –是的，通过说 “到 2018 年 1 月 15 日”，目标显然是有时间限制的。</li>\n</ul>\n<p>There are many ways to set goals, and reach them. Making goals SMART has worked wonders for me and many others in the past. If you have trouble following through with actions, feel like you could be more organized, or are just looking for ways to be more efficient, I would highly recommend setting and following the SMART Goal framing.<br />\n 有很多方法可以设定目标并达到目标。制定目标 SMART 过去为我和其他许多人创造了奇迹。如果您在执行操作时遇到困难，觉得自己可能更有条理，或者只是在寻找提高效率的方法，我强烈建议您设置并遵循 SMART 目标框架。</p>\n<h2 id=\"stakeholder-defined-利益相关者的定义\"><a class=\"anchor\" href=\"#stakeholder-defined-利益相关者的定义\">#</a> Stakeholder Defined 利益相关者的定义</h2>\n<p>(PMBOK 6<sup>th</sup> ed., p. 723)</p>\n<p>“…an individual, or group, or organization that may affect, be affected by, or perceive itself to be affected by a decision, activity, or outcome of a project…”<br />\n“…… 可能会受项目的决定、活动或结果，影响、被影响或认为自己受其影响的，个人、团体或组织……”</p>\n<h2 id=\"the-project-plan-ties-it-all-together\"><a class=\"anchor\" href=\"#the-project-plan-ties-it-all-together\">#</a> The Project Plan Ties it all Together</h2>\n<p>项目计划将以下全部紧密关联在一起<br />\n (PMBOK 6<sup>th</sup> ed., p. 8)</p>\n<ul>\n<li>Scope management plan 范围管理计划</li>\n<li>Requirements management plan 需求管理计划</li>\n<li>Schedule management plan 进度管理计划</li>\n<li>Cost management plan 成本管理计划</li>\n<li>Quality management plan 质量管理计划</li>\n<li>Resource management plan 资源管理计划</li>\n<li>Communications management plan 通讯管理计划</li>\n<li>Risk management plan 风险管理计划</li>\n<li>Procurement management plan (procurement = buying good or services) 采购管理计划（采购 = 购买商品或服务）</li>\n<li>Stakeholder engagement plan 利益相关者参与计划</li>\n</ul>\n<h1 id=\"summary\"><a class=\"anchor\" href=\"#summary\">#</a> Summary</h1>\n<p>You Don’t Need Formal Management to Get Results, but…\u000b<br />\n您不需要正式的管理即可获得结果，但是……</p>\n<p>Using generally accepted project management techniques will increase the chances of a success.<br />\n 使用公认的项目管理技术将增加成功的机会。</p>\n<p>If a project fails, a project manager who follows generally accepted project management principles, will be more likely to keep their job.<br />\n 如果项目失败，那么一个遵循公认的项目管理原则的项目经理，将更有可能继续工作。</p>\n<h1 id=\"questions\"><a class=\"anchor\" href=\"#questions\">#</a> Questions</h1>\n<h2 id=\"how-great-leaders-inspire-action\"><a class=\"anchor\" href=\"#how-great-leaders-inspire-action\">#</a> How Great Leaders Inspire Action</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVkLmNvbS90YWxrcy9zaW1vbl9zaW5la19ob3dfZ3JlYXRfbGVhZGVyc19pbnNwaXJlX2FjdGlvbg==\">LEADERSHIP How Great Leaders Inspire Action – Simon Sinek</span></p>\n<ol>\n<li>What does “thinking from the inside out” mean?<br />\n&quot;从内到外思考&quot; 是什么意思？</li>\n<li>How do great leaders act to inspire others?<br />\n 伟大的领导者如何激励他人？</li>\n<li>Why is “why” so important?<br />\n 为什么 &quot;为什么&quot; 如此重要？</li>\n<li>What do you want to hire for; people who work for money, or people that work for passion?<br />\n 您想雇佣什么；为钱而工作的人，还是为激情而工作的人？</li>\n<li>Samuel Pierpont Langley was inspired by what? How did his “inspiration” affect his success?<br />\nSamuel Pierpont Langley 受到什么的启发？他的 &quot;灵感&quot; 如何影响他的成功？</li>\n<li>How can you use the “why” as a Scrum Master or Project Manager.<br />\n 如何使用 &quot;为什么&quot; 作为项目管理员或项目经理。</li>\n</ol>\n<h2 id=\"what-is-a-project-and-what-is-a-smart-goal\"><a class=\"anchor\" href=\"#what-is-a-project-and-what-is-a-smart-goal\">#</a> What is a Project, and What is a SMART Goal?</h2>\n<dl>\n<dt>Case 1:</dt>\n<dd>The Chicago Police Department has found a vendor that can install a new technology across the city that can give the GPS coordinates of people who yell “help” when outside of a building, car, or similar.  The idea is that this will reduce the time it takes to get first responders (police, paramedics, firemen, etc.) to places they are urgently needed.<br />\n 芝加哥警察局找到了一家供应商，该供应商可以在整个城市中安装一项新技术，该技术可以为在建筑物、汽车或类似场所外大喊大叫求助的人提供 GPS 坐标。这样做的目的是减少急救人员（警察，医护人员，消防员等）到达急需地点的时间。</dd>\n<dt>Case 2:</dt>\n<dd>You are the new principal of an inner-city grammar school in Los Angeles.  While observing the classroom situation, the first thing you notice is that the same parents, over and over again, arrive late with their children to start the school day and some students are very disruptive. You get a grant (a grant is a gift from an individual or organization to achieve something good) to implement a trial of a virtual reality experience in the classroom so students are less distracted by the un-avoidable, distracting, surroundings.<br />\n 您是洛杉矶市内一所语法学校的新任校长。在观察教室情况时，您注意到的第一件事是，相同的父母带着孩子一次又一次地上学迟到，有些学生的生活非常混乱。您获得了一笔赠款（赠款是个人或组织为取得良好成就而提供的礼物），可以在教室中试用虚拟现实技术，可以减少学生被不可避免的混乱环境分散注意力。</dd>\n<dt>Case 3:</dt>\n<dd>You are the CEO for XYZ defense contractor.  Your large and well-known firm’s PCs still run on Windows 7.  You ask Aron, a highly respected Project Manager at your firm to oversee an upgrade all the PCs in your firm to Windows 8.   (Please respond to the questions below from Aron’s perspective.)<br />\n 您是 XYZ 国防承包商的 CEO。您的大型知名公司的 PC 仍在用 Windows 7。您请贵公司备受尊敬的项目经理 Aron 监督公司中所有 PC 升级到 Windows 8 的升级。（请从 Aron 的角度回答以下问题。）<br />\nYou asked for an upgrade to Windows 8 instead of Windows 10 (the most current PC/Windows operating system) because your technical experts have always advised you to intentionally be behind in operating system upgrades by 5 years in order to avoid the bugs that typically accompany new operating system roll outs.<br />\n 您要求升级到 Windows 8 而不是最新的 Windows 10，是因为您的技术专家一直建议您故意将操作系统升级落后 5 年，以免出现伴随新操作系统推出时常出现的错误。</dd>\n</dl>\n<p>Questions to apply to each case above:<br />\n 适用于上述每种情况的问题：</p>\n<ol>\n<li>What is the project?</li>\n<li>What is one example SMART goal for the project?<br />\n 该项目的 SMART 目标示例是什么？<br />\nComment: SMART stands for Specific, Measurable, Achievable, Relevant and Timely.  Please see <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmlzaW5ndGlkZWNhcGl0YWwub3JnL2Jsb2cvMjAxNy8wOC8xNy9nZXQtcmVhbC1zbWFydC1zZXR0aW5nLWdvYWxzLXdlbGwv\">this post</span> for a further explanation of SMART goals.<br />\n 注：SMART 代表特定，可衡量，可实现，相关性和及时性。</li>\n<li>Who are the stakeholders for the project?<br />\n 谁是项目的利益相关者？</li>\n</ol>\n<h2 id=\"quiz-understanding-pm\"><a class=\"anchor\" href=\"#quiz-understanding-pm\">#</a> Quiz Understanding PM</h2>\n<ol>\n<li class=\"quiz essay\">\n<p>What is this the PMI definition of “A temporary endeavor undertaken to create a unique product, service or result.”?\u000b</p>\n<blockquote>\n<p>a Project</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Concisely Stated The Vision = ?</p>\n<ul class=\"options\">\n<li class=\"correct\">the Why</li>\n<li>the What</li>\n<li>the How</li>\n<li>The Who</li>\n</ul>\n</li>\n<li class=\"quiz essay\">\n<p>What are the Stages of the Product Life Cycle?</p>\n<blockquote>\n<ul>\n<li>Introduction</li>\n<li>Growth</li>\n<li>Maturity</li>\n<li>Decline</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>What is this the definition of?: “A documented economic feasibility study used to establish the validity of the benefits of a” specific effort “that is used as a basis for authorization of further project management activities.”</p>\n<blockquote>\n<p>a Business Case</p>\n</blockquote>\n</li>\n<li class=\"quiz true\">\n<p>This is the definition of a statement of work: A narrative description of products, services, or results to be delivered by the project.</p>\n</li>\n<li class=\"quiz true\">\n<p>This the definition of a Project Charter? :A document issued by the project initiator or sponsor that formally authorizes the existence of a project and provides the project manager with the authority to apply organizational resources to project activities.</p>\n</li>\n<li class=\"quiz\">\n<p>What is this the term related to this definition? “The sum of the products, services, and results to be provided as a project”.</p>\n<ul class=\"options\">\n<li>Time</li>\n<li>Cost</li>\n<li>Quality</li>\n<li class=\"correct\">Scope</li>\n</ul>\n</li>\n<li class=\"quiz true\">\n<p>This is the definition of a project manager’s responsibilities: “The project manager is the person assigned by the performing organization to lead the team that is responsible for achieving the project objectives.”</p>\n</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMM 571. Project Management",
                "项目管理"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmd-510/final-exam/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmd-510/final-exam/",
            "title": "Final Exam",
            "date_published": "2020-12-05T12:32:06.000Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>Topic(s)</th>\n<th>Suggested Readings</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Abstraction, Inheritance, Polymorphism</td>\n<td>Chap. 10</td>\n</tr>\n<tr>\n<td>Exceptions and Advanced File IO</td>\n<td>Chap. 11</td>\n</tr>\n<tr>\n<td>Java Gui's – Swing / JavaFX</td>\n<td>Chap. 12-14 (plus supplements)</td>\n</tr>\n<tr>\n<td>Generics</td>\n<td>Chap. 17</td>\n</tr>\n<tr>\n<td>Collections (maps, sets, lists)</td>\n<td>Chap. 18</td>\n</tr>\n<tr>\n<td>Linked Lists</td>\n<td>Chaps. 19</td>\n</tr>\n<tr>\n<td>Stacks, Queues</td>\n<td>Chap. 21</td>\n</tr>\n<tr>\n<td>Databases - JDBC</td>\n<td>Chap. 22 (supplemented)</td>\n</tr>\n<tr>\n<td>+ Regular Expressions from notes, source examples and links</td>\n<td>(supplemented)1</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"study-guide-part-1\"><a class=\"anchor\" href=\"#study-guide-part-1\">#</a> Study guide part 1</h1>\n<ol>\n<li class=\"quiz\">\n<p>What SQL operator can be used to perform a search for a substring?</p>\n<ul class=\"options\">\n<li>STR</li>\n<li>SUB</li>\n<li>WHERE</li>\n<li class=\"correct\">LIKE</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>What must you have installed on a system before you can use JDBC to access a database on the system?</p>\n<ul class=\"options\">\n<li>Java</li>\n<li>A DBMS</li>\n<li class=\"correct\">Both A and B</li>\n<li>Neither A nor B</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>What term refers to data that describes other data?</p>\n<ul class=\"options\">\n<li class=\"correct\">meta data</li>\n<li>abstract data</li>\n<li>micro data</li>\n<li>pseudo-data</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>Which of the following is NOT a part of JDBC URL?</p>\n<ul class=\"options\">\n<li><code>&lt;protocol&gt;</code></li>\n<li><code>&lt;subprotocol&gt;</code></li>\n<li><code>&lt;subname&gt;</code></li>\n<li class=\"correct\"><code>&lt;tablename&gt;</code> </li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p><span class=\"gap\"></span> package contains classes that help in connecting to a database</p>\n<ul class=\"options\">\n<li>sql.java</li>\n<li>mysql.java</li>\n<li class=\"correct\">java.sql</li>\n<li>java.mysql</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>Two main interfaces that directly use the Collection interface are <span class=\"gap\"></span> and <span class=\"gap\"></span> .</p>\n<ul class=\"options\">\n<li>AbstractList, LinkedList</li>\n<li class=\"correct\">Set, List</li>\n<li>List, Vector</li>\n<li>HashSet, LinkedHashSet</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>The function below can be rewritten how?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>addButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    data<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>addButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>addButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li class=\"correct\"><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>addButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>addButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> e <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>Which is not a solid example of encapsulation?</p>\n<ul class=\"options\">\n<li>A Car class having a has-a relation with class Parts</li>\n<li class=\"correct\">Taking for granted a wikipedia definition</li>\n<li>A washing machine and its use of a power Button</li>\n<li>A Touring machine</li>\n</ul>\n<blockquote>\n<p>哪个不是封装的可靠示例</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Given the generic following method, what can be passed in as a parameter value?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">displayArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> element <span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li>an array whose element type is E</li>\n<li>an array whose element type is Object</li>\n<li class=\"correct\">an array whose element type is Integer</li>\n<li>an array whose type is any superclass of Number</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>Variable result below has what action performed on it?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">newMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token function\">newValue</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">newValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span>i <span class=\"token operator\">:</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li>boxing</li>\n<li>autoboxing</li>\n<li>casting</li>\n<li class=\"correct\">unboxing</li>\n</ul>\n</li>\n<li class=\"quiz essay\">\n<p>Write a create table statement below to create the tickets table (my_Ticket) for your project given the information listed below.</p>\n<div class=\"note default no-icon\">\n<table>\n<thead>\n<tr>\n<th>Field name</th>\n<th>Field Type</th>\n<th>Field Size</th>\n<th>Primary Key?</th>\n<th>Nulll?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>Auto_increment</td>\n<td></td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>ticketNum</td>\n<td>Integer</td>\n<td></td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>ticketDecsc</td>\n<td>varchar</td>\n<td>100</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"CREATE TABLE my_Ticket \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                   <span class=\"token string\">\"(id INTEGER not NULL AUTO_INCREMENT, \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                   <span class=\"token string\">\" ticketNum INTEGER, \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                   <span class=\"token string\">\" ticketDesc VARCHAR(100), \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                   <span class=\"token string\">\" PRIMARY KEY ( id ))\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Create an insert statement below to insert a record into the above table that contains the data below.</p>\n<div class=\"note default no-icon\">\n<table>\n<thead>\n<tr>\n<th>Variable (Field) name</th>\n<th>Data</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Id</td>\n<td></td>\n</tr>\n<tr>\n<td>ticketNum</td>\n<td>1001</td>\n</tr>\n<tr>\n<td>ticketDecsc</td>\n<td>PC Virus</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO my_Ticket(ticketNum, ticketDesc) \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                          <span class=\"token string\">\"VALUES ('\"</span><span class=\"token operator\">+</span>ticket_num<span class=\"token operator\">+</span><span class=\"token string\">\"','\"</span><span class=\"token operator\">+</span>ticket_desc<span class=\"token operator\">+</span><span class=\"token string\">\"')\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Write a statement that will update all ticketNum fields &gt; 200 and whose<br />\nticketDesc field has the containment  <code>Bootstrapped virus found</code>  to a ticketDesc value of  <code>Bootsector virus found</code>  from the table above.</p>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"update my_Ticket set ticketDesc = 'Bootsector virus found' where ticketDesc like 'Bootstrapped virus found' and ticketNum > 200\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Assume a file called data.dat is opened for reading and contains the following record data. Assume records begin with a number: </p>\n<pre><code>1 Puppy 2 Catnap 3 plaintiff 4 CoolCat 5 Cat and mouse 6 Catburgler.  \n</code></pre>\n<p>Fill in the underline to complete the statement for variable REGEX below to allow for the displaying any data containing the letters cat.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> bufferedReader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> REGEX <span class=\"token operator\">=</span> <span class=\"token string\">\"cat+\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Pattern</span> p <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>REGEX<span class=\"token punctuation\">,</span><span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span>CASE_INSENSITIVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> phrase <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Matcher</span> m <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>phrase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>phrase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li class=\"quiz\">\n<p>Given a button named  <code>btnCancel</code> , in FX an alert can verify if the cancel button has been pressed how?</p>\n<ul class=\"options\">\n<li class=\"correct\"><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ButtonType</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> alert<span class=\"token punctuation\">.</span><span class=\"token function\">showAndWait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> btnCancel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> alert<span class=\"token punctuation\">.</span><span class=\"token function\">showAndWait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> btnCancel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Optional</span> result <span class=\"token operator\">=</span> alert<span class=\"token punctuation\">.</span><span class=\"token function\">showAndWait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> btnCancel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ButtonType</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> alert<span class=\"token punctuation\">.</span><span class=\"token function\">showAndWait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> btnCancel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h1 id=\"study-guide-part-2\"><a class=\"anchor\" href=\"#study-guide-part-2\">#</a> Study guide part 2</h1>\n<ol>\n<li class=\"quiz essay\">\n<p>Can we call a non-static method from inside a static method?</p>\n<blockquote>\n<p>我们可以从静态方法内部调用非静态方法吗？<br />\nNon-Static methods are owned and called by objects of a class and have object level scope so in order to call the non-static methods from a static block (like the main method), an object of the class needs to be created first.<br />\n 非静态方法由类的对象拥有和调用，并且具有对象级别的范围，因此为了从静态块（如 main 方法）调用非静态方法，需要首先创建类的对象 。</p>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>What are some differences between a JDBC statement object and prepared statement object?</p>\n<blockquote>\n<p>JDBC 语句对象和预准备语句对象之间有什么区别？<br />\nPrimarily the differences between a standard JDBC statement and a PreparedStatement are best viewed by the benefits that a PreparedStatement gives you and your application.<br />\n 首先，通过 PreparedStatement 给您和您的应用程序带来的好处，可以最好地查看标准 JDBC 语句和 PreparedStatement 之间的差异。</p>\n<p>Some core advantages include the following:<br />\n 一些核心优势包括：</p>\n<ul>\n<li>SQL Injection Prevention SQL 注入预防</li>\n<li>Pre-Compilation 预编译</li>\n<li>Ease of coding 易于编码</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>Explain how an Iterator can be beneficial when traversing elements of a data structure.</p>\n<blockquote>\n<p>解释遍历数据结构的元素时，迭代器如何有益。<br />\nThe Iterator pattern enables you to traverse through all the elements in a data structure without knowing or caring how those elements are stored or represented.  The iterator provides methods for fetching the elements of the collection, one at a time, in some order.<br />\n 迭代器模式使您可以遍历数据结构中的所有元素，而无需知道或关心如何存储或表示这些元素。 迭代器提供了一些以某种顺序一次获取集合元素的方法。<br />\nEx.</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">::</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">ArrayList</span> names <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>names<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thomas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>names<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Betty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>names<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pritesh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Iterator</span> it <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">String</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Can we override any static methods in an Interface? Explain.</p>\n<blockquote>\n<p>我们可以覆盖接口中的任何静态方法吗？ 说明。<br />\nNo. The interface static method helps provide security by not allowing implementation classes to override them. Note a compiler error will occur if you attempt to override any static method – ex. The method  <code>whateEver()</code>  of type someClass must override or implement a supertype method.<br />\n 不能。接口静态方法通过不允许实现类覆盖，来帮助提供安全性。 请注意，如果您尝试覆盖任何静态方法，则会发生编译器错误。<br />\n例如，someClass 类型的 <code>whateEver()</code>  方法必须重写或实现超类型方法。</p>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>Compare and contrast HashMaps vs. HashTables. Which of the types allow nulls? Which allow duplicates? Which are thread safe? How are orders retained upon insertion? What are access time capabilites?</p>\n<blockquote>\n<p>比较和对比 HashMaps 与 HashTables。 哪种类型允许空值？ 哪些允许重复？ 哪些是线程安全的？ 插入后如何保留线程？ 什么是访问时间功能？</p>\n<ul>\n<li>\n<p>HT: It does not allow nulls for both key any value. It will throw a NullPointerException.<br />\n 不允许两个键的任何值都为 null。 它将抛出 NullPointerException。<br />\nHashtable does not maintain insertion order. The order is defined by the Hash function. So only use this if you do not need data in order.<br />\n 哈希表不保持插入顺序。 顺序由哈希函数定义。 因此，仅在不需要顺序数据时才使用它。<br />\nIt is synchronized. It is slow. Only one thread can access it at a time.<br />\n 同步。 太慢了。一次只能有一个线程访问它。<br />\nThread safe.<br />\n 线程安全。</p>\n</li>\n<li>\n<p>HM: Does not maintain insertion order.<br />\n 不保持插入顺序。<br />\nIt is not synchronized. It will have better performance.<br />\n 不同步。 它将具有更好的性能。<br />\nHashMap are not thread safe<br />\nHashMap 不是线程安全的<br />\n Allows for nulls for both K,V<br />\n 允许 K，V 都为空</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>Describe all the relationships shown below.</p>\n<p><img data-src=\"https://i.loli.net/2020/12/10/wGO3hesroudAVCI.png\" alt=\"1.png\" /></p>\n<blockquote>\n<p>描述下面显示的所有关系。<br />\nOrder and Customer have a 1:1 relationship.<br />\n 订单与客户具有 1：1 关系。<br />\nOrder and OrderLine have a 1:0:Many relationship.<br />\nOrder 和 OrderLine 具有 1：0：Many 关系。<br />\nOrderLine and Profduct have a 1:1 relationship.<br />\nOrderLine 和 Profduct 具有 1：1 关系。<br />\nCrowsfeet guidelines follow…<br />\n 遵循 Crowsfeet 准则...<br />\n<img data-src=\"https://i.loli.net/2020/12/10/v3dhyYwB7tRk2ar.png\" alt=\"\" /></p>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>Write code to “cleanse” the list below from dups. Hint- a quick way would be to make use of ArrayList's addAll() and clear() methods along with a Set interface.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Skype\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Skype1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Skype\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ln\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>编写代码以 “清理” dump 中的以下列表。 提示 - 一种快速的方法是利用 ArrayList 的 addAll () 和 clear () 方法以及 Set 接口。</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Set</span> cleanser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>result<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>result<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>cleanser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Use a “for enhanced” loop to show results of the rebuilt list from question #7 above.</p>\n<blockquote>\n<p>使用 “增强” 循环显示上述问题 7 的重建列表的结果。</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> results <span class=\"token operator\">:</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Given the following initializations for the hashmap object students and the container list of type ArrayList to hold student data, display students in alpha order along with their respective scores.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>students<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thomas\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>students<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Betty\"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>students<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pritesh\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">:</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">Integer</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>给定以下哈希表对象学生的初始化以及用于保存学生数据的 ArrayList 类型的容器列表，按字母顺序显示学生及其各自的分数。</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Given the desired number of rows entered by a user number write a program to display in a triangle like pattern that follows based on user input.</p>\n<pre><code>Ex.\n1\n2 3\n4 5 6\n7 8 9 10\netc.\n</code></pre>\n<blockquote>\n<p>给定用户编号输入的所需行数，编写一个程序，以基于用户输入的三角形图案显示。</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter the number of rows which you want in your Triangle: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>r<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;=</span>i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//end outer for</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//end main</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Consider an interface that defines how to compare the size of objects.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Relatable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">/* define function from an instance to return 1, 0, -1 if</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      instance is greater than, equal to, or less than other */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">isLessThan</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Relatable</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Finish coding the method below to return an either a 1, 0 or -1. The method defined for this example is in a class called Rectangle which implements the Relatable interface.  Use the  <code>Rectangle</code>  class'  <code>getArea()</code>  method to detemine if one object is greater than, equal to or less than another object.</p>\n<blockquote>\n<p>定义比较对象大小的接口。</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">isLessThan</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Relatable</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*hint- cast Relatable object passed as Rectangle type*/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Rectangle</span> otherRect <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">)</span>other<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//ans.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> otherRect<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> otherRect<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Write a generalized algorithm in plain wording how to accomplish the following scenario.<br />\nGiven a stack of integers, check whether each successive pair of numbers in the stack is consecutive or not. The pairs can be increasing or decreasing and if the stack has an odd numbers of elements, the elements at the top is left out of pair. </p>\n<p>For example, if the stack of elements are  <code>[4, 5, -2,-3,11,10, 5, 6, 20]</code> , then the output should be true because each of the pairs  <code>(4, 5)</code> ,  <code>(-2, -3)</code> ,  <code>(11, 10)</code> , and  <code>(5, 6)</code>  consist of consecutive numbers.</p>\n<blockquote>\n<p>用通俗易懂的语言编写一个通用算法，以完成以下方案。<br />\n给定一个整数堆栈，请检查堆栈中每个连续的数字对是否连续。 元素对可以增加或减少，如果堆栈中元素的数量为奇数，则顶部的元素不成对。<br />\n例如，如果元素堆栈为 <code>[4, 5, -2,-3, 11, 10, 5, 6, 20]</code> ，则输出应为 true，因为每对对 <code>(4, 5)</code> ,  <code>(-2, -3)</code> ,  <code>(11, 10)</code> , and  <code>(5, 6)</code>  由连续数字组成。</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<pre><code>Create method called CheckStack\n    Perform housekeeping:\n    Set a test array to hold 2 int values\n    Set a boolean flag to denote any if compared values match or not\n    Pop last element in an odd stack to disregard it\n    Create for loop to loop 4x\n        Pop 2 elements to test successive values\n        Store results in test array at positions 0, 1\n        Create inner for loop to see if array positions are successive\n            If values are successive set flag to true\nExit method\n</code></pre>\n</div>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Actual code solution of algorithm: assume stack is built</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token class-name\">CheckStack</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">boolean</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//disregard last element in odd stack</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">//test 2 elements at a time</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            test<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            test<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> test<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> test<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> test<span class=\"token punctuation\">[</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token comment\">// Is sequential</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">else</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Not sequential</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Code a method called MidVal that accepts an arraylist and returns the middle integer data value in the arraylist.</p>\n<p>This can be done two ways:</p>\n<ol>\n<li>They can just grab the integer value in the middle of the array (watch for odd number vs. even number element count) –this is the best way</li>\n<li>Sort the array to find the median value (alternative poss. way)<br />\nMake sure arryalist is passed properly through parameter<br />\nEx.   <code>ArrayList&lt;Integer&gt; arr</code></li>\n</ol>\n<blockquote>\n<p>编写一个名为 MidVal 的方法，该方法接受一个数组列表并返回该数组列表中的中间整数数据值。</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">MidVal</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> arr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"null input arraylist, so MidVal is undefined\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"input arraylist is empty, so MidVal is undefined\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> midIndex <span class=\"token operator\">=</span> size <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// auto-truncation </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// arraylist has even number of elements </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// return average of middle two index values </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>midIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>midIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// arraylist has odd number of elements </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>midIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>How would you sort mutliple fields within an Arraylist of type BankRecords?  </p>\n<p>Depending on which fields you wish to sort we can set up a class to implement a Comparator interface and choose which fields to compare with for the major sort.</p>\n<blockquote>\n<p>您如何在 BankRecords 类型的 Arraylist 中对多个字段进行排序？<br />\n根据您希望排序的字段，我们可以设置一个类来实现 Comparator 接口，并选择要与主要字段进行比较的字段。<br />\nEx. Uber clients for Chicago follows</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Chicago</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> distance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Chicago</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dist<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        distance <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Chicago</span><span class=\"token punctuation\">></span></span> ar <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Chicago</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ar<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Chicago</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Joe Cool \"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ar<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Chicago</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Charlie B \"</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        ar<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Chicago</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I Trump \"</span> <span class=\"token punctuation\">,</span><span class=\"token number\">13</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//sort </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>ar<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token function\">sortByName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//display</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Chicago</span> clients<span class=\"token operator\">:</span> ar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Client name: \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                               clients<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span>  <span class=\"token string\">\"Distance : \"</span> <span class=\"token operator\">+</span>   clients<span class=\"token punctuation\">.</span>distance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//comparator sorts multiple members (fields)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> sortByName <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Chicago</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Chicago</span> t<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Chicago</span> t1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> t1<span class=\"token punctuation\">.</span>distance <span class=\"token operator\">-</span> t<span class=\"token punctuation\">.</span>distance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Explain how or code the following method to merge the two arrays sent through the parameter list.</p>\n<blockquote>\n<p>说明以下方法如何或编码以合并通过参数列表发送的两个数组。</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">mergeArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>arrayX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>arrayY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//  The size of the new array will be the sum of arrayA and arrayB</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayM <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arrayX<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> arrayY<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//  Loop to sort</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> arrayX<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> arrayY<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arrayX<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arrayY<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            arrayM<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arrayX<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            arrayM<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arrayY<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">//  end  while loop 1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//  loop that will copy the remainder of arrayA into new array, if necessary</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> arrayX<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        arrayM<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arrayX<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// End while loop 2</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">//  loop that will copy the remainder of arrayB into new array, if necessary</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> arrayY<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        arrayM<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arrayY<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">//  end while 3</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> arrayM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Tracing the code! You have a queue with 10 integers  <code>Q = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 &#125;</code> .  The expected output is  <code>Q = &#123; 1, 6, 2, 7, 3, 8, 4, 9, 5, 10 &#125;</code> .  Fill in any blanks alongside comments where shown to show trace results of the stack or queue. </p>\n<blockquote>\n<p>跟踪代码！ 您有一个包含 10 个整数的队列 Q = {1，2，3，4，5，6，7，8，8，9，10}。 预期输出为 Q = {1，6，2，7，3，8，4，9，5，10}。 填写注释旁边的所有空白，以显示堆栈或队列的跟踪结果。</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterleavingElements</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> q <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//Adding integers from 1 to 10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            q<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//1,2,3,4,5,6,7,8,9,10</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">InterleavingElements</span> ii <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterleavingElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is queue \"</span> <span class=\"token operator\">+</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token namespace\">ii<span class=\"token punctuation\">.</span></span>InterchangingInterleaving</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is queue \"</span> <span class=\"token operator\">+</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">InterchangingInterleaving</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//1,2,3,4,5</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            q<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">//6,7,8,9,10,5,4,3,2,1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            q<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//5,4,3,2,1,6,7,8,9,10</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//5,4,3,2,1</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            q<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">//1, 2, 3, 4, 5</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            q<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//6, 7, 8, 9, 10</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Describe some best practices when coding so no mistakes are made logically/syntactically. Back up your answers with some proper reasoning.</p>\n<blockquote>\n<p>描述编码时的一些最佳做法，这样就不会在逻辑 / 语法上犯错误。 用适当的理由备份您的答案。<br />\nBest practices</p>\n<ul>\n<li>Write the test before writing the implementation code<br />\n 在编写实现代码之前先编写测试</li>\n<li>Include proper naming Conventions<br />\n 包括适当的命名约定</li>\n<li>Use try / catch / finally blocks<br />\n 使用 try /catch/finally 块</li>\n<li>Close any DB connections / IO streams<br />\n 关闭所有数据库连接 / IO 流</li>\n<li>Avoid any null pointer exceptions<br />\n 避免任何空指针异常</li>\n<li>Make use of Regex<br />\n 使用正则表达式</li>\n<li>Make use of Collections<br />\n 利用 Collections</li>\n<li>Keep code clean and organized<br />\n 保持代码整洁有序</li>\n<li>Avoidance of unecessary objects<br />\n 避免不必要的对象<br />\n Best practices<br />\n•\tWrite the test before writing the implementation code<br />\n•\tInclude proper naming Conventions<br />\n•\tUse try / catch / finally blocks<br />\n•\tClose any DB connections / IO streams<br />\n•\tAvoid any null pointer exceptions<br />\n•\tMake use of Regex<br />\n•\tMake use of Collections<br />\n•\tKeep code clean and organized<br />\n•\tAvoidance of unecessary objects</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMD 510. Object-Oriented App Develop",
                "试题",
                "Java"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmd-510/week-15/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmd-510/week-15/",
            "title": "Week 15. Test-driven development(TDD)",
            "date_published": "2020-12-04T08:12:09.000Z",
            "content_html": "<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"test-driven-development-tdd\"><a class=\"anchor\" href=\"#test-driven-development-tdd\">#</a> TEST DRIVEN DEVELOPMENT (TDD)</h2>\n<h3 id=\"what\"><a class=\"anchor\" href=\"#what\">#</a> What</h3>\n<p>TDD is a tool for developers that aides in the development of high quality code.</p>\n<h3 id=\"why\"><a class=\"anchor\" href=\"#why\">#</a> Why</h3>\n<p>Benefits for new code:</p>\n<ul>\n<li>TDD encourages more thorough analysis 进行更彻底的分析</li>\n<li>TDD encourages better design 更好的设计</li>\n<li>TDD encourages more modular code 使用更多模块化代码</li>\n<li>TDD encourages more reusable code 使用更多可重用的代码</li>\n<li>TDD encourages more maintainable code 使用更具可维护性的代码</li>\n<li>TDD provides a short feedback cycle 提供了较短的反馈周期</li>\n</ul>\n<p>Benefits for existing code:</p>\n<ul>\n<li>Provides automated regression</li>\n<li>Provides automated impact analysis</li>\n<li>Reduces fear of refactoring</li>\n</ul>\n<p>Saves time!</p>\n<h3 id=\"when\"><a class=\"anchor\" href=\"#when\">#</a> When</h3>\n<ul>\n<li>New code</li>\n<li>Utility code</li>\n<li>Legacy code...sometimes<br />\nwhen time and capacity permits</li>\n</ul>\n<h2 id=\"junit\"><a class=\"anchor\" href=\"#junit\">#</a> JUnit</h2>\n<p>A tool for test-driven development</p>\n",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMD 510. Object-Oriented App Develop",
                "Java"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmd-510/week-14/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmd-510/week-14/",
            "title": "Week 14. Regular Expressions (RegEx)",
            "date_published": "2020-11-30T08:01:42.000Z",
            "content_html": "<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"regex\"><a class=\"anchor\" href=\"#regex\">#</a> Regex</h2>\n<table>\n<thead>\n<tr>\n<th>Java Subexpression</th>\n<th>Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<p><code>^</code></p>\n</td>\n<td>\n<p>Matches beginning of line.<br />\n 匹配行首。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>$</code></p>\n</td>\n<td>\n<p>Matches end of line.<br />\n 匹配行尾。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>.</code></p>\n</td>\n<td>\n<p>Matches any single character except newline. Using m option allows it to match newline as well.<br />\n 匹配除换行符以外的任何单个字符。使用 m 选项还可以使其与换行符匹配。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>[...]</code></p>\n</td>\n<td>\n<p>Matches any single character in brackets.<br />\n 匹配括号中的任何单个字符。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>[^...]</code></p>\n</td>\n<td>\n<p>Matches any single character not in brackets.<br />\n 匹配括号中没有的任何单个字符。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\A</code></p>\n</td>\n<td>\n<p>Beginning of entire string<br />\n 整个字符串的开头</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\z</code></p>\n</td>\n<td>\n<p>End of entire string<br />\n 整个字符串的结尾</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\Z</code></p>\n</td>\n<td>\n<p>End of entire string except allowable final line terminator.<br />\n 整个字符串的结尾，但允许的最后一行终止符除外。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>re*</code></p>\n</td>\n<td>\n<p>Matches 0 or more occurrences of preceding expression.<br />\n 匹配 0 个或多个出现的前一个表达式。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>re+</code></p>\n</td>\n<td>\n<p>Matches 1 or more of the previous thing.<br />\n 匹配上一项或多项。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>re?</code></p>\n</td>\n<td>\n<p>Matches 0 or 1 occurrence of preceding expression.<br />\n 匹配 0 或 1 个出现的前一个表达式。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>re&#123; n&#125;</code></p>\n</td>\n<td>\n<p>Matches exactly n number of occurrences of preceding expression.<br />\n 精确匹配前一个表达式的 n 次出现。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>re&#123; n,&#125;</code></p>\n</td>\n<td>\n<p>Matches n or more occurrences of preceding expression.<br />\n 匹配 n 个或多个出现的前一个表达式。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>re&#123; n, m&#125;</code></p>\n</td>\n<td>\n<p>Matches at least n and at most m occurrences of preceding expression.<br />\n 至少匹配 n 个并且最多匹配 m 个先前的表达式。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>a|b</code></p>\n</td>\n<td>\n<p>Matches either a or b.<br />\n 匹配 a 或 b。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\w</code></p>\n</td>\n<td>\n<p>Matches word characters.<br />\n 匹配单词字符。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\W</code></p>\n</td>\n<td>\n<p>Matches nonword characters.<br />\n 匹配非单词字符。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\s</code></p>\n</td>\n<td>\n<p>Matches whitespace. Equivalent to  <code>[\\t\\n\\r\\f]</code> .<br />\n 匹配空格。等效于 <code>[\\t\\n\\r\\f]</code> 。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\S</code></p>\n</td>\n<td>\n<p>Matches nonwhitespace.<br />\n 匹配非空格。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\d</code></p>\n</td>\n<td>\n<p>Matches digits. Equivalent to  <code>[0-9]</code> .<br />\n 匹配数字。相当于 <code>[0-9]</code> 。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\D</code></p>\n</td>\n<td>\n<p>Matches nondigits.<br />\n 匹配非数字。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\A</code></p>\n</td>\n<td>\n<p>Matches beginning of string.<br />\n 匹配字符串的开头。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\Z</code></p>\n</td>\n<td>\n<p>Matches end of string. If a newline exists, it matches just before newline.<br />\n 匹配字符串的结尾。如果存在换行符，则匹配换行符。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\z</code></p>\n</td>\n<td>\n<p>Matches end of string.<br />\n 匹配字符串的结尾。</p>\n</td>\n</tr>\n<tr>\n<td>\n<p><code>\\b</code></p>\n</td>\n<td>\n<p>Matches word boundaries when outside brackets. Matches backspace (0x08) when inside brackets.<br />\n 放在方括号内时匹配单词边界。放在方括号内时，匹配退格键（0x08）。</p>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Referece sites:<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5yZWdleHIuY29t\">http://www.regexr.com</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50dXRvcmlhbHNwb2ludC5jb20vamF2YS9qYXZhX3JlZ3VsYXJfZXhwcmVzc2lvbnMuaHRt\">http://www.tutorialspoint.com/java/java_regular_expressions.htm</span></p>\n<h3 id=\"demo\"><a class=\"anchor\" href=\"#demo\">#</a> demo</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EmailValidator.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>regex<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Matcher</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>regex<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmailValidator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// Regex pattern to valid email address</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> EMAIL_REGEX<span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token string\">\"^[\\\\w-\\\\+]+(\\\\.[\\\\w]+)*@[\\\\w-]+(\\\\.[\\\\w]+)*(\\\\.[a-z]&#123;2,&#125;)$\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//static Pattern object, since pattern is fixed</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Pattern</span> pattern<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//non-static Matcher object because it's created from the input String</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Matcher</span> matcher<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">EmailValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//initialize the Pattern object</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        pattern <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>EMAIL_REGEX<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span>CASE_INSENSITIVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * This method validates the input email address with EMAIL_REGEX pattern</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @param email</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @return boolean</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">validateEmail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        matcher <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> matcher<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EmailValidatorTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// list of valid email addresses</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> validEmailIds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>        </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token string\">\"papadev@yahoo.com\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token string\">\"papadev-100@yahoo.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev.100@yahoo.com\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token string\">\"papadev111@papadev.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev-100@papadev.net\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token string\">\"papadev.100@papadev.com.au\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev@1.com\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token string\">\"papadev@gmail.com.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev+100@gmail.com\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token string\">\"papadev-100@yahoo-test.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev_100@yahoo-test.ABC.CoM\"</span>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// list of invalid email addresses</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> invalidEmailIds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"papadev\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token string\">\"papadev@.com.my\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token string\">\"papadev123@gmail.a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev123@.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev123@.com.com\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token string\">\".papadev@papadev.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev()*@gmail.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev@%*.com\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token string\">\"papadev..2002@gmail.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev.@gmail.com\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token string\">\"papadev@papadev@gmail.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"papadev@gmail.com.1a\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">EmailValidator</span> emailValidator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre> </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        emailValidator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmailValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> temp <span class=\"token operator\">:</span> validEmailIds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">boolean</span> valid <span class=\"token operator\">=</span> emailValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validateEmail</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email ID \"</span><span class=\"token operator\">+</span>temp<span class=\"token operator\">+</span><span class=\"token string\">\" is valid? \"</span> <span class=\"token operator\">+</span> valid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> temp <span class=\"token operator\">:</span> invalidEmailIds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">boolean</span> valid <span class=\"token operator\">=</span> emailValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validateEmail</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Email ID \"</span><span class=\"token operator\">+</span>temp<span class=\"token operator\">+</span><span class=\"token string\">\" is valid? \"</span> <span class=\"token operator\">+</span> valid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>Email ID papadev@yahoo.com is valid? true\nEmail ID papadev-100@yahoo.com is valid? true\nEmail ID papadev.100@yahoo.com is valid? true\nEmail ID papadev111@papadev.com is valid? true\nEmail ID papadev-100@papadev.net is valid? true\nEmail ID papadev.100@papadev.com.au is valid? true\nEmail ID papadev@1.com is valid? true\nEmail ID papadev@gmail.com.com is valid? true\nEmail ID papadev+100@gmail.com is valid? true\nEmail ID papadev-100@yahoo-test.com is valid? true\nEmail ID papadev_100@yahoo-test.ABC.CoM is valid? true\n \nEmail ID papadev is valid? false\nEmail ID papadev@.com.my is valid? false\nEmail ID papadev123@gmail.a is valid? false\nEmail ID papadev123@.com is valid? false\nEmail ID papadev123@.com.com is valid? false\nEmail ID .papadev@papadev.com is valid? false\nEmail ID papadev()*@gmail.com is valid? false\nEmail ID papadev@%*.com is valid? false\nEmail ID papadev..2002@gmail.com is valid? false\nEmail ID papadev.@gmail.com is valid? false\nEmail ID papadev@papadev@gmail.com is valid? false\nEmail ID papadev@gmail.com.1a is valid? false\n</code></pre>\n<h1 id=\"review\"><a class=\"anchor\" href=\"#review\">#</a> Review</h1>\n<p>Regular Expressions (RegEx) - For text searching &amp; manipulation</p>\n<p>Set up a patten to match given tasks for given strings below.</p>\n<table>\n<thead>\n<tr>\n<th>String/phrase</th>\n<th>Task</th>\n<th>Your Pattern</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;cat cat cat cattie cat&quot;</td>\n<td>Find Cat occurrences</td>\n<td><code>&quot;\\\\bcat\\\\b&quot;</code>  note use of the added ( \\ ) character used as an escape sequence</td>\n</tr>\n<tr>\n<td>doggy</td>\n<td>Find dog</td>\n<td><code>dog</code></td>\n</tr>\n<tr>\n<td>Apple123</td>\n<td>Must start with Apple</td>\n<td><code>[Apple].*</code></td>\n</tr>\n<tr>\n<td>Apple123</td>\n<td>Must NOT start with Apple</td>\n<td><code>[^Apple].*</code></td>\n</tr>\n<tr>\n<td>Apple123</td>\n<td>Must start with Apple or apple</td>\n<td><code>[Apple|apple].*</code></td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMD 510. Object-Oriented App Develop",
                "Java"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmd-510/week-13/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmd-510/week-13/",
            "title": "Week 13. Object Serialization, Network Programming",
            "date_published": "2020-11-23T11:51:29.000Z",
            "content_html": "<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"object-serialization\"><a class=\"anchor\" href=\"#object-serialization\">#</a> Object Serialization</h2>\n<h3 id=\"serialize\"><a class=\"anchor\" href=\"#serialize\">#</a> serialize</h3>\n<p>If an object contains other types of objects as fields, saving its contents can be complicated.<br />\n 如果对象包含其他类型的对象作为字段，则保存其内容可能会很复杂。</p>\n<p>Java allows you to <strong>serialize</strong> objects, which is a simpler way of saving objects to a file.<br />\nJava 允许您序列化对象，这是将对象保存到文件的一种更简单的方法。</p>\n<p>When an object is serialized, it is converted into a series of bytes that contain the object’s data.<br />\n 序列化对象时，会将其转换为包含该对象数据的一系列字节。</p>\n<p>If the object is set up properly, even the other objects that it might contain as fields are automatically serialized.<br />\n 如果对象设置正确，则甚至可能包含其作为字段的其他对象也会自动序列化。</p>\n<p>The resulting set of bytes can be saved to a file for later retrieval.<br />\n 可以将结果字节集保存到文件中以供以后检索。</p>\n<p>For an object to be serialized, its class must implement the  <code>Serializable</code>  interface.<br />\n 对于要序列化的对象，其类必须实现 <code>Serializable</code>  接口。</p>\n<p>The  <code>Serializable</code>  interface has no methods or fields.<br />\n <code>Serializable</code>  接口没有方法或字段。</p>\n<p>It is used only to let the Java compiler know that objects of the class might be serialized.<br />\n 它仅用于让 Java 编译器知道该类的对象可能已序列化。</p>\n<p>If a class contains objects of other classes as fields, those classes must also implement the  <code>Serializable</code>  interface, in order to be serialized.<br />\n 如果一个类包含其他类的对象作为字段，则这些类还必须实现 <code>Serializable</code>  接口才能进行序列化。</p>\n<p>The  <code>String</code>  class, as many others in the Java API, implements the  <code>Serializable</code>  interface.<br />\n 与 Java API 中的许多其他类一样， <code>String</code>  类实现了 <code>Serializable</code>  接口。</p>\n<p>To write a serialized object to a file, you use an  <code>ObjectOutputStream</code>  object.<br />\n 要将序列化的对象写入文件，请使用 <code>ObjectOutputStream</code>  对象。</p>\n<p>The  <code>ObjectOutputStream</code>  class is designed to perform the serialization process.<br />\n <code>ObjectOutputStream</code>  类旨在执行序列化过程。</p>\n<p>To write the bytes to a file, an output stream object is needed.<br />\n 要将字节写入文件，需要一个输出流对象。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileOutputStream</span> outStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Objects.dat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ObjectOutputStream</span> objectOutputFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>outStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>To serialize an object and write it to the file, the  <code>ObjectOutputStream</code>  class's  <code>writeObject</code>  method is used.<br />\n 序列化对象并将其写入文件</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">InventoryItem2</span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InventoryItem2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrench\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>objectOutputFile<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>The  <code>writeObject</code>  method throws an  <code>IOException</code>  if an error occurs.</p>\n<h3 id=\"deserialization\"><a class=\"anchor\" href=\"#deserialization\">#</a> deserialization</h3>\n<p>The process of reading a serialized object's bytes and constructing an object from them is known as <strong>deserialization</strong>.<br />\n 读取序列化对象的字节并从中构造对象的过程称为反序列化。</p>\n<p>To desrialize an object an  <code>ObjectInputStream</code>  object is used in conjunction with a  <code>FileInputStream</code>  object.<br />\n 对对象进行反序列化</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> inStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Objects.dat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ObjectInputStream</span> objectInputFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>inStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>To read a serialized object from the file, the  <code>ObjectInputStream</code>  class's  <code>readObject</code>  method is used.<br />\n 从文件读取序列化的对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">InventoryItem2</span> item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>item <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InventoryItem2</span><span class=\"token punctuation\">)</span> objectInputFile<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>The  <code>readObject</code>  method returns the deserialized object.</p>\n<blockquote>\n<p>Notice that you must cast the return value to the desired class type.</p>\n</blockquote>\n<p>The  <code>readObject</code>  method throws a number of different exceptions if an error occurs.</p>\n<h3 id=\"demo\"><a class=\"anchor\" href=\"#demo\">#</a> demo</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Employee.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">int</span> SSN<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mailCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mailing a check to \"</span> <span class=\"token operator\">+</span> name</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SerializeDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SerializeDemo</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">Employee</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\te<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"James Papademas\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\te<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> <span class=\"token string\">\"3300 S. Federal\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\te<span class=\"token punctuation\">.</span>SSN <span class=\"token operator\">=</span> <span class=\"token number\">11122333</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\te<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token class-name\">FileOutputStream</span> fileOut <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employee.ser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token class-name\">ObjectOutputStream</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>fileOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tout<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\tout<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\tfileOut<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Serialized data is saved as employee.ser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\ti<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DeserializeDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//import java.io.*;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeserializeDemo</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token class-name\">Employee</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token class-name\">FileInputStream</span> fileIn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employee.ser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token class-name\">ObjectInputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>fileIn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\te <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">)</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\tin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tfileIn<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\ti<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Employee class not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deserialized Employee...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Address: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SSN: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>SSN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"network-programming\"><a class=\"anchor\" href=\"#network-programming\">#</a> Network Programming</h2>\n<h3 id=\"network-layers\"><a class=\"anchor\" href=\"#network-layers\">#</a> Network Layers</h3>\n<ul>\n<li>Application Level<br />\n(FTP, Telnet, etc.)</li>\n<li>Transport Layer<br />\n(TCP, UDP, sockets, etc.)</li>\n<li>Network Layer<br />\n(Low-level Protocol -- IP, datagrams, etc.)</li>\n<li>Hardware Layer<br />\n(Ethernet, TokenRing, X.25, etc.)</li>\n</ul>\n<hr />\n<ul>\n<li>\n<p>headers: <span class=\"exturl\" data-url=\"aHR0cDovL25tYXAub3JnL2Jvb2svdGNwaXAtcmVmLmh0bWw=\">http://nmap.org/book/tcpip-ref.html</span></p>\n</li>\n<li>\n<p>ports: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy9zZXJ2aWNlLW5hbWVzLXBvcnQtbnVtYmVycy9zZXJ2aWNlLW5hbWVzLXBvcnQtbnVtYmVycy54aHRtbA==\">http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml</span></p>\n</li>\n<li>\n<p>Sample Http Error Codes: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53M3NjaG9vbHMuY29tL3RhZ3MvcmVmX2h0dHBtZXNzYWdlcy5hc3A=\">http://www.w3schools.com/tags/ref_httpmessages.asp</span></p>\n</li>\n</ul>\n<h3 id=\"networking-in-java\"><a class=\"anchor\" href=\"#networking-in-java\">#</a> Networking in Java</h3>\n<p>The  <code>java.net</code>  package contains classes and interfaces that provide a powerful infrastructure for networking in Java.</p>\n<p>Today, we see how networking in Java works.</p>\n<p>We will check out the following: Load a document from the web</p>\n<ol>\n<li>Some packaged classes</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnsupportedEncodingException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MalformedURLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URISyntaxException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span>URL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URLConnection</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>Constructing  <code>URL</code>  Objects</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">URL</span> u <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.iit.edu/Sp18/grad.html#itm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MalformedURLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"http\"><a class=\"anchor\" href=\"#http\">#</a> HTTP</h3>\n<p>Web browsers communicate with web servers through a standard protocol known as HTTP, an acronym for HyperText Transfer Protocol.<br />\nThis protocol defines</p>\n<ul>\n<li>how a browser requests a file from a web server</li>\n<li>how a browser sends additional data along with the request (e.g. the data formats it can accept),</li>\n<li>how the server sends data back to the client</li>\n<li>response codes</li>\n</ul>\n<p>Query Strings</p>\n<ul>\n<li>CGI GET data is sent in URL encoded query strings</li>\n<li>a query string is a set of  <code>name=value</code>  pairs separated by ampersands<br />\n <code>Author=Sadie, Julie&amp;Title=Women Composers</code></li>\n<li>separated from rest of URL by a question mark</li>\n</ul>\n<h3 id=\"demo-2\"><a class=\"anchor\" href=\"#demo-2\">#</a> demo</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>NetTest.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrintStream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnsupportedEncodingException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MalformedURLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URISyntaxException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span>URL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URLConnection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NetTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnsupportedEncodingException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">URISyntaxException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">//https://www.quandl.com/tools/api</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token class-name\">StringBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t\t<span class=\"token string\">\"https://www.quandl.com/api/v1/datasets/WIKI/AAPL.csv?\"</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\t\t<span class=\"token string\">\"column=2&amp;sort_order=asc&amp;collapse=quarterly&amp;trim_start=2012-01-01&amp;trim_end=2013-12-31\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token class-name\">URLConnection</span> conn <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">openConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token class-name\">InputStreamReader</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token class-name\">BufferedReader</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//String splitter[] = line.split(\",\"); //parse &amp; present data option</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\tbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\tbuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MalformedURLException</span> mue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad URL: \"</span> <span class=\"token operator\">+</span> mue<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> ioe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IO Error:\"</span> <span class=\"token operator\">+</span> ioe<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>NetW.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrintStream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NetW</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token class-name\">InetAddress</span> me <span class=\"token operator\">=</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token class-name\">PrintStream</span> o <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\to<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost by name =\"</span> <span class=\"token operator\">+</span> me <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token class-name\">InetAddress</span> me2 <span class=\"token operator\">=</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLocalHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\to<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost by getLocalHost =\"</span> <span class=\"token operator\">+</span> me2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> many <span class=\"token operator\">=</span> <span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAllByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"microsoft.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>many<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\to<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> many<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMD 510. Object-Oriented App Develop",
                "Java"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmd-534/final-project/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmd-534/final-project/",
            "title": "Final Project",
            "date_published": "2020-11-18T05:32:26.000Z",
            "content_html": "<p>To start the design process for your final project you may follow the steps below:</p>\n<ol>\n<li>\n<p>Define tasks to be accomplished by your product. If you are a team of 5 – you will define 5 individual goals. If 3 then 3 goals. Each task to accomplish your goals has to be fairly complex – about 10 steps.<br />\n 定义产品要完成的任务。如果您是 5 人组成的团队，则将定义 5 个独立目标。如果 3 则 3 个目标。完成目标的每个任务都必须相当复杂 - 大约 10 个步骤。</p>\n</li>\n<li>\n<p>Identify an existing product that could be used to accomplish a similar goal as chosen in step 1. You can choose a different existing product for each of the goal in step1.<br />\n 标识可用于实现与步骤 1 中选择的目标相似的现有产品。您可以在步骤 1 中为每个目标选择不同的现有产品。</p>\n</li>\n<li>\n<p>Each group member should pick one goal and perform a contextual inquiry (CI) selecting two users for the task. Select the user who is most likely to use your product.<br />\n 每个小组成员应选择一个目标并执行 CI，为任务选择两个用户。选择最有可能使用您的产品的用户。</p>\n</li>\n<li>\n<p>Each group member should make clear and complete report of the product chosen, the CI and the detailed tasks and scripts that they have created.<br />\n 每个小组成员应清楚，完整地报告所选产品，CI 以及他们创建的详细任务和脚本。</p>\n</li>\n<li>\n<p>Each group member should document in details the response received from the user interview during the CI.<br />\n 每个小组成员应详细记录，在 CI 期间从用户访谈中收到的答复。</p>\n</li>\n<li>\n<p>Each group member should run a Heuristic Evaluation (HE) of the existing interface using the goal they have chosen.<br />\n 每个小组成员应使用他们选择的目标，对现有界面进行启发式评估（HE）。</p>\n</li>\n<li>\n<p>Once the CI data is obtained and the HE information is documented – the group members should consolidate the information as a team and draw up an Affinity Diagram if necessary (this diagram is optional). An integration of the various tasks is required at this step. Group members should get together and decide on the modification needed for the tasks to be performed on the new design. Group members should brainstorm ideas for final design.<br />\n 一旦获取了 CI 数据并记录了 HE 信息–小组成员应将信息作为一个团队进行合并，并在必要时绘制一个亲和图（此图是可选的）。在此步骤中，需要整合各种任务。小组成员应该聚在一起，并决定要在新设计上执行的任务所需的修改。小组成员应集思广益，以进行最终设计。</p>\n</li>\n<li>\n<p>Each group member should draw a Flow diagram for their task and document this as part of the project documentation.<br />\n 每个小组成员应为其任务绘制流程图，并将其记录为项目文档的一部分。</p>\n</li>\n<li>\n<p>Group members as a team should design a User Interface which would help accomplish all the tasks.<br />\n 小组成员应以团队为单位设计用户界面，以帮助完成所有任务。</p>\n</li>\n<li>\n<p>Group members as a team should draw sketches and build a low fidelity prototype for the interface. This interface will be for the new design and it needs to start from a single top level UI and branch out to individual screens for separate tasks. As the UI screens branch out – each member responsible for the specific task will need to design that branch of the UI.<br />\n 小组成员应以团队为基础绘制草图，并构建低保真度的原型。该界面将用于新设计，它需要从单个顶级 UI 开始，并分支到单独的屏幕以执行单独的任务。当 UI 屏幕分支出来时 - 负责特定任务的每个成员都需要设计 UI 的分支。</p>\n</li>\n<li>\n<p>After the design is done and a low fidelity prototype is prepared – each group member should run HE on the new design using goals of another member of the group. Iterate this HE process at least 2 times to refine the design.<br />\n 完成设计并准备好低保真原型后–每个小组成员均应使用小组另一成员的目标，对新设计运行 HE。至少重复此 HE 过程 2 次以完善设计。</p>\n</li>\n<li>\n<p>Each group member should take the low fidelity prototype back to their users and perform CI for their task on the new design.<br />\n 每个小组成员都应将低保真度的原型带回用户手中，并对新设计的任务执行 CI。</p>\n</li>\n<li>\n<p>Document these inquiries and HE as part of the project documentation.<br />\n 将这些 CI 和 HE 记录为项目文档的一部分。</p>\n</li>\n<li>\n<p>Finally group members jointly build the final prototype with any tool they are comfortable with. Power Point is the suggested tool for building the finished prototype.<br />\n 最终小组成员使用他们愿意使用的任何工具，共同构建最终原型。 Power Point 是用于构建最终原型的建议工具。</p>\n</li>\n<li>\n<p>Prepare the final project documentation for submission with separate slide presentation to be presented in the class.<br />\n 准备要提交的最终项目文档，并带有单独的幻灯片演示文稿，以在课堂上介绍。</p>\n</li>\n<li>\n<p>Submit all CI and HE documentation in PDF format along with the final presentation.<br />\n 以 PDF 格式提交所有 CI 和 HE 文档以及最终演示文稿。</p>\n</li>\n<li>\n<p>The slide presentation has to be made with audio. Group members will all contribute to make of the slide presentation and can choose one member to provide the narration on the slides. Below is a link to prepare slide presentation with audio using PowerPoint:<br />\n 幻灯片演示必须带有音频。小组成员都将为幻灯片演示做出贡献，并且可以选择一名成员在幻灯片上提供旁白。以下是使用 PowerPoint 准备带音频的幻灯片演示文稿的链接：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBwb3J0Lm9mZmljZS5jb20vZW4tbnovYXJ0aWNsZS9SZWNvcmQtYS1zbGlkZS1zaG93LXdpdGgtbmFycmF0aW9uLWluay1hbmQtc2xpZGUtdGltaW5ncy0zZGM4NTAwMS1lZmFiLTRmOGEtOTRiZi1hZmRjNWI3YzFmMGI/dWk9ZW4tVVMmYW1wO3JzPWVuLU5aJmFtcDthZD1OWg==\">https://support.office.com/en-nz/article/Record-a-slide-show-with-narration-ink-and-slide-timings-3dc85001-efab-4f8a-94bf-afdc5b7c1f0b?ui=en-US&amp;rs=en-NZ&amp;ad=NZ</span></p>\n</li>\n</ol>\n<h1 id=\"clarification-on-the-sequence-of-ci-and-he\"><a class=\"anchor\" href=\"#clarification-on-the-sequence-of-ci-and-he\">#</a> Clarification on the sequence of CI and HE</h1>\n<p>明确 CI 和 HE 的顺序</p>\n<p><strong>Before designing your interface</strong><br />\n 设计界面之前</p>\n<ol>\n<li>Perform CI on existing interface to generate requirements for design/redesign - using your goal<br />\n 使用目标在现有接口上执行配置项以生成设计 / 重新设计要求</li>\n<li>Perform HE on the existing interface - use the interface portion related to your goal<br />\n 在现有界面上执行 HE - 使用与您的目标相关的界面部分</li>\n</ol>\n<p><strong>After designing your interface</strong><br />\n 设计界面之后</p>\n<ol start=\"3\">\n<li>Perform CI on the new design prototype that you created - using your goal<br />\n 使用您的目标对您创建的新设计原型执行 CI</li>\n<li>Perform HE on the new design - use the interface portion of another team member.<br />\n 对新设计执行 HE - 使用另一个团队成员的界面部分。</li>\n</ol>\n<h1 id=\"final-presentation-slides\"><a class=\"anchor\" href=\"#final-presentation-slides\">#</a> Final presentation Slides</h1>\n<p>Each team will give a short PowerPoint presentation (10-15 min long) covering the following:<br />\n 每个小组将作一个简短的 PowerPoint 演示文稿（长 10-15 分钟），内容如下：</p>\n<ul>\n<li>Who is your team<br />\n 你的团队是谁</li>\n<li>What is your product<br />\n 您的产品是什么</li>\n<li>How did you come up with this idea<br />\n 您是如何提出这个想法的</li>\n<li>What is the business need<br />\n 业务需求是什么</li>\n<li>How is your product different from competitors<br />\n 您的产品与竞争对手有何不同</li>\n<li>Narration of the functioning of your product<br />\n 产品功能的叙述</li>\n</ul>\n<p>The final presentation slides must include story board or other illustrations showing how the product functions. Each group member must work on the presentation and may select on representative for the group to narrate on the slide presentation.<br />\n 最终的演示幻灯片必须包括故事板或其他说明产品功能的插图。 每个小组成员都必须参与演示，并可以选择代表作为小组成员来演示幻灯片演示。</p>\n<p>Online students should mail in the narration enhanced Power Point slides to be played during the final presentation day in class. Students who will be present in class on the final presentation day will get to grade each presentation.</p>\n<h1 id=\"final-project-presentation-grading\"><a class=\"anchor\" href=\"#final-project-presentation-grading\">#</a> Final Project Presentation Grading</h1>\n<h2 id=\"presentation-of-information-25\"><a class=\"anchor\" href=\"#presentation-of-information-25\">#</a> Presentation of Information 25</h2>\n<p>信息介绍</p>\n<ol>\n<li>Story of work: statement of goals/purpose, faming/context of work, structure/flow<br />\n 工作经历：目标 / 目的的陈述，工作的名称 / 背景，结构 / 流程</li>\n<li>Appeal/appearance: graphics, text balance/quantity, quality of multimedia (not blurry or hard to hear), quality of results charts and graphs<br />\n 外观 / 外观：图形，文本平衡 / 数量，多媒体质量（不模糊或不易听到），结果图表和图形的质量</li>\n<li>Speaker skill: loudness level, speaking rate, confidence, enthusiasm/interest<br />\n 演讲者技能：响度，说话率，信心，热情 / 兴趣</li>\n</ol>\n<h2 id=\"discussion-of-user-requirements-35\"><a class=\"anchor\" href=\"#discussion-of-user-requirements-35\">#</a> Discussion of User Requirements: 35</h2>\n<p>用户需求讨论</p>\n<ol>\n<li>Description of users: methods for identifying who, demographics and other characteristics<br />\n 用户描述：识别谁，人口统计特征和其他特征的方法</li>\n<li>Description of tasks/context of use: methods for identifying tasks/contexts, characteristics<br />\n 任务 / 使用背景说明：确定任务 / 使用背景，特征的方法</li>\n<li>Review of competitive analysis or other analysis of related solutions<br />\n 审查竞争分析或其他有关解决方案的分析</li>\n<li>Description of design requirements: mapping to identified needs, specific criteria/features/attributes, and their purpose, use cases<br />\n 设计要求的描述：映射到已识别的需求，特定的标准 / 功能 / 属性及其目的，用例</li>\n</ol>\n<h2 id=\"discussion-of-user-interface-40\"><a class=\"anchor\" href=\"#discussion-of-user-interface-40\">#</a> Discussion of User Interface: 40</h2>\n<p>用户界面讨论</p>\n<ol>\n<li>Description of implementation of user requirements: show the connection between identified requirements and features included in the design, steps or stages for implementing (including outside help, specific resource needs)<br />\n 用户需求的实现描述：显示已确定的需求与设计，实现的步骤或阶段（包括外部帮助，特定资源需求）中包含的功能之间的联系</li>\n<li>Implementation quality: clarity of approach, accessibility of design (are certain users excluded?), information architecture, integration of and conformance with effective design principles, quality of UI demo (video/audio, realtime, screenshots)<br />\n 实施质量：方法的清晰性，设计的可访问性（某些用户是否被排除在外？），信息体系结构，有效的设计原则的集成和一致性，UI 演示的质量（视频 / 音频，实时，屏幕截图）</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMD 534. Human Computer Interaction",
                "人机交互"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmd-510/week-12/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmd-510/week-12/",
            "title": "Week 12. JavaFx",
            "date_published": "2020-11-13T14:51:29.000Z",
            "content_html": "<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"getting-started-with-fx\"><a class=\"anchor\" href=\"#getting-started-with-fx\">#</a> Getting started with FX</h2>\n<p>The  <code>start</code>  method is the <ins>heart</ins> of any JavaFX application.<br />\nThe method is called when the application is loaded, and a reference to the application's primary <span class=\"red\">Stage</span> is passed as a parameter.<br />\nThe start method creates the <span class=\"red\">Scene</span> object and displays it in the stage.<br />\nPictoral shown below.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stage</span> primaryStage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Group</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Scene</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    primaryStage<span class=\"token punctuation\">.</span><span class=\"token function\">setScene</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    primaryStage<span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The Click Me App\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    primaryStage<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://i.loli.net/2020/12/05/uVzWraG12Rgflm4.png\" alt=\"1.png\" /></p>\n<h2 id=\"scenebuilder\"><a class=\"anchor\" href=\"#scenebuilder\">#</a> Scenebuilder</h2>\n<p>JavaFX Scene Builder is a visual layout tool that lets users quickly design JavaFX application user interfaces, without coding.</p>\n<p>Users can <strong>drag and drop</strong> UI components to a work area, modify their properties, apply style sheets, and the FXML code for the layout that they are creating is automatically generated in the background! The result is an FXML file that can then be combined with a Java project by binding the UI to the application's logic.</p>\n<ol>\n<li>Download the latest scenebuilder for your OS at <span class=\"exturl\" data-url=\"aHR0cDovL2dsdW9uaHEuY29tL3Byb2R1Y3RzL3NjZW5lLWJ1aWxkZXIv\">http://gluonhq.com/products/scene-builder/</span></li>\n<li>Install scenebuilder in your OS. Remember the <ins>path</ins> where you install it at.</li>\n<li>Lastly set your path in Eclipse under Preferences, so you can drag and drop and view your UI components from within Eclipse.<br />\nTo set your path, do the following depending on your OS.<br />\nSet the SceneBuilder executable path in Eclipse as follows:</li>\n<li>(Windows) Window -&gt; Preferences -&gt; JavaFX. For the (Mac) Eclipse -&gt; Preferences… -&gt; JavaFX</li>\n<li>Click &quot;Browse&quot; and navigate to your bash file (linux) or where the  <code>SceneBuilder.exe</code>  (windows) is or for (Mac)  <code>SceneBuilder.app</code> , which is most likely in your Applications folder, and choose your file and click Apply and Close to finish.</li>\n</ol>\n<p>Now when you add any FXML file to your app (File &gt; New &gt; Other &gt; JavaFX &gt; New FXML Document) you can open the file up in Scene Builder by right clicking your FXML file and choose Scene Builder to open the file for creating / editing / viewing!</p>\n<p><img data-src=\"https://i.loli.net/2020/12/05/vJUeR4ZGB1cMYQX.png\" alt=\"2.png\" /></p>\n<h2 id=\"basic-layout-panes\"><a class=\"anchor\" href=\"#basic-layout-panes\">#</a> Basic Layout panes</h2>\n<p>Layout panes in JavaFX let you manage the placement controls and shapes that appear in your scenes. Don't forget that a layout pane is itself a node, so you can nest layout panes within other layout panes to create complicated layouts.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>HBox</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">HBox</span> hbox1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HBox</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// sets initial spacing</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hbox1<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>btn1<span class=\"token punctuation\">,</span> btn2<span class=\"token punctuation\">,</span> btn3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hbox1<span class=\"token punctuation\">.</span><span class=\"token function\">setAlignment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pos</span><span class=\"token punctuation\">.</span>CENTER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hbox1<span class=\"token punctuation\">.</span><span class=\"token function\">setPadding</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Insets</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hbox1<span class=\"token punctuation\">.</span><span class=\"token function\">setSpacing</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>VBox</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">VBox</span> vbox1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VBox</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// sets initial spacing</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vbox1<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>btn1<span class=\"token punctuation\">,</span> btn2<span class=\"token punctuation\">,</span> btn3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vbox1<span class=\"token punctuation\">.</span><span class=\"token function\">setAlignment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pos</span><span class=\"token punctuation\">.</span>CENTER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vbox1<span class=\"token punctuation\">.</span><span class=\"token function\">setPadding</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Insets</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>vbox1<span class=\"token punctuation\">.</span><span class=\"token function\">setSpacing</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>FlowPane</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FlowPane</span> flow1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlowPane</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>flow1<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>btn1<span class=\"token punctuation\">,</span> btn2<span class=\"token punctuation\">,</span> btn3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>flow1<span class=\"token punctuation\">.</span><span class=\"token function\">setAlignment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Pos</span><span class=\"token punctuation\">.</span>CENTER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>flow1<span class=\"token punctuation\">.</span><span class=\"token function\">setOrientation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Orientation</span><span class=\"token punctuation\">.</span>VERTICAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>flow1<span class=\"token punctuation\">.</span><span class=\"token function\">setVgap</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>flow1<span class=\"token punctuation\">.</span><span class=\"token function\">setHgap</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>flow1<span class=\"token punctuation\">.</span><span class=\"token function\">setPrefWrapLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BorderPane</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">BorderPane</span> border1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BorderPane</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>border1<span class=\"token punctuation\">.</span><span class=\"token function\">setCenter</span><span class=\"token punctuation\">(</span>btn1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>border1<span class=\"token punctuation\">.</span><span class=\"token function\">setTop</span><span class=\"token punctuation\">(</span>btn2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>border1<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>btn3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>border1<span class=\"token punctuation\">.</span><span class=\"token function\">setBottom</span><span class=\"token punctuation\">(</span>btn4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>border1<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>btn5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"basic-controls\"><a class=\"anchor\" href=\"#basic-controls\">#</a> Basic Controls</h2>\n<p>JavaFX defines a plethora of controls that you use to interact with the user. The most commonly used are Label, Button, TextField, CheckBox, and RadioButton.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Label</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Label</span> lbl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a label\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Button</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Button</span> btn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Click Me!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Click\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>TextField</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">TextField</span> txtInput <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Prompt Text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> input <span class=\"token operator\">=</span> txtInput<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>CheckBox</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">CheckBox</span> chkOption <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CheckBox</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Check Box Text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chkOption<span class=\"token punctuation\">.</span><span class=\"token function\">isSelected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Option is selected\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>RadioButton (with ToggleGroup)</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">RadioButton</span> rdo1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RadioButton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Option 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">RadioButton</span> rdo2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RadioButton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Option 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rdo1<span class=\"token punctuation\">.</span><span class=\"token function\">setSelected</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">ToggleGroup</span> options <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ToggleGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>options<span class=\"token punctuation\">.</span><span class=\"token function\">getToggles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>rdo1<span class=\"token punctuation\">,</span> rdo2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rdo1<span class=\"token punctuation\">.</span><span class=\"token function\">isSelected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Option 1 is selected\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"demo\"><a class=\"anchor\" href=\"#demo\">#</a> Demo</h2>\n<h3 id=\"switch\"><a class=\"anchor\" href=\"#switch\">#</a> Switch</h3>\n<p>uses lambda functions to trigger events.<br />\nTrigger app from  <code>TwoScene.java</code>  file.<br />\nIncludes programmatic CSS features and lambda functions.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>TwoScene.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ActionEvent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scene</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Label</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FlowPane</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Modality</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stage</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TwoScene</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token class-name\">Button</span> btnscene1<span class=\"token punctuation\">,</span> btnscene2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token class-name\">Label</span> lblscene1<span class=\"token punctuation\">,</span> lblscene2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token class-name\">FlowPane</span> pane1<span class=\"token punctuation\">,</span> pane2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token class-name\">Scene</span> scene1<span class=\"token punctuation\">,</span> scene2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token class-name\">Stage</span> thestage<span class=\"token punctuation\">,</span> stage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stage</span> primaryStage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// thestage=primaryStage;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">// can now use the stage in other methods</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// make things to put on panes</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tbtnscene1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Click to go to Other Scene\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tbtnscene2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Click to go back to First Scene\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">// btnscene1.setStyle(\"-fx-font: 24 arial;\");</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tbtnscene1<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> <span class=\"token class-name\">ButtonClicked</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tbtnscene2<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> <span class=\"token class-name\">ButtonClicked</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tlblscene1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Scene 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tlblscene2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Scene 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// make 2 Panes</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tpane1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlowPane</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tpane2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlowPane</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tpane1<span class=\"token punctuation\">.</span><span class=\"token function\">setVgap</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tpane2<span class=\"token punctuation\">.</span><span class=\"token function\">setVgap</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token comment\">// set background color of each Pane</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tpane1<span class=\"token punctuation\">.</span><span class=\"token function\">setStyle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-fx-background-color: tan;-fx-padding: 10px;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tpane2<span class=\"token punctuation\">.</span><span class=\"token function\">setStyle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-fx-background-color: red;-fx-padding: 10px;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">// add everything to panes</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tpane1<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>lblscene1<span class=\"token punctuation\">,</span> btnscene1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\tpane2<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>lblscene2<span class=\"token punctuation\">,</span> btnscene2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token comment\">// make 2 scenes from 2 panes</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tscene1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">(</span>pane1<span class=\"token punctuation\">,</span> <span class=\"token number\">225</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tscene2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">(</span>pane2<span class=\"token punctuation\">,</span> <span class=\"token number\">225</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tstage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">setScene</span><span class=\"token punctuation\">(</span>scene2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">initModality</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Modality</span><span class=\"token punctuation\">.</span>APPLICATION_MODAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tprimaryStage<span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tprimaryStage<span class=\"token punctuation\">.</span><span class=\"token function\">setScene</span><span class=\"token punctuation\">(</span>scene1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tprimaryStage<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">ButtonClicked</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> btnscene2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">showAndWait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token comment\">/* alt. coding</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t * if (e.getSource()==btnscene1) thestage.setScene(scene2); else</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t * thestage.setScene(scene1);</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"login\"><a class=\"anchor\" href=\"#login\">#</a> Login</h3>\n<p>jump from scene to scene upon a successful login.<br />\nIncludes Button UI event.<br />\nTrigger  <code>LoginDemoApplication.java</code>  file.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LoginDemoApplication.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">login</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scene</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stage</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">login<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoginManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/** Main application class for the login demo application */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginDemoApplication</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stage</span> stage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">Scene</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StackPane</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">LoginManager</span> loginManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LoginManager</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    loginManager<span class=\"token punctuation\">.</span><span class=\"token function\">showLoginScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    stage<span class=\"token punctuation\">.</span><span class=\"token function\">setScene</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    stage<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LoginManager.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">login</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>fxml<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FXMLLoader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Parent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scene</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/** Manages control flow for logins */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginManager</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Scene</span> scene<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">LoginManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Scene</span> scene<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scene <span class=\"token operator\">=</span> scene<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t * Callback method invoked to notify that a user has been authenticated. Will</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t * show the main application screen.</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sessionID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">showMainView</span><span class=\"token punctuation\">(</span>sessionID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t * Callback method invoked to notify that a user has logged out of the main</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t * application. Will show the login application screen.</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token function\">showLoginScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showLoginScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token class-name\">FXMLLoader</span> loader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FXMLLoader</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login.fxml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\tscene<span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Parent</span><span class=\"token punctuation\">)</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token class-name\">LoginController</span> controller <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">getController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\tcontroller<span class=\"token punctuation\">.</span><span class=\"token function\">initManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showMainView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sessionID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token class-name\">FXMLLoader</span> loader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FXMLLoader</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mainview.fxml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\tscene<span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Parent</span><span class=\"token punctuation\">)</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t<span class=\"token class-name\">MainViewController</span> controller <span class=\"token operator\">=</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">getController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\tcontroller<span class=\"token punctuation\">.</span><span class=\"token function\">initSessionID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> sessionID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\tex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LoginController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">login</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>fxml<span class=\"token punctuation\">.</span></span>FXML<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/** Controls the login screen */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">TextField</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">TextField</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Button</span> loginButton<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">// public void initialize() &#123;&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">LoginManager</span> loginManager<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t   loginButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t    \t  <span class=\"token class-name\">String</span> sessionID <span class=\"token operator\">=</span> <span class=\"token function\">authorize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sessionID <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t            loginManager<span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span>sessionID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   * Check authorization credentials.</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   * </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   * If accepted, return a sessionID for the authorized session</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   * otherwise, return null.</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   */</span>   </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">authorize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token string\">\"open\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"sesame\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token operator\">?</span> <span class=\"token function\">generateSessionID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> sessionID <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">generateSessionID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    sessionID<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"xyzzy - session \"</span> <span class=\"token operator\">+</span> sessionID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MainViewController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">login</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>fxml<span class=\"token punctuation\">.</span></span>FXML<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Label</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/** Controls the main application screen */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainViewController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Button</span> logoutButton<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Label</span>  sessionLabel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initSessionID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">LoginManager</span> loginManager<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> sessionID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t sessionLabel<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>sessionID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     logoutButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>loginManager<span class=\"token punctuation\">.</span><span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>login.fxml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token prolog\">&lt;?import java.lang.*?></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token prolog\">&lt;?import java.util.*?></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.geometry.*?></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.control.*?></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.layout.*?></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.paint.*?></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>StackPane</span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>231.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>fx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://javafx.com/fxml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>controller</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login.LoginController<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>StackPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>VBox</span> <span class=\"token attr-name\">spacing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>GridPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Label</span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Username:<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.columnIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.rowIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Label</span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Password:<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.columnIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.rowIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextField</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">promptText</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Use <span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span>open<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span> to login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>open<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.columnIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.rowIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextField</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">promptText</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Use <span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span>sesame<span class=\"token entity named-entity\" title=\"&quot;\">&amp;quot;</span> to login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sesame<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.columnIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.rowIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>columnConstraints</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ColumnConstraints</span> <span class=\"token attr-name\">hgrow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SOMETIMES<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maxWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>148.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>109.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ColumnConstraints</span> <span class=\"token attr-name\">hgrow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SOMETIMES<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maxWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>228.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>189.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>columnConstraints</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rowConstraints</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RowConstraints</span> <span class=\"token attr-name\">minHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">vgrow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SOMETIMES<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RowConstraints</span> <span class=\"token attr-name\">minHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">vgrow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SOMETIMES<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rowConstraints</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>GridPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>StackPane</span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>loginButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alignment</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>CENTER<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">defaultButton</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mnemonicParsing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">StackPane.alignment</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>CENTER_RIGHT<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>StackPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>VBox</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>StackPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>padding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Insets</span> <span class=\"token attr-name\">bottom</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">left</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">right</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">top</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>padding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>StackPane</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>mainview.fxml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token prolog\">&lt;?import java.lang.*?></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token prolog\">&lt;?import java.util.*?></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.geometry.*?></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.control.*?></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.layout.*?></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.paint.*?></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>StackPane</span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>231.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>fx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://javafx.com/fxml<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>controller</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login.MainViewController<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>StackPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>VBox</span> <span class=\"token attr-name\">spacing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>GridPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Label</span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Session ID:<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.columnIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.rowIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Label</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sessionLabel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Undefined<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.columnIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">GridPane.rowIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>columnConstraints</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ColumnConstraints</span> <span class=\"token attr-name\">hgrow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SOMETIMES<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maxWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>148.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>109.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ColumnConstraints</span> <span class=\"token attr-name\">hgrow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SOMETIMES<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maxWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>228.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>189.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>columnConstraints</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rowConstraints</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RowConstraints</span> <span class=\"token attr-name\">minHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">vgrow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SOMETIMES<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RowConstraints</span> <span class=\"token attr-name\">minHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">vgrow</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SOMETIMES<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rowConstraints</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>GridPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>StackPane</span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>loginButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>logoutButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alignment</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>CENTER<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">defaultButton</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mnemonicParsing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Logout<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">StackPane.alignment</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>CENTER_RIGHT<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>StackPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>VBox</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>StackPane</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>padding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Insets</span> <span class=\"token attr-name\">bottom</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">left</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">right</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">top</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>padding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>StackPane</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"fxmenus\"><a class=\"anchor\" href=\"#fxmenus\">#</a> FXMenus</h3>\n<p>Two packages! Use of Controller, SceneBuilder.<br />\nIncludes menu click events.<br />\nRun either  <code>Main.java</code>  file from either package.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Main.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReadOnlyDoubleProperty</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ActionEvent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EventHandler</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Group</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scene</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Menu</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MenuBar</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MenuItem</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>paint<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stage</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * Example of creating menus in JavaFX.</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * @author me</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Application</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    * Manually build menu bar with included menus for this demonstration.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    * </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    * @param menuWidthProperty Width to be bound to menu bar width.</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    * @return Menu Bar with menus included.</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MenuBar</span> <span class=\"token function\">buildMenuBarWithMenus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">ReadOnlyDoubleProperty</span> menuWidthProperty<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">final</span> <span class=\"token class-name\">MenuBar</span> menuBar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// Prepare left-most 'File' drop-down menu</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">final</span> <span class=\"token class-name\">Menu</span> fileMenu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Menu</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      fileMenu<span class=\"token punctuation\">.</span><span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Open\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      menuBar<span class=\"token punctuation\">.</span><span class=\"token function\">getMenus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>fileMenu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token comment\">// Prepare 'Examples' drop-down menu</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token keyword\">final</span> <span class=\"token class-name\">Menu</span> examplesMenu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Menu</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JavaFX Menu Examples\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      examplesMenu<span class=\"token punctuation\">.</span><span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MenuItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Text Example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      menuBar<span class=\"token punctuation\">.</span><span class=\"token function\">getMenus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>examplesMenu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      fileMenu<span class=\"token punctuation\">.</span><span class=\"token function\">setOnAction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">EventHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ActionEvent</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          <span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>              <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Opening Database Connection...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token comment\">// bind width of menu bar to width of associated stage</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      menuBar<span class=\"token punctuation\">.</span><span class=\"token function\">prefWidthProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>menuWidthProperty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token keyword\">return</span> menuBar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    * Start of JavaFX application demonstrating menu support.</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    * </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    * @param stage Primary stage.</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Stage</span> stage<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t  stage<span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Programmatic Menu 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token keyword\">final</span> <span class=\"token class-name\">Group</span> rootGroup <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token keyword\">final</span> <span class=\"token class-name\">Scene</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">(</span>rootGroup<span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>WHEAT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token keyword\">final</span> <span class=\"token class-name\">MenuBar</span> menuBar <span class=\"token operator\">=</span> <span class=\"token function\">buildMenuBarWithMenus</span><span class=\"token punctuation\">(</span>stage<span class=\"token punctuation\">.</span><span class=\"token function\">widthProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      rootGroup<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>menuBar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      stage<span class=\"token punctuation\">.</span><span class=\"token function\">setScene</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      stage<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    * Main executable function for running examples.</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    * </pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    * @param arguments Command-line arguments: none expected.</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arguments<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      <span class=\"token class-name\">Application</span><span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>menuController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>fxml<span class=\"token punctuation\">.</span></span>FXML<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>fxml<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FXMLLoader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scene</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Menu</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MenuItem</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AnchorPane</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stage</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> menuController <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token annotation punctuation\">@FXML</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Menu</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token annotation punctuation\">@FXML</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">MenuItem</span> <span class=\"token class-name\">Close</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t * JavaFX application demonstrating menu that was created via Scene Builder.</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t * </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t * @param stage</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t *            Primary stage.</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t * @throws IOException</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stage</span> stage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token class-name\">FXMLLoader</span> loader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FXMLLoader</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/application/main.fxml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token class-name\">AnchorPane</span> root <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AnchorPane</span><span class=\"token punctuation\">)</span> loader<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SceneBuilder Menu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token class-name\">Scene</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">setScene</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">closeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">// body</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Close item event action\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token comment\">// TODO Auto-generated method stub</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>main.fxml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token prolog\">&lt;?import java.lang.*?></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.control.*?></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.layout.*?></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AnchorPane</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maxHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-Infinity<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maxWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-Infinity<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-Infinity<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-Infinity<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>400.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>600.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://javafx.com/javafx/8.0.40<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>fx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://javafx.com/fxml/1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>controller</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>application.menuController<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MenuBar</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myMenu<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>menus</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Menu</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>File<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mnemonicParsing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>File<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>items</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MenuItem</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Close<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mnemonicParsing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onAction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#closeOut<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Close<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>items</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Menu</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Menu</span> <span class=\"token attr-name\">mnemonicParsing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Edit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>items</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MenuItem</span> <span class=\"token attr-name\">mnemonicParsing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Delete<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>items</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Menu</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Menu</span> <span class=\"token attr-name\">mnemonicParsing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Sleep<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>items</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MenuItem</span> <span class=\"token attr-name\">mnemonicParsing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Now<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>items</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Menu</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>menus</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>MenuBar</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Label</span> <span class=\"token attr-name\">layoutX</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>253.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutY</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>139.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Welcome!<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AnchorPane</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"fxtablesb\"><a class=\"anchor\" href=\"#fxtablesb\">#</a> FXTableSB</h3>\n<p>for rendering a  <code>Table View</code>  in SB.<br />\nIncludes a controller file.<br />\nTrigger  <code>Main.java</code>  file.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Main.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>fxml<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FXMLLoader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Parent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scene</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stage</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stage</span> stage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Parent</span> root <span class=\"token operator\">=</span> <span class=\"token class-name\">FXMLLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FXMLDocument.fxml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Scene</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        stage<span class=\"token punctuation\">.</span><span class=\"token function\">setScene</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        stage<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>FXMLDocumentController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span>URL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResourceBundle</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleStringProperty</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>collections<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FXCollections</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>collections<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObservableList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ActionEvent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>fxml<span class=\"token punctuation\">.</span></span>FXML<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>fxml<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Initializable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Label</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableColumn</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableView</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TextField</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span>cell<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PropertyValueFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FXMLDocumentController</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Initializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Label</span> label<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TableView</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> table<span class=\"token punctuation\">;</span><span class=\"token comment\">// = new TableView&lt;Person>();</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">TableColumn</span> firstNameCol <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">TableColumn</span> lastNameCol <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">TableColumn</span> emailCol <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token class-name\">TextField</span> addFirstName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token class-name\">TextField</span> addLastName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span> <span class=\"token class-name\">TextField</span> addEmail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObservableList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> data</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token operator\">=</span> <span class=\"token class-name\">FXCollections</span><span class=\"token punctuation\">.</span><span class=\"token function\">observableArrayList</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jacob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Smith\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jacob.smith@example.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Isabella\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Johnson\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"isabella.johnson@example.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ethan\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Williams\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ethan.williams@example.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Emma\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jones\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"emma.jones@example.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Michael\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Brown\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"michael.brown@example.com\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@FXML</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleButtonAction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You clicked me!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        data<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                addFirstName<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                addLastName<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                addEmail<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        addFirstName<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        addLastName<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        addEmail<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">URL</span> url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceBundle</span> rb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// TODO</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        firstNameCol<span class=\"token punctuation\">.</span><span class=\"token function\">setMinWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        lastNameCol<span class=\"token punctuation\">.</span><span class=\"token function\">setMinWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        emailCol<span class=\"token punctuation\">.</span><span class=\"token function\">setMinWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        table<span class=\"token punctuation\">.</span><span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        firstNameCol<span class=\"token punctuation\">.</span><span class=\"token function\">setCellValueFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PropertyValueFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        lastNameCol<span class=\"token punctuation\">.</span><span class=\"token function\">setCellValueFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PropertyValueFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        emailCol<span class=\"token punctuation\">.</span><span class=\"token function\">setCellValueFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PropertyValueFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SimpleStringProperty</span> firstName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SimpleStringProperty</span> lastName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SimpleStringProperty</span> email<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> lName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleStringProperty</span><span class=\"token punctuation\">(</span>fName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleStringProperty</span><span class=\"token punctuation\">(</span>lName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleStringProperty</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getFirstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">return</span> firstName<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setFirstName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            firstName<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>fName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getLastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">return</span> lastName<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLastName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            lastName<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>fName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token keyword\">return</span> email<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            email<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>fName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>FXMLDocument.fxml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token prolog\">&lt;?import java.lang.*?></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token prolog\">&lt;?import java.util.*?></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.*?></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.control.*?></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token prolog\">&lt;?import javafx.scene.layout.*?></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AnchorPane</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>AnchorPane<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>380.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>462.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>fx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://javafx.com/fxml/1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://javafx.com/javafx/8<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>controller</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>application.FXMLDocumentController<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutX</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>325.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutY</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>324.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onAction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#handleButtonAction<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Click Me!<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Label</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>label<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutX</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>126<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutY</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">minWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>69<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TableView</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>table<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutX</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>26.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutY</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>29.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>221.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>411.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>columns</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TableColumn</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>firstNameCol<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>75.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>First Name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TableColumn</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TableColumn</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lastNameCol<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>75.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Last Name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TableColumn</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>emailCol<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>75.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Email<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>columns</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TableView</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextField</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addFirstName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutX</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>26.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutY</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>284.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>25.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>81.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">promptText</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>First Name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextField</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addLastName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutX</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>121.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutY</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>284.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefHeight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>25.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">prefWidth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>89.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">promptText</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Last Name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextField</span> <span class=\"token attr-name\"><span class=\"token namespace\">fx:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addEmail<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutX</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>222.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layoutY</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>284.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">promptText</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Email<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>children</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AnchorPane</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"javafxtableview\"><a class=\"anchor\" href=\"#javafxtableview\">#</a> JAVAFXTableView</h3>\n<p>for rendering a  <code>JTable</code>  style output.<br />\nIncludes customized CSS file  <code>styles.css</code> .<br />\nTrigger  <code>DynamicTable.java</code>  file.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DynamicTable.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">apps</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicLong</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">connection<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DBConnect</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Application</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Platform</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>property<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleStringProperty</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObservableValue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>collections<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FXCollections</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>collections<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObservableList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scene</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableColumn</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableColumn<span class=\"token punctuation\">.</span>CellDataFeatures</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>scene<span class=\"token punctuation\">.</span>control<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableView</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Stage</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javafx<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Callback</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicTable</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// TABLE VIEW AND DATA OBJECT CREATIONS</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rawtypes\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">ObservableList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ObservableList</span><span class=\"token punctuation\">></span></span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rawtypes\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">TableView</span> tableview<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// CONNECTION DATABASE</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rawtypes\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buildData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token class-name\">DBConnect</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DBConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tdata <span class=\"token operator\">=</span> <span class=\"token class-name\">FXCollections</span><span class=\"token punctuation\">.</span><span class=\"token function\">observableArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token class-name\">Connection</span> conn <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token comment\">// SQL FOR SELECTING DATA</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token class-name\">String</span> SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT id,name, address from jpapa_bank\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token comment\">// ResultSet object</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>SQL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token comment\">/**********************************</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t * TABLE COLUMN ADDED DYNAMICALLY *</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t **********************************/</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColumnCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// We are using non property style for making dynamic table</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">TableColumn</span> col <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TableColumn</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColumnName</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t * Build an ObservableList for column headings as you iterate thru meta data</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t\t * setup callback Api for column retrievals, works with call method to return</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t\t * heading names</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t\t */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\tcol<span class=\"token punctuation\">.</span><span class=\"token function\">setCellValueFactory</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CellDataFeatures</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ObservableList</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ObservableValue</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ObservableValue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CellDataFeatures</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ObservableList</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleStringProperty</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// add each column name to tableview object</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t\ttableview<span class=\"token punctuation\">.</span><span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// display column names to console as they are added to table dynamically</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Column [\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"] added [\"</span> <span class=\"token operator\">+</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColumnName</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t<span class=\"token comment\">/********************************</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t * Data added to ObservableList dynamically *</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t ********************************/</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> ridx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// track a row index to display to console added rows to table</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// Iterate Row</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">ObservableList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> row <span class=\"token operator\">=</span> <span class=\"token class-name\">FXCollections</span><span class=\"token punctuation\">.</span><span class=\"token function\">observableArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getColumnCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// Iterate Column, grab data</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t\t\trow<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Row [\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ridx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"] added \"</span> <span class=\"token operator\">+</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t\tdata<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\t<span class=\"token comment\">// automatically adjust width of columns depending on their content</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\ttableview<span class=\"token punctuation\">.</span><span class=\"token function\">setColumnResizePolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t<span class=\"token class-name\">Platform</span><span class=\"token punctuation\">.</span><span class=\"token function\">runLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">customResize</span><span class=\"token punctuation\">(</span>tableview<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t<span class=\"token comment\">// add data to tableview object</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\ttableview<span class=\"token punctuation\">.</span><span class=\"token function\">setItems</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error on Building Data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customResize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TableView</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token class-name\">AtomicLong</span> width <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicLong</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\tview<span class=\"token punctuation\">.</span><span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>col <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\twidth<span class=\"token punctuation\">.</span><span class=\"token function\">addAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> col<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token keyword\">double</span> tableWidth <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tableWidth <span class=\"token operator\">></span> width<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\tview<span class=\"token punctuation\">.</span><span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>col <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t\tcol<span class=\"token punctuation\">.</span><span class=\"token function\">setPrefWidth</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tableWidth <span class=\"token operator\">-</span> width<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> view<span class=\"token punctuation\">.</span><span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rawtypes\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Stage</span> stage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t<span class=\"token comment\">// Instantiate TableView object</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\ttableview <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TableView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token function\">buildData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token comment\">// Main Scene</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token class-name\">Scene</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scene</span><span class=\"token punctuation\">(</span>tableview<span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\tscene<span class=\"token punctuation\">.</span><span class=\"token function\">getStylesheets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"styles.css\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toExternalForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">setScene</span><span class=\"token punctuation\">(</span>scene<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\tstage<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token comment\">// MAIN EXECUTOR</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight css\"><figcaption data-lang=\"CSS\"><span>styles.css</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.root</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">-fx-font-size</span><span class=\"token punctuation\">:</span> 14pt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">-fx-font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Courier New\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">-fx-base</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>132<span class=\"token punctuation\">,</span> 202<span class=\"token punctuation\">,</span> 248<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">-fx-background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>225<span class=\"token punctuation\">,</span> 220<span class=\"token punctuation\">,</span> 203<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token selector\">.highlightedRow</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">-fx-background-color</span><span class=\"token punctuation\">:</span> brown<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">-fx-background-insets</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">,</span> 1<span class=\"token punctuation\">,</span> 2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">-fx-background</span><span class=\"token punctuation\">:</span> -fx-accent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">-fx-text-fill</span><span class=\"token punctuation\">:</span> -fx-selection-bar-text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DBConnect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DBConnect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// Code database URL</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> DB_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://www.papademas.net:3307/510fp?autoReconnect=true&amp;useSSL=false\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// Database credentials</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USER <span class=\"token operator\">=</span> <span class=\"token string\">\"fp510\"</span><span class=\"token punctuation\">,</span> PASS <span class=\"token operator\">=</span> <span class=\"token string\">\"510\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>DB_URL<span class=\"token punctuation\">,</span> USER<span class=\"token punctuation\">,</span> PASS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"refs\"><a class=\"anchor\" href=\"#refs\">#</a> Refs</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5vcmFjbGUuY29tL3RlY2huZXR3b3JrL2phdmEvamF2YXNlL292ZXJ2aWV3L2phdmFmeC1vdmVydmlldy0yMTU4NjIwLmh0bWw=\">http://www.oracle.com/technetwork/java/javase/overview/javafx-overview-2158620.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2UvOC9qYXZhc2UtY2xpZW50dGVjaG5vbG9naWVzLmh0bQ==\">http://docs.oracle.com/javase/8/javase-clienttechnologies.htm</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YWZ4LzIvb3ZlcnZpZXcvamZ4cHViLW92ZXJ2aWV3Lmh0bQ==\">https://docs.oracle.com/javafx/2/overview/jfxpub-overview.htm</span></p>\n<p>(Master-Detail view)</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLm1ha2VyeS5jaC9saWJyYXJ5L2phdmFmeC10dXRvcmlhbC8=\">https://code.makery.ch/library/javafx-tutorial/</span></p>\n<p>Dialogs (various popup boxes)!</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2NvZGUubWFrZXJ5LmNoL2Jsb2cvamF2YWZ4LWRpYWxvZ3Mtb2ZmaWNpYWwv\">http://code.makery.ch/blog/javafx-dialogs-official/</span></p>\n<p>FX Chart City!!!</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2UvOC9qYXZhZngvdXNlci1pbnRlcmZhY2UtdHV0b3JpYWwvY2hhcnRzLmh0bQ==\">http://docs.oracle.com/javase/8/javafx/user-interface-tutorial/charts.htm</span></p>\n<p>Totally cool text features</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzgvamF2YWZ4L3VzZXItaW50ZXJmYWNlLXR1dG9yaWFsL3RleHQtc2V0dGluZ3MuaHRt\">https://docs.oracle.com/javase/8/javafx/user-interface-tutorial/text-settings.htm</span></p>\n<p>FX layouts</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YWZ4LzIvbGF5b3V0L2J1aWx0aW5fbGF5b3V0cy5odG0jQ0hER0hDREc=\">https://docs.oracle.com/javafx/2/layout/builtin_layouts.htm#CHDGHCDG</span></p>\n<p>Simply CSS!</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ndWlnYXJhZ2UuY29tLzIwMTYvMDIvamF2YWZ4LWFuZC1jc3Mv\">http://www.guigarage.com/2016/02/javafx-and-css/</span></p>\n<h1 id=\"lab\"><a class=\"anchor\" href=\"#lab\">#</a> Lab</h1>\n<ul>\n<li>\n<p>PROJECT<br />\nBank record loan generation report</p>\n</li>\n<li>\n<p>Objective<br />\nTo write a program with a MVC  <code>simulated</code>  approach that performs a Loan analysis from class objects created in lab #2.</p>\n</li>\n</ul>\n<h2 id=\"project-description\"><a class=\"anchor\" href=\"#project-description\">#</a> PROJECT DESCRIPTION</h2>\n<p>Bank of IIT now needs your help in deciphering whom from its records should be exclusive to premium loans versus those offered micro or less premium loans.<br />\n 现在，IIT 银行需要您的帮助才能确定哪些人是其记录中的专有贷款，而不是那些提供了小额或更少保费贷款的人。</p>\n<p>Use a database to store then present Loan analysis information from your data BankRecords objects you worked on in prior labs.<br />\n 使用数据库来存储，然后显示您在先前实验中工作过的数据 BankRecords 对象中的贷款分析信息。</p>\n<h2 id=\"project-details\"><a class=\"anchor\" href=\"#project-details\">#</a> Project Details</h2>\n<p>For this lab you will continue using your current project src folder files created for labs 2 &amp; 3 and you'll create the following packages &amp; their containments in an MVC style as follows:<br />\n 对于本实验，您将继续使用为实验 2 和 3 创建的当前项目 src 文件夹文件，并将以 MVC 样式创建以下程序包及其包含，如下所示：</p>\n<ul>\n<li>\n<p>Package:  <code>models</code> <br />\nFile  <code>DbConnect</code> : will allow an object to connect / close a database connection.<br />\n 将允许对象连接 / 关闭数据库连接。<br />\nFile  <code>DaoModel</code> : where Dao stands for Data Access Object, defines CRUD (Create Read Update Delete) like operations.<br />\nDao 代表数据访问对象，它定义 CRUD（创建读取更新删除）之类的操作。</p>\n</li>\n<li>\n<p>Package:  <code>controllers</code> <br />\nFile  <code>LoanProcessing</code> : acts as a controller or &quot;driver&quot; file (i.e., includes main function) to run database CRUD methods and fires up some resulting output.<br />\n 充当控制器或 “驱动程序” 文件（即包含主要功能），以运行数据库 CRUD 方法并触发一些结果输出。</p>\n</li>\n<li>\n<p>Package:  <code>views</code> <br />\nFile  <code>LoanView</code> : shows JTable output.<br />\n 显示 JTable 输出。</p>\n</li>\n</ul>\n<p>To start working with a database you will need a JDBC driver to allow for any connectivity within your app.<br />\n 要开始使用数据库，您将需要一个 JDBC 驱动程序以允许应用程序内的任何连接。</p>\n<p>To include a driver for your MySQL database, you need to create a folder called libs within your project root. The MySQL driver for JDBC connections packages in the form of a jar file which you can download here:<br />\n 要包括 MySQL 数据库的驱动程序，您需要在项目根目录中创建一个名为 libs 的文件夹。 JDBC 连接的 MySQL 驱动程序以 jar 文件的形式打包，您可以在此处下载：</p>\n<p>You will find a JDBC driver for connecting to a MySQL database located here:<br />\n 您将在以下位置找到用于连接到 MySQL 数据库的 JDBC 驱动程序：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9jb25uZWN0b3Ivai8=\">https://dev.mysql.com/downloads/connector/j/</span></p>\n<p>Depending on your OS you will need to download a windows zip file or a tar file if you are a Mac/Linux user. I usually just choose 'Platform Independent' for Mac/Windows from the pull down menu as shown next and then choose to download the ZIP Archive version.<br />\n 如果您是 Mac / Linux 用户，则根据您的操作系统，您将需要下载 Windows zip 文件或 tar 文件。 我通常只从下图所示的下拉菜单中为 Mac / Windows 选择 “Platform Independent”，然后选择下载 ZIP 存档版本。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/14/qJ7el5TLIYhnHOs.png\" alt=\"\" /></p>\n<p>Click the  <code>download</code>  button given your choice at the right hand side, and you will be taken to a page to begin your download. Go to the bottom of the page and click on the  <code>No thanks, just start my download link</code> . Unzip or untar the downloaded file and locate the needed and &quot;latest&quot; .jar file ( mysql-connector-java-8.0.22.jar ) in the unzipped foldder and <ins>copy</ins> it into your <strong>libs</strong> folder.<br />\n 点击右侧给出的 “下载” 按钮，您将被带到一个页面开始下载。 转到页面底部，然后单击 “不，谢谢，只需启动我的下载链接”。 解压缩下载的文件，然后在解压缩的文件夹中找到所需的 “最新” .jar 文件（mysql-connector-java-8.0.22.jar），然后将其复制到您的 libs 文件夹中。</p>\n<p><ins>Next</ins> include the jar file in your Build Path, by right clicking on your project folder and then choose <strong>Build Path &gt; Configure Build Path....</strong><br />\n 接下来，通过右键单击您的项目文件夹，将 jar 文件包含在 “构建路径” 中，然后选择 “构建路径”&gt;“配置构建路径...”。</p>\n<p>Once the dialog box opens make sure to click on the <strong>Libraries</strong> tab then click<br />\n 对话框打开后，请确保单击 “库” 选项卡，然后单击<br />\n<strong> Add JARs…</strong><br />\n 添加 JAR ...</p>\n<p><img data-src=\"https://i.loli.net/2020/11/14/JjH4RBu3aEQdPDv.png\" alt=\"\" /></p>\n<p>Drill down to the libs folder within your project and then choose the jar file to add.<br />\nClick  <code>OK</code>  to commit. Then click  <code>Apply and Close</code> . Snapshot follows.<br />\n 深入到项目中的 libs 文件夹，然后选择要添加的 jar 文件。<br />\n单击确定进行提交。 然后单击 “应用并关闭”。 快照如下。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/14/ust7rZzBoFiEfmV.png\" alt=\"\" /></p>\n<h3 id=\"project-work\"><a class=\"anchor\" href=\"#project-work\">#</a> Project work</h3>\n<p>Create the following packages and corresponding files and include the helper code provided as follows (note- if some assignment statements in the spec continue to wrap to another line, you may want to adjust your source editor to include the assignment onto one line).<br />\n 创建以下软件包和相应的文件，并包括如下提供的帮助程序代码（注意 - 如果规范中的某些赋值语句继续换行到另一行，则可能需要调整源代码编辑器以将赋值包括在一行中）。</p>\n<blockquote>\n<p>Okay for a slight workaround if necessary!  <ins>IF</ins> you <ins>DO NOT</ins> have a package name for your project files thus far (i.e., it shows current as the default package), let’s go ahead and create one to make it possible for importation needs so file objects can be used!  So again if your current  <code>src</code>  folder shows as follows<br />\n 如有必要，请稍作解决！ 如果到目前为止您的项目文件都没有软件包名称（即，它将当前显示为默认软件包），那就继续创建一个可以满足导入需求的软件包，以便可以使用文件对象！ 如果您当前的 <code>src</code>  文件夹显示如下<br />\n<img data-src=\"https://i.loli.net/2020/11/14/rGHvbzgCoQOpw9e.png\" alt=\"\" /></p>\n</blockquote>\n<blockquote>\n<p>you need to create a package and <ins>move all</ins> files from your default package into your new package. To add in a new package, right click on your source folder  <code>src</code>  and choose <strong>New &gt; Package</strong>. Name your package  <code>records</code> . Leave the default setting. Choose Finish to complete this step. Then highlight all your files currentlly in your default package, right click on them and choose <strong>Refactor &gt; Move....</strong> Click on your chosen destination ( <code>records</code>  package) and press OK.<br />\n 您需要创建一个程序包，并将所有文件从默认程序包移至新程序包。 要添加新包，请右键单击源文件夹（src），然后选择<strong> New &gt; Package</strong>。 包命名为 <code>records</code> 。 保留默认设置。 选择完成以完成此步骤。 然后在默认包中当前突出显示所有文件，右键单击它们，然后选择<strong> Refactor &gt; Move....</strong>。单击您选择的目标位置（ <code>records</code>  包），然后按 OK。<br />\n<img data-src=\"https://i.loli.net/2020/11/14/CmBGEQoMXfhqi7Z.png\" alt=\"\" /><br />\nVoila, all your moved files will now have  <code>package records;</code>  automatically added to each file heading! Plus your <ins>default package</ins> is now blown away as shown below.<br />\n 瞧，您所有移动的文件现在都将具有 <code>package records;</code>  自动添加到每个文件的标题！ 另外，您的默认包现在被删除，如下所示。</p>\n</blockquote>\n<blockquote>\n<p>Note also if you already have had a package name for your project work, you can refactor the name to  <code>records</code> . Keep it as files from it will automatically be imported in with other packages when time comes!<br />\n 还请注意，如果您已经为项目工作使用了包名称，则可以将该名称重构为 <code>records</code> 。 保留它，因为到时文件将自动与其他软件包一起导入！<br />\n<img data-src=\"https://i.loli.net/2020/11/14/oLFy9UpNhO7mdV6.png\" alt=\"\" /></p>\n</blockquote>\n<h3 id=\"models-package\"><a class=\"anchor\" href=\"#models-package\">#</a>  <code>models</code>  Package</h3>\n<p>Now to continue with your code work, right click on your source folder  <code>models</code>  and choose <strong>New &gt; Package</strong>. Name your package  <code>models</code> . Leave the default setting. Choose Finish to complete the step.<br />\n 现在继续执行代码工作，右键单击源文件夹 <code>models</code> ，然后选择<strong> New &gt; Package</strong>。 包命名为 <code>models</code> 。 保留默认设置。 选择完成以完成该步骤。</p>\n<p>Next, right click on your <ins>new package</ins> (i.e.,  <code>models</code> ) and create a class. Name your class  <code>DBConnect</code>  and copy in the following code to allow connections to the papaserver.<br />\n 接下来，右键单击您的新包（即 <code>models</code> ），然后创建一个类。 将您的类命名为 <code>DBConnect</code> ，并复制以下代码以允许连接到 papaserver。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DBConnect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">models</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DBConnect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// Code database URL</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> DB_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://www.papademas.net:3307/510labs?autoReconnect=true&amp;useSSL=false\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// Database credentials</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USER <span class=\"token operator\">=</span> <span class=\"token string\">\"db510\"</span><span class=\"token punctuation\">,</span> PASS <span class=\"token operator\">=</span> <span class=\"token string\">\"510\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>DB_URL<span class=\"token punctuation\">,</span> USER<span class=\"token punctuation\">,</span> PASS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Note that any remaining helper code below will <ins>not</ins> include imports or any package names for brevity, so <ins>please make sure to add them in</ins> (<strong>Source &gt; Organize Imports</strong>)! Note when you choose  <code>Organize Imports</code> , <ins>automatically</ins> any imports for <ins>any</ins> of your new packages will automatically be included as well!<br />\n 请注意，以下任何剩余的帮助程序代码都将不包含导入或简短的软件包名称，因此请确保将其添加到（<strong>Source &gt; Organize Imports</strong>）中！ 请注意，当您选择 <code>Organize Imports</code>  时，也会自动包括任何新软件包的任何导入！</p>\n<p>Also note that if and when you copy code in, you may get some underlying errors, until you <ins>include any necessary import statements</ins>.<br />\n 还要注意，当您复制代码时，在包含任何必要的 <code>import</code>  语句之前，可能会遇到一些潜在的错误。</p>\n<p>Also <em>further</em> note, when <em>choosing</em> imports for db operations from <ins>source</ins> <span class=\"red\">classes</span>, if you're prompted for choosing from more than one option, choose from the  <code>java.sql</code> , package and then the subpackage(s) in the list.<br />\n 另请注意，当从源类中选择数据库操作的导入时，如果系统提示您从多个选项中进行选择，请从列表中的 <code>java.sql</code> ，包和子包中进行选择。</p>\n<p>Ex.<br />\n<img data-src=\"https://i.loli.net/2020/11/14/71EjiLKmeP6hpsC.png\" alt=\"\" /></p>\n</blockquote>\n<p>In the  <code>models</code>  package add in another class named  <code>DaoModel</code>  and code it as follows:<br />\n 在 <code>models</code>  包中，添加另一个名为 <code>DaoModel</code>  的类，并将其编码如下：</p>\n<ul>\n<li>Include the following class fields, constructor<br />\n 包括以下类字段，构造函数</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DaoModel.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Declare DB objects </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">DBConnect</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">Statement</span> stmt <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// constructor</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">DaoModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//create db object instance</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tconn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DBConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>Include a method to create a database table called  <code>createTable</code> .  <code>createTable</code>  merely creates a table when the method is called. Include the fields  <code>pid</code> ,  <code>id</code> ,  <code>income</code>  and  <code>pep</code>  when building your table setup. A PRIMARY KEY, which ensures record uniqueness is included for your build for the pid field which is shown below.<br />\n 包括一种创建名为 <code>createTable</code>  的数据库表的方法。  <code>createTable</code>  仅在被调用时创建一个表。 建立表格设置时，包含字段 <code>pid</code> ， <code>id</code> ， <code>income</code>  和 <code>pep</code> 。 如下所示，在 <code>pid</code>  字段的构建中包含了一个 <code>PRIMARY KEY</code> ，它确保记录的唯一性。</li>\n</ul>\n<blockquote>\n<p>Note when creating a table it is  <code>IMPERATIVE</code>  to include the following name: 请注意，在创建表时，必须包括以下名称：<br />\n <code>yourFirstinitial_First4LettersOfYourLastName_tab</code></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// CREATE TABLE METHOD</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token comment\">// Open a connection</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connecting to database to create Table...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connected database successfully...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">// Execute create query</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Creating table in given database...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tstmt <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"CREATE TABLE yourTableName_tab \"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t              <span class=\"token string\">\"(pid INTEGER not NULL AUTO_INCREMENT, \"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t  \t        <span class=\"token string\">\" id VARCHAR(10), \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t  <span class=\"token string\">\" income numeric(8,2), \"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t  <span class=\"token string\">\" pep VARCHAR(3), \"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t  <span class=\"token string\">\" PRIMARY KEY ( pid ))\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tstmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created table in given database...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//close db connection </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> se<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// Handle errors for JDBC</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tse<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Notice carefully that  <code>comments</code>  are put in code as well the display of relevant information to the console. <span class=\"purple\">For future methods, continue this way on your own.</span><br />\n 请注意，注释已放入代码中，并且在控制台中显示了相关信息。 对于将来的方法，请自行继续这种方式。</p>\n</blockquote>\n<ul>\n<li>Include a method to insert records called  <code>insertRecords()</code> .</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// INSERT INTO METHOD</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertRecords</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> robjs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token comment\">// Execute a query</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inserting records into the table...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tstmt <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// Include all object data to the database table</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> robjs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token comment\">// finish string assignment below to insert all array object data </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token comment\">// (id, income, pep) into your database table</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\tsql <span class=\"token operator\">=</span> <span class=\"token string\">\"                   \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tstmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> se<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> se<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// INSERT INTO METHOD</span></pre></td></tr></table></figure><p>Finish coding the above sql string with an insert statement where commented.<br />\n 使用注释的 insert 语句完成对以上 sql 字符串的编码。</p>\n<p>Example insert statement follows ( note space separation in string for statement clarity, also single vs. double quote marks! ):<br />\n 下面是示例 insert 语句（为清楚起见，请注意字符串之间的空格分隔，也包括单引号和双引号！）：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO yourTableName_tab(field 1,field 2, field n) \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token string\">\"VALUES (' \"</span><span class=\"token operator\">+</span>value <span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token string\">\" ', ' \"</span><span class=\"token operator\">+</span>value <span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token string\">\" ', ' \"</span><span class=\"token operator\">+</span>value n<span class=\"token operator\">+</span><span class=\"token string\">\" ' )\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>Note for brevity purposes, future starter code will mostly EXCLUDE try / catch blocks. Add in your own try / catch blocks were applicable.<br />\n 为简便起见，请注意，以后的 starter code 将排除 try /catch 块。 添加您自己的 try /catch 块是适用的。</p>\n</blockquote>\n<ul>\n<li>Include a method to retrieve records for display called  <code>retrieveRecords()</code> .</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ResultSet</span> <span class=\"token function\">retrieveRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tstmt <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * from yourTableName_tab\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\trs <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> rs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"methods-breakdown\"><a class=\"anchor\" href=\"#methods-breakdown\">#</a> Methods breakdown</h4>\n<p><code>insertRecords(BankRecords [] arrayName)</code>  will allow for the <ins>array of  <code>BankRecord</code>  objects</ins>, to be passed to your method which will allow for the insertion of <ins>all</ins> the  <code>id</code> ,  <code>income</code>  and  <code>pep</code>  data from your  <code>BankRecords</code>  array (or <em>whatever</em> you named it) into your database table when called.<br />\n <code>insertRecords(BankRecords [] arrayName)</code>  方法以一个 BankRecord 对象数组作为参数，将参数中的所有 <code>id</code> ,  <code>income</code>  and  <code>pep</code>  数据插入到数据库中。</p>\n<p><code>retrieveRecords()</code>  will <ins>return</ins> a  <code>ResultSet</code>  <ins>object</ins> used for creating output. The result set contains record data including your  <code>id</code> ,  <code>income</code>  and  <code>pep</code>  table fields.<br />\n <code>retrieveRecords()</code>  将返回用于输出的 ResultSet 对象。 结果集为包括 <code>id</code> ,  <code>income</code>  and  <code>pep</code>  表字段的记录数据。</p>\n<p><strong>Code tweak</strong>: Make sure to <ins>sort</ins> the  <code>pep</code>  field in descending order to allow for premium loan candidates to appear first in the record set for reporting purposes (i.e., those with data values of “YES”). The resultset query string to build can be something like:<br />\n 代码调整：确保按降序对 <code>pep</code>  字段进行排序，以使保费贷款候选者在报告目的记录集中（即数据值为 “是” 的那些）首先出现。 要构建的结果集查询字符串可以类似于：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token string\">\"select pid, id,income, pep from yourTableName_tab order by pep desc\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>As a quick note:</p>\n<ul>\n<li>make sure to <ins>always close out</ins> of your connections and any statements when through with any processing!<br />\n 快速说明：在进行任何处理时，请确保始终关闭连接和所有语句！</li>\n<li>Make sure to include error trapping using  <code>SQLException</code>  handling for all your database operations and connection logic.<br />\n 确保为所有数据库操作和连接逻辑包括 SQLException 处理的错误捕获。</li>\n<li>Again, include messages to the console when your methods trigger. Ex. Table created, inserting records into database, etc.<br />\n 同样，当方法触发时，将消息输出到控制台。 例如 创建表，将记录插入数据库等</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>A super great resource to assist you with all your JDBC-CRUD operations for your methods can be found at this site: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50dXRvcmlhbHNwb2ludC5jb20vamRiYy8=\">http://www.tutorialspoint.com/jdbc/</span>, as well as the Chapter 22 PowerPoint from Gaddis.<br />\n 可以在以下站点找到一个超级有用的资源，可以为您的方法提供所有 JDBC-CRUD 操作的帮助，以及来自 Gaddis 的 Chapter 22 PowerPoint。<br />\nRemember though to phrase coding the best you can using your own object names, method naming and variable names, including coding syntax and even comments, if referencing any material from tutorialspoint, etc. so your lab work is unique.<br />\n 请记住，虽然最好用短语编码，但是如果引用了 tutorialspoint 的任何材料，则可以使用自己的对象名称，方法命名和变量名称（包括编码语法甚至注释）来使用，因此您的 lab 工作是独一无二的。</p>\n</blockquote>\n<h3 id=\"controllers-package\"><a class=\"anchor\" href=\"#controllers-package\">#</a>  <code>controllers</code>  Package</h3>\n<p>Next in the same manner as you created your  <code>models</code>  package, create a package called  <code>controllers</code>  and include a class called  <code>LoanProcessing</code>  for your package. Code your class file as follows.<br />\n 接下来，以与创建 <code>models</code>  包相同的方式，创建一个名为 <code>controllers</code>  的程序包，包含一个名为 <code>LoanProcessing</code>  的类。 编写您的类文件，如下所示</p>\n<p>For your  <code>LoanProcessing</code>  source file make sure first to extend  <code>BankRecords</code> .</p>\n<p>Simply follow thru with the following object creations and method calls in  <code>main</code> .</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LoanProcessing.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">BankRecords</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>br<span class=\"token punctuation\">.</span><span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">DaoModel</span> dao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DaoModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dao<span class=\"token punctuation\">.</span><span class=\"token function\">createTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>dao<span class=\"token punctuation\">.</span><span class=\"token function\">insertRecords</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// perform inserts</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>rs <span class=\"token operator\">=</span> dao<span class=\"token punctuation\">.</span><span class=\"token function\">retrieveRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">LoanView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runView</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>Note you will error out on the  <code>extends</code>  clause and with the  <code>DaoModel dao</code>  opening line and the  <code>new LoanView().runView(rs);</code>  line of code added above, until you include appropriate imports and the LoanView class which will be performed next.  Go ahead and allow for your  <code>robjs</code>  array to be changed to a  <code>protected</code>  access mode as well.</p>\n</blockquote>\n<h4 id=\"main-code-breakdown\"><a class=\"anchor\" href=\"#main-code-breakdown\">#</a> Main code breakdown</h4>\n<p>Included in  <code>main()</code>  is your  <code>readData()</code>  method call which will process your  <code>BankRecord</code>  objects.<br />\n <code>main()</code>  中调用 <code>readData()</code>  方法，处理 <code>BankRecord</code>  对象。<br />\nThen the code <ins>instantiates</ins> a  <code>DaoModel</code>  object and triggers your  <code>createTable()</code>  method, your  <code>insertRecords(your BankRecords array object)</code>  method and your  <code>retrieveRecords()</code>  method in that order.<br />\n 然后，实例化一个 <code>DaoModel</code>  对象，并按此顺序触发 <code>createTable()</code> 、 <code>insertRecords(your BankRecords array object)</code>  和 <code>retrieveRecords()</code>  方法。<br />\nOf course you can comment out your  <code>createTable</code>  /  <code>insertRecords</code>  method call lines once you've accomplished that, to test how your output statements appear. Logic for that follows shortly.<br />\n 当然，完成后，可以注释掉 <code>createTable</code>  /  <code>insertRecords</code>  方法的调用行，以测试输出语句的显示方式。 逻辑很快就会出现。</p>\n<p>Once you have <ins>retrieved</ins> a recordset, your code will call a  <code>runView</code>  method from the  <code>LoanView</code>  class to print out all the records from the recordset, to a Java window which contains a  <code>JTable</code>  in a nice columnar format included with heading names for  <code>pid</code> ,  <code>id</code> ,  <code>income</code>  and  <code>pep</code>  and a nice title for the report!<br />\n 检索到记录集后，从 <code>LoanView</code>  类中调用 <code>runView</code>  方法，以将记录集中的所有记录打印到 Java 窗口。该窗口包含一个漂亮的列格式的 JTable，其中包含标题 pid，id， income 和 pep，以及标题！</p>\n<h3 id=\"views-package\"><a class=\"anchor\" href=\"#views-package\">#</a>  <code>views</code>  Package</h3>\n<p>Lastly now create a package named  <code>views</code>  and include a class called  <code>LoanView</code> . Code LoanView's  <code>runView</code>  method as follows (make sure to include appropriate imports)<br />\n 最后，创建一个名为 <code>views</code>  的包，并包括一个名为 <code>LoanView</code>  的类。编写 <code>runView</code>  方法（确保包含适当的导入）如下。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LoanView.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// instantiate vector objects to hold column/row data for JTable</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Vector</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Vector</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> column <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">ResultSetMetaData</span> metaData <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> columns <span class=\"token operator\">=</span> metaData<span class=\"token punctuation\">.</span><span class=\"token function\">getColumnCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// get column names from table!</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> cols <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> columns<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tcols <span class=\"token operator\">=</span> metaData<span class=\"token punctuation\">.</span><span class=\"token function\">getColumnName</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\tcolumn<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cols<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">// get row data from table!</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> row <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>columns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> columns<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\trow<span class=\"token punctuation\">.</span><span class=\"token function\">addElement</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\tdata<span class=\"token punctuation\">.</span><span class=\"token function\">addElement</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token class-name\">DefaultTableModel</span> model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultTableModel</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token class-name\">JTable</span> table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JTable</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token class-name\">JFrame</span> frame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JFrame</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Loan Details\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JScrollPane</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setDefaultCloseOperation</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\trs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//close ResultSet instance </span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"code-breakdown\"><a class=\"anchor\" href=\"#code-breakdown\">#</a> Code breakdown</h4>\n<p>To view the output in a nice table view, a  <code>JTable</code>  object is created to take in rows and columns (column names retrieved from generated metadata) dynamically from your  <code>ResultSet</code>  (passed through the  <code>runView</code>  method's parameter), which stores the data each as a  <code>Vector</code>  which becomes displayed in a  <code>JFrame</code>  which is part of Java's Swing API.<br />\n 为了在漂亮的表格视图中查看输出，创建了一个 JTable 对象，以从 ResultSet（通过 runView 方法传递的参数）动态地获取行和列（从生成的元数据检索的列名），该数据集将每个数据存储为一个 Vector，显示在 Java 的 Swing API 的 JFrame 中。</p>\n<p>Now before running your code from your  <code>LoanProcessing</code>  main file, go back into your  <code>LoanProcessing</code>  file and import the needed package/class name to clear your error as noted before. To finish, run your  <code>LoanProcessing</code>  source file to complete your lab work and observe your output.<br />\n 现在，从 LoanProcessing 主文件运行代码之前，请回到 LoanProcessing 文件并导入所需的包 / 类名称，以清除错误（如前所述）。 最后，运行 LoanProcessing 源文件以完成实验工作并观察输出。</p>\n<h2 id=\"extra-credit-options\"><a class=\"anchor\" href=\"#extra-credit-options\">#</a> Extra Credit options</h2>\n<ul>\n<li>Include SQL Prepared statements when inserting records (+5 points)<br />\n 插入记录时包含 SQL 预处理语句</li>\n<li>Show console output of Loan Analysis Report detailed data + a report title (+5 points)<br />\n 显示 “贷款分析报告” 详细信息的控制台输出 + 报告标题</li>\n</ul>\n<p>Or you for extra credit you may choose the following option<br />\n 或者，您可以选择以下选项来获得额外的积分，</p>\n<ul>\n<li>Serialize and deserialize  <code>BankRecord</code>  objects using the  <code>java.util.Map</code>  class. (+10 points)<br />\n 使用 java.util.Map 类序列化和反序列化 BankRecord 对象。<br />\nName your serializable file  <code>bankrecords.ser</code> .<br />\n 将您的可序列化文件命名为 bankrecords.ser。<br />\nMake your application sleep for 5 seconds between the processes.<br />\n 使您的应用程序在过程之间休眠 5 秒钟。<br />\nDisplay to the console, the time difference between the serialization and deserialization processes. <br />\n在控制台显示，序列化、反序列化过程的时间差。</li>\n</ul>\n<blockquote>\n<p>Include a zip file of <ins>all</ins> your project source code (new and old), your  <code>.csv</code>  file and a seperate file of your snapshots of your <ins>console at runtime</ins> which must include a <ins>table creation</ins> message, an <ins>insertion message</ins> and a snapshot of your  <code>JTable</code>  showing the first few rows of your record results into a Word doc file into BB for credit. Include all your source code as well into your Word doc file. If you have any extra credit, snapshot that as well and label your extra snapshot(s) accordingly.  Sample displays of output follows…</p>\n</blockquote>\n<h2 id=\"sample-run\"><a class=\"anchor\" href=\"#sample-run\">#</a> Sample run</h2>\n<p><img data-src=\"https://i.loli.net/2020/11/15/eso34QmnY8B7GiO.png\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/15/ikKLtywHmnA41ZT.png\" alt=\"\" /></p>\n<h2 id=\"code\"><a class=\"anchor\" href=\"#code\">#</a> code</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LoanProcessing.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">controllers</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">models<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DaoModel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">records<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">views<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoanView</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoanProcessing</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BankRecords</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">BankRecords</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    br<span class=\"token punctuation\">.</span><span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nSleep for 5 seconds...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token class-name\">DaoModel</span> dao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DaoModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      dao<span class=\"token punctuation\">.</span><span class=\"token function\">createTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      dao<span class=\"token punctuation\">.</span><span class=\"token function\">insertRecords</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      rs <span class=\"token operator\">=</span> dao<span class=\"token punctuation\">.</span><span class=\"token function\">retrieveRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nCreating records table...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">new</span> <span class=\"token class-name\">LoanView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runView</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Records table has been shown.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Serializing BankRecord objects...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">//Adding elements to HashMap</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> robjs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          <span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bankrecords.ser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>          <span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>fos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>          oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>          oos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>          fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Serialized data is saved in bankrecords.ser successfully.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>          e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deserializing bankrecords.ser...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>          <span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bankrecords.ser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>          <span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>fis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>          ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>          ois<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>          fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deserialized bankrecords.ser successfully.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nThe time difference between the serialization and deserialization processes: \"</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ms\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>          e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DaoModel.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">models</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Statement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">records<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DaoModel</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">//Declare DB objects </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token class-name\">DBConnect</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token class-name\">Statement</span> stmt <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token class-name\">PreparedStatement</span> pstmt <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token class-name\">String</span> table_name <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxx_lab4\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// constructor</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">DaoModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//create db object instance</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    conn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DBConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">// CREATE TABLE METHOD</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token comment\">// Open a connection</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connecting to database to create Table...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token class-name\">Connection</span> cc <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connected database successfully...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// Execute create query</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nCreating table in given database...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      stmt <span class=\"token operator\">=</span> cc<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"CREATE TABLE \"</span> <span class=\"token operator\">+</span> table_name <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token string\">\"(pid INTEGER not NULL AUTO_INCREMENT, \"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                  <span class=\"token string\">\" id VARCHAR(10), \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token string\">\" income numeric(8,2), \"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token string\">\" pep VARCHAR(3), \"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          <span class=\"token string\">\" PRIMARY KEY ( pid ), UNIQUE( id ))\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created table in given database...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//close db connection </span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> se<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// Handle errors for JDBC</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>se<span class=\"token punctuation\">.</span><span class=\"token function\">getErrorCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1050</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created table in given database...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        se<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token comment\">// INSERT INTO METHOD</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertRecords</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> robjs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token class-name\">Connection</span> cc <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    cc<span class=\"token punctuation\">.</span><span class=\"token function\">setAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token comment\">// Execute a query</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nInserting records into the table...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO \"</span> <span class=\"token operator\">+</span> table_name <span class=\"token operator\">+</span> <span class=\"token string\">\"(id, income, pep) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE income=income\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      pstmt <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token comment\">// Include all object data to the database table</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> robjs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\">// finish string assignment below to insert all array object data </span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// (id, income, pep) into your database table       </span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">setDouble</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIncome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">addBatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeBatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      cc<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token string\">\" Records inserted!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"85\"></td><td><pre>      pstmt<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>      cc<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//close db connection </span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> se<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// Handle errors for JDBC</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      cc<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>      se<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResultSet</span> <span class=\"token function\">retrieveRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nQuerying records from the database...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"98\"></td><td><pre>      stmt <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>      <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT pid, id, income, pep from \"</span> <span class=\"token operator\">+</span> table_name <span class=\"token operator\">+</span> <span class=\"token string\">\" order by pep desc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>      rs <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"103\"></td><td><pre>      conn<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> se<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      se<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">return</span> rs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DBConnect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">models</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DBConnect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// Code database URL</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> DB_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://www.xxxxx.net:3307/510labs?autoReconnect=true&amp;useSSL=false&amp;rewriteBatchedStatements=true\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// Database credentials</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USER <span class=\"token operator\">=</span> <span class=\"token string\">\"db\"</span><span class=\"token punctuation\">,</span> PASS <span class=\"token operator\">=</span> <span class=\"token string\">\"1213\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>DB_URL<span class=\"token punctuation\">,</span> USER<span class=\"token punctuation\">,</span> PASS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BankRecords.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">records</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BankRecords</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Client</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//setup static objects for IO processing</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">//array of BankRecords objects</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">BankRecords</span> robjs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">[</span><span class=\"token number\">600</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//arraylist to hold spreadsheet rows &amp; columns</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">//instance fields</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> region<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> income<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> married<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> children<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> save_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> current_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> mortgage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pep<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">//initialize reader object and set file path to root of project</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bank-Detail.csv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">//read each record in csv file</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token comment\">//parse each record in csv file by a comma ( , )</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token comment\">//into a list stored in the arraylist-> Arrays</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                array<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There was a problem loading the file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token function\">processData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//call function for processing record data</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">//create index for array while iterating thru arraylist</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">int</span> idx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">//create for each loop to cycle thru arraylist of values </span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">//and PASS that data into your record objects' setters </span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> rowData<span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">//initialize array of objects</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token comment\">//call setters below and populate them, item by item</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//get 1st column</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//get 2nd column</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setRegion</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIncome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMarried</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setChildren</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCar</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSave_act</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCurrent_act</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMortgage</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPep</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token comment\">/*continue processing arraylist item values into each array object -> robjs[] by index*/</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            idx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token comment\">//printData();  //call function to print objects held in memory       </span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token comment\">//1. Set appropriate headings for displaying first 25 records</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token comment\">//2. Create for loop and print each record objects instance data </span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token comment\">//3. Within for loop use appropriate formatting techniques to print out record detail  </span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token comment\">//Set heading</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First 25 Client details:\\n\\n%-10s\\t%-10s\\t%-10s\\t%-10s\\t%-10s\\t%-10s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ID\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Age\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Sex\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Region\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Income\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Mortgage\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">25</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token class-name\">String</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-10s\\t%-10d\\t%-10s\\t%-10s\\t%-10.2f\\t%-10s\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                    robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIncome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMortgage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>     * @return the id</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>     * @param id the id to set</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>     * @return the age</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>     * @param age the age to set</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>     * @return the sex</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token keyword\">return</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>     * @param sex the sex to set</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>     * @return the region</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token keyword\">return</span> region<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>     * @param region the region to set</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRegion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> region<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>region <span class=\"token operator\">=</span> region<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>     * @return the income</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getIncome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token keyword\">return</span> income<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>     * @param income the income to set</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setIncome</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> income<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>income <span class=\"token operator\">=</span> income<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>     * @return the married</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMarried</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        <span class=\"token keyword\">return</span> married<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>     * @param married the married to set</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMarried</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> married<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>married <span class=\"token operator\">=</span> married<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>     * @return the children</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        <span class=\"token keyword\">return</span> children<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"184\"></td><td><pre>     * @param children the children to set</pre></td></tr><tr><td data-num=\"185\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setChildren</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> children<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"190\"></td><td><pre>     * @return the car</pre></td></tr><tr><td data-num=\"191\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>        <span class=\"token keyword\">return</span> car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"196\"></td><td><pre>     * @param car the car to set</pre></td></tr><tr><td data-num=\"197\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCar</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> car<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>car <span class=\"token operator\">=</span> car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"202\"></td><td><pre>     * @return the save_act</pre></td></tr><tr><td data-num=\"203\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSave_act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>        <span class=\"token keyword\">return</span> save_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"208\"></td><td><pre>     * @param save_act the save_act to set</pre></td></tr><tr><td data-num=\"209\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSave_act</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> save_act<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>save_act <span class=\"token operator\">=</span> save_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"214\"></td><td><pre>     * @return the current_act</pre></td></tr><tr><td data-num=\"215\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCurrent_act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>        <span class=\"token keyword\">return</span> current_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"220\"></td><td><pre>     * @param current_act the current_act to set</pre></td></tr><tr><td data-num=\"221\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCurrent_act</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> current_act<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>current_act <span class=\"token operator\">=</span> current_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"226\"></td><td><pre>     * @return the mortgage</pre></td></tr><tr><td data-num=\"227\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMortgage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>        <span class=\"token keyword\">return</span> mortgage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"232\"></td><td><pre>     * @param mortgage the mortgage to set</pre></td></tr><tr><td data-num=\"233\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMortgage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> mortgage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mortgage <span class=\"token operator\">=</span> mortgage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"238\"></td><td><pre>     * @return the pep</pre></td></tr><tr><td data-num=\"239\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getPep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>        <span class=\"token keyword\">return</span> pep<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"244\"></td><td><pre>     * @param pep the pep to set</pre></td></tr><tr><td data-num=\"245\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pep<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pep <span class=\"token operator\">=</span> pep<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"249\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Client.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">records</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//read file detail</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//process file detail</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//print file detail</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LoanView.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">views</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSetMetaData</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Vector</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JFrame</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JScrollPane</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JTable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultTableModel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoanView</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// instantiate vector objects to hold column/row data for JTable</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Vector</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Vector</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> column <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token class-name\">ResultSetMetaData</span> metaData <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">int</span> columns <span class=\"token operator\">=</span> metaData<span class=\"token punctuation\">.</span><span class=\"token function\">getColumnCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">// get column names from table!</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token class-name\">String</span> cols <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> columns<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        cols <span class=\"token operator\">=</span> metaData<span class=\"token punctuation\">.</span><span class=\"token function\">getColumnName</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        column<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cols<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token comment\">// get row data from table!</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> row <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>columns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> columns<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          row<span class=\"token punctuation\">.</span><span class=\"token function\">addElement</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        data<span class=\"token punctuation\">.</span><span class=\"token function\">addElement</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token class-name\">DefaultTableModel</span> model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultTableModel</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token class-name\">JTable</span> table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JTable</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token class-name\">JFrame</span> frame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JFrame</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Loan Details\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      frame<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      frame<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JScrollPane</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      frame<span class=\"token punctuation\">.</span><span class=\"token function\">setDefaultCloseOperation</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      frame<span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      frame<span class=\"token punctuation\">.</span><span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      rs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//close ResultSet instance </span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMD 510. Object-Oriented App Develop",
                "Java"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmd-510/week-11/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmd-510/week-11/",
            "title": "Week 11. Java Database Connectivity",
            "date_published": "2020-11-08T08:11:12.000Z",
            "content_html": "<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"passing-an-sql-statement-to-the-dbms\"><a class=\"anchor\" href=\"#passing-an-sql-statement-to-the-dbms\">#</a> Passing an SQL Statement to the DBMS</h2>\n<p>Once you have established a connection, you must get a reference to a  <code>Statement</code>  object before you can issue SQL statements to the DBMS</p>\n<ul>\n<li>A  <code>Statement</code>  object has an  <code>executeQuery</code>  method that returns a <ins>reference</ins> to a  <code>ResultSet</code>  object</li>\n<li>A  <code>ResultSet</code>  object contains the <ins>results</ins> of the query</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Connection</span> conn <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>DB_URL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Statement</span> stmt <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> sqlStatement <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT Description FROM Coffee\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">ResultSet</span> result <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>sqlStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"getting-a-row-from-the-resultset-object\"><a class=\"anchor\" href=\"#getting-a-row-from-the-resultset-object\">#</a> Getting a Row from the ResultSet Object</h3>\n<ul>\n<li>\n<p>A  <code>ResultSet</code>  object has an internal <ins>cursor</ins></p>\n<ul>\n<li>Points to a specific row in the  <code>ResultSet</code></li>\n<li>The row to which it points is the  <code>current</code>  row</li>\n<li>Initially positioned just before the first row</li>\n<li>Can be moved from row to row to examine all rows<br />\n<img data-src=\"https://i.loli.net/2020/11/15/NvFKquzEPVAOtZy.png\" alt=\"\" /></li>\n</ul>\n</li>\n<li>\n<p>A  <code>ResultSet</code>  object's next method  <code>result.next();</code>  moves the cursor to the next row in the  <code>ResultSet</code></p>\n<ul>\n<li>moves to first row in a newly created  <code>ResultSet</code></li>\n<li>moves to the next row each time it is called<br />\n<img data-src=\"https://i.loli.net/2020/11/15/YEXCB21xOAfhM7w.png\" alt=\"\" /></li>\n</ul>\n</li>\n<li>\n<p>A  <code>ResultSet</code>  object's next method returns a Boolean value</p>\n<ul>\n<li><code>true</code>  if successfully moved to the next row</li>\n<li><code>false</code>  if there are no more rows</li>\n</ul>\n</li>\n<li>\n<p>A while loop can be used to move through all the rows of a newly created  <code>ResultSet</code></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// Process the current row.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"getting-columns-in-a-resultset-object\"><a class=\"anchor\" href=\"#getting-columns-in-a-resultset-object\">#</a> Getting Columns in a ResultSet Object</h3>\n<ul>\n<li>You use one of the  <code>ResultSet</code>  object's  <code>get</code>  methods to retrieve the contents of a specific column in the current row.</li>\n<li>Can pass an argument for <ins>either</ins> the column number or the column name</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Description\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getDouble</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ProdNum\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://i.loli.net/2020/11/15/CP8dHcEF3L6lifJ.png\" alt=\"\" /></p>\n<h2 id=\"inserting-rows-with-jdbc\"><a class=\"anchor\" href=\"#inserting-rows-with-jdbc\">#</a> Inserting rows with JDBC</h2>\n<p>To issue an  <code>INSERT</code>  statement, you must get a reference to a  <code>Statement</code>  object</p>\n<ul>\n<li>The  <code>Statement</code>  object has an  <code>executeUpdate</code>  method</li>\n<li>Accepts a string containing the SQL INSERT statement as an argument</li>\n<li>Returns an  <code>int</code>  value for the number of rows inserted</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sqlStatement <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO Coffee \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                      <span class=\"token string\">\"(ProdNum, Price, Description)\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                      <span class=\"token string\">\" VALUES \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                      <span class=\"token string\">\"('22-001', 8.65, 'Honduran Dark')\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>sqlStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>rows</code>  should contain the  <code>value 1</code> , indicating that one row was inserted</p>\n<h2 id=\"updating-rows-with-jdbc\"><a class=\"anchor\" href=\"#updating-rows-with-jdbc\">#</a> Updating Rows with JDBC</h2>\n<p>To issue an  <code>UPDATE</code>  statement, you must get a reference to a  <code>Statement</code>  object</p>\n<ul>\n<li>The  <code>Statement</code>  object has an  <code>executeUpdate</code>  method</li>\n<li>Accepts a string containing the SQL  <code>UPDATE</code>  statement as an argument</li>\n<li>Returns an  <code>int</code>  value for the number of rows affected</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sqlStatement <span class=\"token operator\">=</span> <span class=\"token string\">\"UPDATE Coffee \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                      <span class=\"token string\">\"SET Price = 9.95\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                      <span class=\"token string\">\" WHERE \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                      <span class=\"token string\">\"Description = 'Brazilian Decaf'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>sqlStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>rows</code>  indicates the number of rows that were changed</li>\n</ul>\n<h2 id=\"deleting-rows-with-jdbc\"><a class=\"anchor\" href=\"#deleting-rows-with-jdbc\">#</a> Deleting Rows with JDBC</h2>\n<p>To issue a  <code>DELETE</code>  statement, you must get a reference to a  <code>Statement</code>  object</p>\n<ul>\n<li>The  <code>Statement</code>  object has an  <code>executeUpdate</code>  method</li>\n<li>Accepts a string containing the SQL  <code>DELETE</code>  statement as an argument</li>\n<li>Returns an  <code>int</code>  value for the number of rows that were deleted</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sqlStatement <span class=\"token operator\">=</span> <span class=\"token string\">\"DELETE FROM Coffee \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t       <span class=\"token string\">\"WHERE ProdNum = '20-001'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>sqlStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>rows</code>  indicates the number of rows that were deleted</li>\n</ul>\n<h2 id=\"creating-a-new-database-with-java-db\"><a class=\"anchor\" href=\"#creating-a-new-database-with-java-db\">#</a> Creating a New Database with Java DB</h2>\n<p>The  <code>;create=true</code>  attribute creates a new database when appended to the database URL</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">\"jdbc:derby:EntertainmentDB;create=true\"</span></pre></td></tr></table></figure><ul>\n<li>Creates an empty database named  <code>EntertainmentDB</code></li>\n<li>The  <code>CREATE TABLE</code>  statement can be used to create tables</li>\n<li>Java DB creates a folder with the name of the database on your system</li>\n<li>Delete the database folder to delete the database</li>\n</ul>\n<h2 id=\"scrollable-result-sets\"><a class=\"anchor\" href=\"#scrollable-result-sets\">#</a> Scrollable Result Sets</h2>\n<p>By default, a ResultSet object is created with a read-only concurrency level and the cursor is limited to forward movement</p>\n<p>A scrollable result set can be created with the overloaded version of the  <code>Connection</code>  object's  <code>createStatement</code>  method</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conn<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> concur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>type</code>  is a constant for the scrolling type</li>\n<li><code>concur</code>  is a constant for the concurrency level</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Statement</span> stmt <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   conn<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">.</span>TYPE_SCROLL_INSENSITIVE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                        <span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">.</span>CONCUR_READ_ONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>Creates a scrollable result set that is read-only and insensitive to database changes</li>\n</ul>\n<h3 id=\"the-resultset-scrolling-types\"><a class=\"anchor\" href=\"#the-resultset-scrolling-types\">#</a> The ResultSet Scrolling Types</h3>\n<ul>\n<li>\n<p><code>ResultSet.TYPE_FORWARD_ONLY</code></p>\n<ul>\n<li>Default scrolling type</li>\n<li>Cursor moves forward only</li>\n</ul>\n</li>\n<li>\n<p><code>ResultSet.TYPE_SCROLL_INSENSITIVE</code></p>\n<ul>\n<li>Cursor moves both forward and backward</li>\n<li>Changes made to the database do not appear</li>\n</ul>\n</li>\n<li>\n<p><code>ResultSet.TYPE_SCROLL_SENSITIVE</code></p>\n<ul>\n<li>Cursor moves both forward and backward</li>\n<li>Changes made to the database appear as soon as they are made</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"the-resultset-concurrency-levels\"><a class=\"anchor\" href=\"#the-resultset-concurrency-levels\">#</a> The ResultSet Concurrency Levels</h3>\n<ul>\n<li>\n<p><code>ResultSet.CONCUR_READ_ONLY</code></p>\n<ul>\n<li>Default concurrency level</li>\n<li>Read-only version of data from the database</li>\n<li>Cannot change database by altering result set</li>\n</ul>\n</li>\n<li>\n<p><code>ResultSet.CONCUR_UPDATEABLE</code></p>\n<ul>\n<li>Result set is updateable</li>\n<li>Changes can be made to the result set and saved to the database</li>\n<li>Uses methods that allow changes to be made to the database without issuing SQL statements</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"resultset-navigation-methods\"><a class=\"anchor\" href=\"#resultset-navigation-methods\">#</a> ResultSet Navigation Methods</h2>\n<ul>\n<li>\n<p><code>first()</code> <br />\nMoves the cursor to the first row</p>\n</li>\n<li>\n<p><code>last()</code> <br />\nMoves the cursor to the last row</p>\n</li>\n<li>\n<p><code>next()</code> <br />\nMoves the cursor to the next row</p>\n</li>\n<li>\n<p><code>previous()</code> <br />\nMoves the cursor to the previous row</p>\n</li>\n<li>\n<p><code>relative(rows)</code> <br />\nMoves the cursor the number specified by the  <code>rows</code>  argument relative to the current row</p>\n<ul>\n<li>A positive  <code>rows</code>  value will move the cursor forward</li>\n<li>A negative  <code>rows</code>  value will move the cursor backward</li>\n</ul>\n</li>\n<li>\n<p><code>absolute(rows)</code> <br />\nMoves the cursor to the row number specified by the  <code>rows</code>  argument</p>\n<ul>\n<li>A  <code>rows</code>  value of 1 will move the cursor to the first row</li>\n<li>A  <code>rows</code>  value of 2 will move cursor to the second row</li>\n<li>And so on until the last row</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"determining-the-number-of-rows-in-a-result-set\"><a class=\"anchor\" href=\"#determining-the-number-of-rows-in-a-result-set\">#</a> Determining the Number of Rows in a Result Set</h3>\n<p>ResultSet navigation methods can be used to determine the number of rows in a result set</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t    <span class=\"token comment\">// Move to the last row</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> numRows <span class=\"token operator\">=</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getRow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Get the last row's number and store the value</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t    <span class=\"token comment\">// Move back to the first row</span></pre></td></tr></table></figure><h2 id=\"result-set-metadata\"><a class=\"anchor\" href=\"#result-set-metadata\">#</a> Result Set Metadata</h2>\n<ul>\n<li>\n<p>Metadata refers to data that describes other data</p>\n</li>\n<li>\n<p>A  <code>ResultSet</code>  object has metadata that describes a result set</p>\n</li>\n<li>\n<p>Can be used to determine many things about a result set</p>\n<ul>\n<li>Number of columns</li>\n<li>Column names</li>\n<li>Column data types</li>\n<li>And much more</li>\n</ul>\n</li>\n<li>\n<p>Useful for submitting SQL queries in applications</p>\n</li>\n<li>\n<p><code>ResultSetMetaData</code>  is an interface in the  <code>java.sql</code>  package</p>\n</li>\n<li>\n<p>The  <code>getMetaData</code>  method of a  <code>ResultSet</code>  object returns a reference to a  <code>ResultSetMetaData</code>  object.</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ResultSetMetaData</span> meta <span class=\"token operator\">=</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>Creates a ResultSetMetaData object reference variable named meta</li>\n</ul>\n<h3 id=\"a-few-resultsetmetadata-methods\"><a class=\"anchor\" href=\"#a-few-resultsetmetadata-methods\">#</a> A Few  <code>ResultSetMetaData</code>  Methods</h3>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>int getColumnCount()</code></td>\n<td>Returns the number of columns in the result set.</td>\n</tr>\n<tr>\n<td><code>String getColumnName(int col)</code></td>\n<td>Returns the name of the column specified by the integer  <code>col</code> . The first column is column 1.</td>\n</tr>\n<tr>\n<td><code>String getColumnTypeName(int col)</code></td>\n<td>Returns the name of the data type of the column specified by the integer  <code>col</code> . The first column is column 1. The data type name returned is the database-specific SQL data type.</td>\n</tr>\n<tr>\n<td><code>int getColumnDisplaySize(int col)</code></td>\n<td>Returns the display width, in characters, of the column specified by the integer  <code>col</code> . The first column is column 1.</td>\n</tr>\n<tr>\n<td><code>String getTableName(int col)</code></td>\n<td>Returns the name of the table associated with the column specified by the integer  <code>col</code> . The first column is column 1.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"the-jtable-class\"><a class=\"anchor\" href=\"#the-jtable-class\">#</a> The  <code>JTable</code>  Class</h2>\n<p>The  <code>JTable</code>  class is a Swing component that displays data in a two-dimensional table</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Jtable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rowData<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> colNames<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>rowData</code>  is a two-dimensional array of objects\n<ul>\n<li>Contains data that will be displayed in the table</li>\n<li>Each row becomes a row of data in the table</li>\n<li>Each column becomes a column of data in the table</li>\n<li><code>JTable</code>  calls  <code>toString</code>  method of each object to get values</li>\n</ul>\n</li>\n<li><code>colNames</code>  is a one-dimensional array of objects\n<ul>\n<li>Contains the column names to display</li>\n<li><code>JTable</code>  calls  <code>toString</code>  method of each object to get value</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"setting-up-a-simple-jtable-component\"><a class=\"anchor\" href=\"#setting-up-a-simple-jtable-component\">#</a> Setting Up a Simple JTable Component</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> colNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Telephone\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rowData <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Jean\"</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"555-2222\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Tim\"</span><span class=\"token punctuation\">,</span>   <span class=\"token string\">\"555-1212\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Matt\"</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"555-9999\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Rose\"</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"555-4545\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Geri\"</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"555-5214\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Shawn\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"555-7821\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Renee\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"555-9640\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"Joe\"</span><span class=\"token punctuation\">,</span>   <span class=\"token string\">\"555-8657\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">JTable</span> myTable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JTable</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">,</span> colNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">JScrollPane</span> scrollPane <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JScrollPane</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JTable</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://i.loli.net/2020/11/15/d9WPNufSVvlmgpI.png\" alt=\"\" /></p>\n<ul>\n<li>The figure shows an example of how the table appears in a frame</li>\n</ul>\n<h3 id=\"displaying-query-results-in-a-jtable\"><a class=\"anchor\" href=\"#displaying-query-results-in-a-jtable\">#</a> Displaying Query Results in a JTable</h3>\n<p><img data-src=\"https://i.loli.net/2020/11/15/f9yg1wdB2CsochT.png\" alt=\"\" /><br />\nThis window appears first<br />\nThe user enters a  <code>SELECT</code>  statement and clicks the  <code>Submit</code>  button</p>\n<p><img data-src=\"https://i.loli.net/2020/11/15/U4RCLgNdBzOWimq.png\" alt=\"\" /><br />\nThis window appears next<br />\nIt displays the results in a  <code>Jtable</code>  component</p>\n<h2 id=\"jdbc-auto-commit-mode\"><a class=\"anchor\" href=\"#jdbc-auto-commit-mode\">#</a> JDBC Auto Commit Mode</h2>\n<ul>\n<li>By default, the JDBC Connection class operates in auto commit mode.</li>\n<li>In auto commit mode\n<ul>\n<li>All updates that are made to the database are made permanent as soon as they are executed.</li>\n</ul>\n</li>\n<li>When auto commit mode is turned off\n<ul>\n<li>Changes do not become permanent until a commit command is executed</li>\n<li>A rollback command can be used to undo changes</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"jdbc-transaction-methods\"><a class=\"anchor\" href=\"#jdbc-transaction-methods\">#</a> JDBC Transaction Methods</h2>\n<ul>\n<li>\n<p>To turn auto commit mode off</p>\n<ul>\n<li>Call the  <code>Connection</code>  class's  <code>setAutoCommit</code>  method</li>\n<li>Pass the argument  <code>false</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conn<span class=\"token punctuation\">.</span><span class=\"token function\">setAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>To execute a commit command</p>\n<ul>\n<li>Call the  <code>Connection</code>  class's  <code>commit</code>  method</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conn<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>To execute a rollback command</p>\n<ul>\n<li>Call the  <code>Connection</code>  class's  <code>rollback</code>  method</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conn<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>conn<span class=\"token punctuation\">.</span><span class=\"token function\">setAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Attempt the transaction</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// Update the inventory records.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tstmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>updateStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// Add the order to the UnpaidOrder table.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>insertStatement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// Commit all these updates.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// The commit method is called in the try block</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> ex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// Roll back the changes.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tconn<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// The rollback method is called in the catch block</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"stored-procedures\"><a class=\"anchor\" href=\"#stored-procedures\">#</a> Stored Procedures</h2>\n<ul>\n<li>Many commercial database systems allow you to create SQL statements and store them in the DBMS itself</li>\n<li>These SQL statements are called  <code>stored procedures</code>\n<ul>\n<li>Can be executed by other applications using the DBMS</li>\n<li>Ideal for SQL statements that are used often in a variety of applications</li>\n<li>Usually execute faster than SQL statements that are submitted from applications outside the DBMS</li>\n</ul>\n</li>\n<li>Each DBMS has its own syntax for creating a stored procedure in SQL</li>\n<li>To execute a stored procedure, you must create a  <code>CallableStatement</code>  object</li>\n<li><code>CallableStatement</code>  is an interface in the  <code>java.sql</code>  package</li>\n<li>To create a  <code>CallableStatement</code>  object, you call the  <code>Connection</code>  class's  <code>prepareCall</code>  statement</li>\n</ul>\n<h2 id=\"jdbc-dates\"><a class=\"anchor\" href=\"#jdbc-dates\">#</a> JDBC Dates</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Statement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JDBCDates</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// instance fields - db objects</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token class-name\">Connection</span> connect <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token class-name\">Statement</span> statement <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">// Setup the connection with the DB</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tconnect <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc:mysql://www.papademas.net:3307/mydb?autoReconnect=true&amp;useSSL=false\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token operator\">+</span> <span class=\"token string\">\"&amp;user=dbuser&amp;password=db1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> connect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">// set up SQL Query table creation string</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> createDateTable <span class=\"token operator\">=</span> <span class=\"token string\">\"CREATE TABLE jp_dates(id INT AUTO_INCREMENT PRIMARY KEY, startDate DATETIME)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token comment\">//*******create table</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\tstatement <span class=\"token operator\">=</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tstatement<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>createDateTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created table in given database...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token comment\">//*******end create table</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token comment\">// close connection/statement objects</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\tstatement<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\tconnect<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addRecs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token comment\">// objects for SQL Query inserts</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token class-name\">PreparedStatement</span> ps <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">)</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t\t               <span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Insert into jp_dates(startDate) values(?)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>Timestamp</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>Timestamp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tps<span class=\"token punctuation\">.</span><span class=\"token function\">setTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tps<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token comment\">//or alternatively</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tstatement = getConnection().createStatement();</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\tint result = statement</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t \t\t.executeUpdate(\"Insert into jp_dates(startDate) values(now())\");</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t */</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Record inserted into given database...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token function\">createTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token function\">addRecs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"db-exercise\"><a class=\"anchor\" href=\"#db-exercise\">#</a> DB Exercise</h1>\n<h2 id=\"java-database-connectivity-jdbc\"><a class=\"anchor\" href=\"#java-database-connectivity-jdbc\">#</a> Java Database Connectivity (JDBC)</h2>\n<ol>\n<li>\n<p>Create a <strong>Java Project</strong> and name it  <code>CoffeeConnect</code> .</p>\n</li>\n<li>\n<p>Download the jar file accompanying this exercise from Blackboard. mysql-connector-java-8.0.22.zip</p>\n<ol>\n<li>\n<p>Create a folder in your project folder called  <code>libs</code> .</p>\n</li>\n<li>\n<p>Copy the jar file into your  <code>libs</code>  folder.</p>\n</li>\n<li>\n<p>Right click on your project folder and choose <strong>Build Path &gt; Configure Build Path…</strong><br />\n<img data-src=\"https://i.loli.net/2020/11/15/Ag5KwurGPq3BeiD.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Click on <strong>Libraries</strong> tab then <strong>Modulepath</strong>, then the <strong>Add JARs…</strong> button<br />\n<img data-src=\"https://i.loli.net/2020/11/15/RowN8nYpzPqcKmh.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>At the pop up expand your  <code>Coffee_Connect</code>  folder and expand your  <code>libs</code>  folder. Choose your jar file and press OK.<br />\n<img data-src=\"https://i.loli.net/2020/11/15/pVYqr3hwiLQFyd5.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>Click Apply and Close to exit.</p>\n</li>\n</ol>\n</li>\n<li>\n<p>Download the  <code>Dao</code>  java file accompanying this exercise from Blackboard, and copy and paste the file into your  <code>src</code>  folder. Do the same for the  <code>TableViewer</code>  file as well.</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Dao.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PreparedStatement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Statement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// Code database URL</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> DB_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://www.papademas.net:3307/510labs?autoReconnect=true&amp;useSSL=false\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// Database credentials</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> USER <span class=\"token operator\">=</span> <span class=\"token string\">\"db510\"</span><span class=\"token punctuation\">,</span> PASS <span class=\"token operator\">=</span> <span class=\"token string\">\"510\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token class-name\">Statement</span> stmt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span>DB_URL<span class=\"token punctuation\">,</span> USER<span class=\"token punctuation\">,</span> PASS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Dao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token comment\">// initialize any objects here</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tstmt <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> menuItems <span class=\"token operator\">=</span> <span class=\"token string\">\"1.Create table\\n2.Insert recs\\n3.Update recs\\n4.Delete recs\\n5.View Recs (Console)\\n6.View Recs (Window)\\n7.Exit\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>menuItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createTables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">// finish implementing...</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updates</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> SQL <span class=\"token operator\">=</span> <span class=\"token string\">\"Update papa_coffee SET prod_desc = ? WHERE id = ?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">// use prepared statement</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PreparedStatement</span> pstmt <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">prepareStatement</span><span class=\"token punctuation\">(</span>SQL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\tpstmt<span class=\"token punctuation\">.</span><span class=\"token function\">setString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\tpstmt<span class=\"token punctuation\">.</span><span class=\"token function\">setInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\tpstmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deletes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token comment\">// finish implementing...</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">inserts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token comment\">// create an insert statement</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inserting records...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sleep for 3 seconds</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\tsql <span class=\"token operator\">=</span> <span class=\"token string\">\"Insert Into papa_coffee(prod_name,prod_desc,prod_price)\"</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t\t\t<span class=\"token operator\">+</span> <span class=\"token string\">\" values('J Papa''s','Strong Brew',29.55)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t<span class=\"token comment\">// execute query for insert(s)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\tstmt <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\tstmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeUpdate</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t<span class=\"token comment\">// System.out.println(\"Records inserted\");</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">retrieveRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t<span class=\"token comment\">// get record data from result set object</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t<span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Select * from papa_coffee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">String</span> desc <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prod_desc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">double</span> price <span class=\"token operator\">=</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prod_price\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// print records to console</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Id : \"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t  Desc. : \"</span> <span class=\"token operator\">+</span> desc <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t  Price: \"</span> <span class=\"token operator\">+</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\trs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">retrieveRecords2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\t<span class=\"token comment\">// get record data from result set object</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t<span class=\"token class-name\">ResultSet</span> rs <span class=\"token operator\">=</span> stmt<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Select * from papa_coffee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">TableViewer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">runView</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// display records in window</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\trs<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Dao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t<span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\t<span class=\"token function\">menu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> choice <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>choice<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span> <span class=\"token function\">createTables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t\t\t<span class=\"token function\">inserts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t\t\t<span class=\"token function\">updates</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nova Coffee\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// delete some id</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// deletes(id);</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t\t\t<span class=\"token function\">retrieveRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t\t\t<span class=\"token function\">retrieveRecords2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bye for now!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>TableViewer.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResultSetMetaData</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Vector</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JFrame</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JScrollPane</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JTable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>swing<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultTableModel</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TableViewer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResultSet</span> rs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">// instantiate vector objects to hold column/row data for JTable</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Vector</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Vector</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> column <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token class-name\">ResultSetMetaData</span> metaData <span class=\"token operator\">=</span> rs<span class=\"token punctuation\">.</span><span class=\"token function\">getMetaData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> columns <span class=\"token operator\">=</span> metaData<span class=\"token punctuation\">.</span><span class=\"token function\">getColumnCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token comment\">// get column names from table!</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token class-name\">String</span> cols <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> columns<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\tcols <span class=\"token operator\">=</span> metaData<span class=\"token punctuation\">.</span><span class=\"token function\">getColumnName</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\tcolumn<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cols<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token comment\">// get row data from table!\t\t\t\t</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> row <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>columns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> columns<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t\trow<span class=\"token punctuation\">.</span><span class=\"token function\">addElement</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\tdata<span class=\"token punctuation\">.</span><span class=\"token function\">addElement</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token class-name\">DefaultTableModel</span> model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultTableModel</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token class-name\">JTable</span> table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JTable</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token class-name\">JFrame</span> frame <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JFrame</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Record Details\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JScrollPane</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setDefaultCloseOperation</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\tframe<span class=\"token punctuation\">.</span><span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token comment\">// rs.close(); //close ResultSet instance </span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Your package should resemble something like this below.<br />\n<img data-src=\"https://i.loli.net/2020/11/15/c5fMHu7VqZFRsbB.png\" alt=\"\" /></p>\n<p>Run your app from the  <code>Dao.java</code>  file and work some of the CRUD operations!</p>\n<p>Modify all references to your own table names in to your Dao file you created in the first DB Exercise #1.</p>\n",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMD 510. Object-Oriented App Develop",
                "Java",
                "Database",
                "JDBC"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmd-534/lecture-7/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmd-534/lecture-7/",
            "title": "Lecture 7. Information Visualization",
            "date_published": "2020-11-06T07:29:08.000Z",
            "content_html": "<h1 id=\"storyboards\"><a class=\"anchor\" href=\"#storyboards\">#</a> Storyboards</h1>\n<h2 id=\"why\"><a class=\"anchor\" href=\"#why\">#</a> Why</h2>\n<ul>\n<li>\n<p>We've collected data from real users and from competitive products<br />\n 我们已经从真实用户和竞争产品中收集了数据</p>\n</li>\n<li>\n<p>We've determined the Mental Models our users have by developing Personas<br />\n 我们通过开发 Personas 来确定用户拥有的心理模型</p>\n</li>\n<li>\n<p>We have a good idea of the Scenarios of use that our users will attempt<br />\n 我们对用户会尝试的使用场景有很好的了解</p>\n</li>\n<li>\n<p>It's pretty tempting to go find a computer and start building something!<br />\n 很容易找到计算机并开始构建东西！</p>\n</li>\n<li>\n<p>We stop thinking conceptually and start thinking pragmatically<br />\n 我们停止从概念上思考，开始进行务实思考</p>\n</li>\n<li>\n<p>We focus on the software tool's constraints instead of the problem's constraints<br />\n 我们专注于软件工具的约束，而不是问题的约束</p>\n</li>\n<li>\n<p>We pay attention to painstaking details (colors, font sizes, pixels) instead of overarching concepts (users, goals, needs)<br />\n 我们注重细节（颜色，字体大小，像素），而不是总体概念（用户，目标，需求）</p>\n</li>\n</ul>\n<h2 id=\"storyboard-overview\"><a class=\"anchor\" href=\"#storyboard-overview\">#</a> Storyboard overview</h2>\n<ul>\n<li>\n<p>Borrowed from the film/animation/comic industries<br />\n 从电影 / 动画 / 漫画行业借来的</p>\n<ul>\n<li>One panel = One Scene<br />\n 一个面板 = 一个场景</li>\n<li>Presented to a group of people<br />\n 介绍给一群人</li>\n<li>Gauge their reactions, understanding<br />\n 衡量他们的反应，理解</li>\n<li>Takes time up front, saves time later<br />\n 提前安排时间，以后节省时间</li>\n</ul>\n</li>\n<li>\n<p>Intended to visualize our scenarios<br />\n 旨在可视化我们的方案</p>\n</li>\n<li>\n<p>Provide a mechanism to gracefully move from conceptual design to screen design<br />\n 提供从概念设计到屏幕设计的优雅过渡机制</p>\n</li>\n<li>\n<p>Allow us to make mistakes early, in paper (cheap and quick), instead of later, in software (expensive and tedious)<br />\n 让我们尽早在纸上（便宜又快速）犯错误，而不是以后在软件上（昂贵而乏味）犯错误。</p>\n</li>\n<li>\n<p>Getting feedback from the users early in the process<br />\n 在此过程的早期就获得用户的反馈</p>\n<ul>\n<li>In initial tests to gauge user reaction<br />\n 在初步测试中评估用户反应</li>\n<li>In study of customers to match with their ideas<br />\n 研究客户以符合他们的想法</li>\n<li>To rapidly design interfaces from interaction with potential users<br />\n 通过与潜在用户的互动来快速设计界面</li>\n<li>To clearly articulate an idea with clients or management<br />\n 与客户或管理层明确表达一个想法</li>\n</ul>\n</li>\n<li>\n<p>Help with the design process<br />\n 帮助设计过程</p>\n<ul>\n<li>The individual steps of a design are made clear by this process<br />\n 通过此过程可以明确设计的各个步骤</li>\n<li>Complex interactions can be broken into multiple screens if the complexity is displayed by the storyboard process<br />\n 如果情节提要过程显示复杂性，则可以将复杂的交互分为多个屏幕</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"storyboarding\"><a class=\"anchor\" href=\"#storyboarding\">#</a> Storyboarding</h2>\n<p>分镜头脚本设计</p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/06/wuBdgTQKUsa9Cly.jpg\" alt=\"\" title=\"gas pump\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/06/WyHMxZXcGn2RowD.jpg\" alt=\"\" title=\"grocery app\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/06/uHoy4skVm7x8FG5.jpg\" alt=\"\" title=\"my muse\" /></p>\n<ul>\n<li>Storyboard drawings do not need to be perfect.<br />\n 情节提要板图纸不一定是完美的。</li>\n<li>The purpose of a storyboard is to get an idea across to a potential user.<br />\n 故事板的目的是将想法传达给潜在用户。</li>\n<li>In fact, if the drawings are of poor quality –it is better for the use of explaining an activity.<br />\n 实际上，如果图纸质量较差–最好用于解释活动。</li>\n<li>Perfectly finished drawings distract the observer to the color, accuracy etc. of the drawing rather than the interaction process.<br />\n 完美完成的工程图，使观察者分散到工程图的颜色、准确性等方面，而不是交互过程。</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/11/06/Yw7ylUdB2MR1qiF.jpg\" alt=\"\" title=\"Credits: university of Edinburgh\" /></p>\n<h1 id=\"information-visualization\"><a class=\"anchor\" href=\"#information-visualization\">#</a> Information Visualization</h1>\n<p>Data Explosion</p>\n<ul>\n<li>Society is getting more and more complex\n<ul>\n<li>There is just simply more stuff</li>\n</ul>\n</li>\n<li>Computers, internet and web give people access to an incredible amount of data\n<ul>\n<li>news, sports, financial, purchases, etc.</li>\n</ul>\n</li>\n<li>We are in an age where we have become dependent on data. Some call it the age of big data.</li>\n</ul>\n<p>Data Overload</p>\n<ul>\n<li>Confound: How to make use of the data\n<ul>\n<li>How do we make sense of the data</li>\n<li>How do we harness data in decision making processes</li>\n<li>How do we avoid being overwhelmed<br />\n<img data-src=\"https://i.loli.net/2020/11/17/4d6XwEDRGcxYShy.jpg\" alt=\"\" /></li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/11/18/86ZJt9NS2gFaoQL.jpg\" alt=\"\" title=\"The Problem\" /></p>\n<p>Human Vision</p>\n<ul>\n<li>Highest Bandwidth Sense</li>\n<li>Fast, Parallel</li>\n<li>Pattern Recognition</li>\n<li>Pre-attentive</li>\n<li>Extends memory and cognitive capacity</li>\n<li>People think visually</li>\n<li>Our challenge is to transform data into information –preferably visual</li>\n</ul>\n<h2 id=\"why-2\"><a class=\"anchor\" href=\"#why-2\">#</a> Why</h2>\n<p>Because of the way the human brain processes information, using charts or graphs to visualize large amounts of complex data is easier than poring over spreadsheets or reports.<br />\n 由于人脑处理信息的方式，使用图表或图形来可视化大量复杂数据要比遍历电子表格或报告容易。</p>\n<p>Data visualization is a quick, easy way to convey concepts in a universal manner –and you can experiment with different scenarios by making slight adjustments.<br />\n 数据可视化是一种快速，轻松地以通用方式传达概念的方法 - 您可以通过稍作调整来尝试不同的方案。</p>\n<p>A visualization is a form of external cognition. Just like writing down a column of numbers helps you add them, drawing a picture of data in the right way helps you see patterns and relationships that would otherwise be invisible. Your perceptual system contributes to the thinking process when your data is visualized.<br />\n 可视化是外部认知的一种形式。 就像写下一列数字可以帮助您添加数字一样，以正确的方式绘制数据图也可以帮助您查看原本不可见的模式和关系。 当您的数据可视化时，您的感知系统有助于思考过程。</p>\n<h2 id=\"what\"><a class=\"anchor\" href=\"#what\">#</a> What</h2>\n<ul>\n<li>Often thought of as a process for making graphic or image<br />\n 通常被认为是制作图形或图像的过程</li>\n<li>Really it is a cognitive process<br />\n 确实是一个认知过程\n<ul>\n<li>Form a mental image of something<br />\n 形成事物的心理形象</li>\n<li>Internalize an understanding<br />\n 内化理解</li>\n</ul>\n</li>\n<li>The purpose of visualization is insight not pictures<br />\n 可视化的目的是洞察力而不是图片\n<ul>\n<li>Insight: decision making, discovery, explanation<br />\n 洞察力：决策，发现，解释</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"how\"><a class=\"anchor\" href=\"#how\">#</a> How</h2>\n<ul>\n<li>Motivation<br />\n 动机\n<ul>\n<li>Why we visualize, historical examples<br />\n 为什么我们想像历史例子</li>\n</ul>\n</li>\n<li>Using space well<br />\n 善用空间\n<ul>\n<li>Scatter plots, tree maps, tag clouds<br />\n 散点图，树图，标签云</li>\n</ul>\n</li>\n<li>Interactivity<br />\n 交互性\n<ul>\n<li>Overview, zoom and filter, details on demand<br />\n 概述，缩放和过滤，按需提供详细信息</li>\n</ul>\n</li>\n<li>Toolkits for visualization<br />\n 可视化工具包</li>\n</ul>\n<h3 id=\"main-idea\"><a class=\"anchor\" href=\"#main-idea\">#</a> Main Idea</h3>\n<ul>\n<li>\n<p>Visuals help us think<br />\n 视觉帮助我们思考</p>\n<ul>\n<li>Provide a frame of reference, a temporary storage area<br />\n 提供一个参考系，一个临时存储区</li>\n<li>Seeing is believing<br />\n 眼见为实</li>\n<li>A picture is worth a thousand words<br />\n 一张图片值一千字</li>\n</ul>\n</li>\n<li>\n<p>External cognition aid<br />\n 外部认知辅助</p>\n<ul>\n<li>Role of external world in thinking and reason<br />\n 外部世界在思想和理性中的作用</li>\n<li>An illustrative example<br />\n 示例</li>\n</ul>\n</li>\n<li>\n<p>Information visualization<br />\n 信息可视化</p>\n<ul>\n<li>Items, entities, things which do not have a direct physical correspondence<br />\n 没有直接物理对应关系的项目，实体，事物</li>\n<li>Notion of abstractness of entities is important<br />\n 实体的抽象性概念很重要</li>\n<li>Examples: baseball statistics, stock trends, political data etc.<br />\n 例如：棒球统计，股票趋势，政治数据等。</li>\n</ul>\n</li>\n<li>\n<p>Analyze<br />\n 分析</p>\n<ul>\n<li>Think with your perceptual system<br />\n 思考您的感知系统</li>\n<li>Play with the data to understand it<br />\n 玩数据以了解它</li>\n</ul>\n</li>\n<li>\n<p>Present<br />\n 现在</p>\n<ul>\n<li>Convey information to others<br />\n 向他人传达信息</li>\n<li>Collaborate<br />\n 合作</li>\n<li>Highlight important facts<br />\n 突出重要事实</li>\n<li>Make a decision<br />\n 作出决定</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"examples\"><a class=\"anchor\" href=\"#examples\">#</a> Examples</h2>\n<h3 id=\"challenger-explosion\"><a class=\"anchor\" href=\"#challenger-explosion\">#</a> Challenger Explosion</h3>\n<p>The cause of the explosion was a breached O-ring in one of its rocket boosters. The O-ring failed because temperatures were well below freezing when the shuttle launched, and the material of the O-ring wasn't resilient enough to maintain the seal.</p>\n<p><img data-src=\"https://i.loli.net/2020/11/18/fMpegIl4A2L7r9x.jpg\" alt=\"\" /></p>\n<p>Some of the information used in the decision was presented this way. <strong>Tables are a form of visualization, but a weak one.</strong> They don't exploit all the capabilities of our visual systems to perceive and to think; they don't exploit all the dimensions of our visual systems.</p>\n<p><img data-src=\"https://i.loli.net/2020/11/18/rbLDFU2fTeBnlHM.jpg\" alt=\"\" /></p>\n<p>Here's another way to present it (a reproduction of a visualization that was actually used in the decision-making process before the Challenger launch). Each pair of rockets represents an actual pair of rockets (A and B) launched on a prior shuttle mission (SRM, numbered 1 to 24).</p>\n<p>The launches are ordered by air temperature at launch (written sideways on the top of the rocket).</p>\n<p><img data-src=\"https://i.loli.net/2020/11/18/7SX3r62JRTuZDUg.jpg\" alt=\"\" /></p>\n<p>Here is Edward Tufte'sredesign of the visualization, showing the same data. First, it dramatically simplifies the display, doing away with the rocket pictures in favor of much stronger visibility of the essential information (temperature and O-ring damage). Second, it changes the x-position from merely showing the ordering of the temperature variable, and instead uses it to show temperature in a quantitative way. These changes have a dramatic effect on the story told by the display, especially when we add the additional piece of information that the current temperature (when the decision makers were considering the launch) was well below freezing –far to the left on the graph.</p>\n<h2 id=\"summary\"><a class=\"anchor\" href=\"#summary\">#</a> Summary</h2>\n<ul>\n<li>\n<p>A good infovizprovides three things<br />\n 一个好的信息提供了三件事</p>\n<ul>\n<li>Overview<br />\n 概述</li>\n<li>Zoom and Filter<br />\n 缩放和滤镜</li>\n<li>Details on demand<br />\n 按需详情</li>\n<li>In a graphical user interface, the user can interact with and change the visualization with the above criteria<br />\n 在图形用户界面中，用户可以按照上述条件与可视化进行交互并更改可视化</li>\n</ul>\n</li>\n<li>\n<p>Provide an overview that lets the user see all the data, get a big picture view of what's where, and see important relationships at a glance<br />\n 提供概述，使用户可以查看所有数据，大范围查看概况，并一目了然地查看重要关系</p>\n</li>\n<li>\n<p>Provide the ability to zoom and filter the visualization, so that the user can reduce the (probably overwhelming) overview down to a subset of the data that they want to study more carefully<br />\n 提供缩放和过滤可视化效果的功能，以便用户可以将（可能是压倒性的）概览缩小到他们想要更仔细研究的数据子集</p>\n</li>\n<li>\n<p>Provide more details on demand. Hovering over a point displays its title. Clicking on a point brings up a more detailed, probably more textual representation of a data item<br />\n 按需提供更多详细信息。 将鼠标悬停在一个点上会显示其标题。 单击某个点将显示数据项的更详细，可能更多的文本表示形式</p>\n</li>\n</ul>\n<h1 id=\"internationalization-and-localization\"><a class=\"anchor\" href=\"#internationalization-and-localization\">#</a> Internationalization and Localization</h1>\n<h2 id=\"why-3\"><a class=\"anchor\" href=\"#why-3\">#</a> Why</h2>\n<blockquote>\n<p>Note: These are in addition to all the previous recommendations / guidelines<br />\n 注意：这些是以前所有建议 / 准则的补充</p>\n</blockquote>\n<ul>\n<li>Used in more than one country<br />\n 在多个国家使用</li>\n<li>Not just language translation<br />\n 不仅仅是语言翻译</li>\n<li>English versions of products may be used all over the world<br />\n 产品的英文版本可能在世界范围内使用</li>\n<li>Reviews of products may mention international usability issues<br />\n 产品评论可能会提及国际可用性问题</li>\n<li>All web sites are globally accessible<br />\n 所有网站均可全球访问</li>\n<li>Providing multiple language versions<br />\n 提供多种语言版本</li>\n<li>Making the English version more accessible<br />\n 使英语版本更易于使用</li>\n</ul>\n<h2 id=\"what-2\"><a class=\"anchor\" href=\"#what-2\">#</a> What</h2>\n<dl>\n<dt>Internationalization 国际化</dt>\n<dd>One design that can be used world-wide<br />\n 一种可以在世界范围内使用的设计</dd>\n<dt>Localization 本地化</dt>\n<dd>Different designs customized to different languages<br />\n 针对不同语言定制的不同设计</dd>\n</dl>\n<p>Essentially, internationalization separates the language-specific parts of the interface from the rest of the code, so that those parts can be easily replaced<br />\n 本质上，国际化将接口的语言特定部分与其余代码分开，以便可以轻松替换这些部分</p>\n<p>The process of making a user interface ready for translation is called internationalization<br />\n 使用户界面准备好进行翻译的过程称为 internationalization 国际化</p>\n<p>Actually doing this translation for a particular language and culture is called localization.<br />\n 实际上，针对特定语言和文化的翻译称为 localization 本地化。</p>\n<h2 id=\"how-2\"><a class=\"anchor\" href=\"#how-2\">#</a> How</h2>\n<ul>\n<li>\n<p>Not just translating the interface<br />\n 不只是翻译界面</p>\n<ul>\n<li>Web sites may have different content<br />\n 网站可能具有不同的内容\n<ul>\n<li>e.g. German yahoo has &quot;Sports&quot; on front tab, compared to US Yahoo &quot;Finance&quot;<br />\n与美国雅虎&quot; 财务 &quot;相比，德国雅虎的前置标签为&quot; 体育 &quot;</li>\n<li>And different icons for sports:<br />\n 以及不同的运动图标：</li>\n</ul>\n</li>\n<li>Different sizes of language may require redesign<br />\n 语言的不同大小可能需要重新设计\n<ul>\n<li>But automatic layout can help<br />\n 但是自动布局可以帮助</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Indicate content that is not translated <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5raXQuZWR1\">www.kit.edu</span><br />\n 指示未翻译的内容</p>\n</li>\n<li>\n<p>When there is a choice of language<br />\n 有语言选择时</p>\n<ul>\n<li>Don't use flags to indicate language: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydXNzZWxsLW5ld3Rvbi5pdC8=\">http://www.russell-newton.it/</span><br />\n 不要使用标记来表示语言\n<ul>\n<li>US vs. Canada vs. England<br />\n 美国 vs. 加拿大 vs. 英国</li>\n</ul>\n</li>\n<li>Use language's own name for itself (ENGLISH, ESPAÑOL)<br />\n 自行使用语言的名称</li>\n<li>Good place for pictures of text (if fonts aren't loaded)<br />\n 文本图片的好地方（如果未加载字体）</li>\n</ul>\n</li>\n<li>\n<p>First page in default language, so, many won't need extra click<br />\n 首页使用默认语言，因此，许多页面不需要额外的点击</p>\n<ul>\n<li>Make links for other languages easy to find (e.g., <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5rbnRvLm9yLmtyLw==\">www.knto.or.kr/</span>)<br />\n 使其他语言的链接易于查找</li>\n<li>Not: <span class=\"exturl\" data-url=\"aHR0cDovL3RoYWkudG91cmlzbXRoYWlsYW5kLm9yZy9ob21l\">http://thai.tourismthailand.org/home</span></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"translation\"><a class=\"anchor\" href=\"#translation\">#</a> Translation</h3>\n<p>Every piece of text that might be shown to the user is a potential candidate for translation, like menu items and button labels and also text drawn with stroke drawing calls, and text embedded in pixel images<br />\n 可能会向用户显示的每条文本都是潜在的翻译候选对象，例如菜单项和按钮标签，以及通过描边绘制调用绘制的文本，以及嵌入像素图像中的文本</p>\n<p>Translation can easily change the size or aspect ratio of the text; German labels tend to be much longer than English ones, for example<br />\n 翻译可以轻松更改文本的大小或长宽比； 例如，德国标签往往比英语标签长</p>\n<p>Error messages also need to be translated, of course –which is another reason not to expose internal system names in error messages<br />\n 当然，错误消息也需要翻译 - 这是另一个不在错误消息中公开内部系统名称的原因</p>\n",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMD 534. Human Computer Interaction",
                "人机交互"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmd-534/lecture-6/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmd-534/lecture-6/",
            "title": "Lecture 6. Aesthetics in HCI",
            "date_published": "2020-10-29T08:09:18.000Z",
            "content_html": "<h1 id=\"aesthetics-in-hci\"><a class=\"anchor\" href=\"#aesthetics-in-hci\">#</a> Aesthetics in HCI</h1>\n<p>人机交互中的美学</p>\n<p>Traditional emphasis on usability is now giving way to include user experience as a measure of good UI design.<br />\n 传统上对可用性的强调正逐渐让位，包括用户体验在内，作为衡量良好 UI 设计的方法。</p>\n<h2 id=\"various-movements-in-art\"><a class=\"anchor\" href=\"#various-movements-in-art\">#</a> Various Movements in Art</h2>\n<p>各种艺术运动</p>\n<table>\n<tbody>\n<tr>\n<td>Greek and Roman</td>\n<td>希腊和罗马</td>\n</tr>\n<tr>\n<td>Medieval</td>\n<td>中世纪</td>\n</tr>\n<tr>\n<td>Renaissance</td>\n<td>文艺复兴</td>\n</tr>\n<tr>\n<td>Baroque</td>\n<td>巴洛克式</td>\n</tr>\n<tr>\n<td>Neo Classical</td>\n<td>新古典</td>\n</tr>\n<tr>\n<td>Realism</td>\n<td>现实主义</td>\n</tr>\n<tr>\n<td>Impressionism</td>\n<td>印象派</td>\n</tr>\n<tr>\n<td>Cubism</td>\n<td>立体主义</td>\n</tr>\n<tr>\n<td>Abstract Art</td>\n<td>抽象艺术</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"golden-proportions-黄金比例\"><a class=\"anchor\" href=\"#golden-proportions-黄金比例\">#</a> Golden Proportions 黄金比例</h1>\n<p>Golden proportions are found both in nature and in man-made structures<br />\n 在自然界和人造结构中都可以找到黄金比例</p>\n<ul>\n<li>Studies have shown that humans have a preference for Golden Proportions<br />\n 研究表明，人类偏爱黄金比例</li>\n<li>Golden proportions consist of the golden ratio and are closely related to Fibonacci sequence<br />\n 黄金比例由黄金分割率组成，与斐波那契数列密切相关\n<ul>\n<li>The golden ratio is one where the ratio of the smaller segment to the larger segment is the same as the larger segment to the sum of both segments.<br />\n 黄金分割率是较小部分与较大部分之比，与较大部分与两个部分之和之比相同的比率。</li>\n<li>The golden proportion is a visual representation of the golden number (Φ) which is approximately 1.618<br />\n 黄金比例是黄金分割数（Φ）的视觉表示，约为 1.618</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/11/03/S14kUx3MvL5TuHO.jpg\" alt=\"\" title=\"Courtesy: bypeople.com\" /></p>\n<h2 id=\"fibonacci-sequence-斐波那契数列\"><a class=\"anchor\" href=\"#fibonacci-sequence-斐波那契数列\">#</a> Fibonacci Sequence 斐波那契数列</h2>\n<p>The golden ratio is closely connected to Fibonacci sequence<br />\n 黄金比例与斐波那契数列紧密相关</p>\n<ul>\n<li>Fibonacci sequence begins by definition with the numbers 0, 1 and then each successive number in the sequence is the sum of the previous two numbers<br />\n 斐波那契数列的定义是从数字 0、1 开始，然后序列中的每个连续数字都是前两个数字的和<br />\n <code>0,1,1,2,3,5,8,13,21,34,55.....</code></li>\n<li>If you take any number in the sequence and divide it by the previous number the result approximates Phi or the golden ratio<br />\n 如果将序列中的任何数字除以前一个数字，则结果近似为 Φ 或黄金比例<br />\n <code>13/8 = 1.625</code>   <code>21/13 - 1.615</code>   <code>34/21 - 1.619</code>   <code>55/34 = 1.6176</code></li>\n<li>This sequence is found all around us in nature<br />\n 在自然界中发现了这个序列</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/03/sGWNKhtoE3r5U4B.jpg\" alt=\"\" title=\"Courtesy: Flickr.com\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/03/ZQIU3uTdcFag6A8.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/03/491l3pMzdKZLYU2.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/03/my2UeGdPM5g7cjv.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/03/RfJdPyhAepOzT1q.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/03/KDiGv6k3zUmSWE1.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/03/cY4oLsjWgX2TKH8.jpg\" alt=\"\" /></p>\n<h2 id=\"golden-ratio-and-the-rule-of-third-黄金分割率与三分法则\"><a class=\"anchor\" href=\"#golden-ratio-and-the-rule-of-third-黄金分割率与三分法则\">#</a> Golden Ratio and the rule of third 黄金分割率与三分法则</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj05Q2lTM1NVNGxrMCZhbXA7YWJfY2hhbm5lbD1TZWVrZXI=\">Video: The Golden Ratio vs. The Rule of Thirds</span></p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/9CiS3SU4lk0\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<h2 id=\"example\"><a class=\"anchor\" href=\"#example\">#</a> Example</h2>\n<p><img data-src=\"https://i.loli.net/2020/11/03/RaTQNoCEX673sLu.jpg\" alt=\"\" title=\"Courtesy: tympanus.net\" /></p>\n<p>MmDesign uses the principle of the golden rectangle for the dominant image on its site.<br />\nMmDesign 在其网站的主要图像上使用金色矩形的原理。</p>\n<p>Not only is the image striking, it has the perfect harmonic shape.<br />\n 图像不仅引人注目，而且具有完美的谐波形状。</p>\n<p>The golden rectangle is not just for site design but can be used to create balanced parts throughout a site.<br />\n 黄金矩形不仅用于站点设计，还可以用于在整个站点中创建平衡零件。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/03/RwDa8AJTzKgFPXs.jpg\" alt=\"\" title=\"Courtesy: webdesign.tutplus.com\" /></p>\n<p>The screenshot above shows how the layoutlargely comprises previous client work.<br />\n 上面的屏幕截图显示了布局如何主要包括以前的客户端工作。</p>\n<p>It also features a block of content about the agency itselfand a navigation bar in the center of the screen.<br />\n 它还具有关于代理机构本身的内容块以及屏幕中心的导航栏。</p>\n<p>The contact button, as shown also uses the golden mean as a grid system to organize the layout in a unique way.<br />\n 如图所示，接触按钮还使用黄金分割作为网格系统，以独特的方式组织布局。</p>\n<h1 id=\"layout-design-版图设计\"><a class=\"anchor\" href=\"#layout-design-版图设计\">#</a> Layout Design 版图设计</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1OOFRRZkUxcUtlRSZhbXA7YWJfY2hhbm5lbD1TYXRvcmlHcmFwaGljcw==\">Master LAYOUT &amp; COMPOSITION Design - Why Layout Is SO IMPORTANT</span></p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/N8TQfE1qKeE\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<h1 id=\"gestalt-theory-格式塔理论\"><a class=\"anchor\" href=\"#gestalt-theory-格式塔理论\">#</a> Gestalt Theory 格式塔理论</h1>\n<p>This is a theory of understanding form in its unified whole.<br />\n 这是一种理解理论，它是一个统一的整体。</p>\n<p>Developed in the Berlin School of experimental psychology, it deals with the capability of human perception to generate forms out of seemingly unconnected lines and shapes.<br />\n 它是由柏林实验心理学学院开发的，旨在处理人类感知能力，以看似无关的线条和形状生成形式。</p>\n<p>It supports the idea that the whole is more than the sum of its parts.<br />\n 它支持这样的想法，即整体不仅仅是其各个部分的总和。</p>\n<ul>\n<li>Closure 闭合</li>\n<li>Similarity 相似</li>\n<li>Good Continuation 良好的延续性</li>\n<li>Proximity 邻近</li>\n<li>Good Form 良好的形式</li>\n<li>Object and background 对象和背景</li>\n</ul>\n<h2 id=\"closure-闭合\"><a class=\"anchor\" href=\"#closure-闭合\">#</a> Closure 闭合</h2>\n<p>Closure is the key for an observer to decipher shapes and forms in a picture with various lines and shapes.<br />\n 闭合是观察者解密具有各种线条和形状的图片中的形状和形式的关键。</p>\n<p>The human brain tends to fill up missing lines to build up a shape that is familiar to it.<br />\n 人脑往往会填补缺失的线条，以建立自己熟悉的形状。</p>\n<p>In the figure below the invisible lines form a triangle.<br />\n 在下图中，看不见的线形成一个三角形。</p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/05/lRd6TzcVx1GMAeW.png\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/12QPgFZIEpw5scr.jpg\" alt=\"\" /></p>\n<h2 id=\"similarity-相似\"><a class=\"anchor\" href=\"#similarity-相似\">#</a> Similarity 相似</h2>\n<p>Perception of patterns depends on characteristics of the shapes, size, color etc. in the visual field.<br />\n 模式的感知取决于视野中形状，大小，颜色等的特征。</p>\n<p>Human brain has a tendency of building patterns based on similarities.<br />\n 人脑倾向于建立基于相似性的模式。</p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/05/y7IDvoWrsB6x29P.png\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/L8JFG4KEDWXlcw2.jpg\" alt=\"\" /></p>\n<h2 id=\"good-continuation-良好的延续性\"><a class=\"anchor\" href=\"#good-continuation-良好的延续性\">#</a> Good Continuation 良好的延续性</h2>\n<p>This principle describes the tendency of the eye to follow a line or curve and continue in the same direction.<br />\n 该原理描述了，眼睛遵循直线或曲线，并朝同一方向延伸的趋势。</p>\n<p>It can be used effectively in guiding the eye to a desired location.<br />\n 它可以有效地用于将眼睛引导到所需位置。</p>\n<p>In the figure below the dots appear to form a line and the eye continues to follow it through the square and an imaginary line is inferred<br />\n 在下图中，点似乎形成一条线，并且眼睛继续跟随它穿过正方形，并推断出一条假想线。</p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/05/7e8zcfMUpduP3as.png\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/c8CfpMoH6vLjzwt.jpg\" alt=\"\" /></p>\n<h2 id=\"proximity-接近\"><a class=\"anchor\" href=\"#proximity-接近\">#</a> Proximity 接近</h2>\n<p>When we see a collection of objects, the objects that are close together form a group in our mind.<br />\n 当我们看到对象的集合时，彼此靠近的对象在我们的脑海中形成了一个群体。</p>\n<p>Even if the objects are dissimilar – the fact that they are close to each other will evoke this sense of a group.<br />\n 即使对象不同，它们彼此靠近的事实也会唤起这种群体感。</p>\n<p>In the figure below, this principle is highlighted.<br />\n 在下图中，突出显示了此原理。</p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/05/6sQdz8JWZpgYuNt.png\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/uqaw8k3Zzr2c4FT.jpg\" alt=\"\" /></p>\n<h2 id=\"good-form-好的形式\"><a class=\"anchor\" href=\"#good-form-好的形式\">#</a> Good Form 好的形式</h2>\n<p>Humans tend to organize an image in a regular, orderly, symmetric and simple form.<br />\n 人类倾向于以规则，有序，对称和简单的形式来组织图像。</p>\n<p>The principle of <strong>Pragnanz</strong> encompasses all the gestalt principles to create a perception of the whole.<br />\nPragnanz 原则涵盖了所有格式塔原理，从而营造出整体感。</p>\n<p>When a complicated set of images are presented, the human mind tries to simplify them by keeping fewer elements and building an image closer to symmetry.<br />\n 当呈现一组复杂的图像时，人的大脑试图通过减少元素数量，并构建更接近对称的图像来简化它们。</p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/05/WCYqio26XhuMmO4.png\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/1YqTVmvGOBRH6Ig.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/bKulknV1rpfaOGv.jpg\" alt=\"\" title=\"Pragnanz\" /></p>\n<h2 id=\"object-and-background-对象和背景\"><a class=\"anchor\" href=\"#object-and-background-对象和背景\">#</a> Object and Background 对象和背景</h2>\n<p>The phenomenon of figure and ground was first investigated by Edgar Rubin a Danish psychologist.<br />\n 图形与背景现象最先由丹麦心理学家 Edgar Rubin 研究。</p>\n<p>It deals with the perception in a visual filed of some objects being in the foreground having dominant role and others are relegated to the background.<br />\n 它处理了视觉文件中的感知，即某些对象位于前景中并具有主导作用，而其他对象则降级为背景。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/05/yB8LMIhnWUoVAEP.jpg\" alt=\"\" /></p>\n<h3 id=\"foreground-and-background-前景和背景\"><a class=\"anchor\" href=\"#foreground-and-background-前景和背景\">#</a> Foreground and Background 前景和背景</h3>\n<p>Use of shapes in layouts and design bring in the aspect of foreground and background objects.<br />\n 在布局和设计中使用形状会带来前景和背景对象的方面。</p>\n<p>The foreground shapes usually convey the main subject matter while the background is used to support the foreground.<br />\n 前景形状通常传达主要主题，而背景则用于支撑前景。</p>\n<p>By careful use of shapes, various meaning can be conveyed.<br />\n 通过仔细使用形状，可以传达各种含义。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/05/PwQViKyBNu72ekO.jpg\" alt=\"\" /></p>\n<h3 id=\"simplicity-简单\"><a class=\"anchor\" href=\"#simplicity-简单\">#</a> Simplicity 简单</h3>\n<ul>\n<li>\n<p>Perfection is achieved not when there is nothing more to add but there is nothing more to take away<br />\n 当没有更多可添加，但没有其他可取的东西时，就无法实现完美。</p>\n</li>\n<li>\n<p>Simplicity does not mean the absence of any décor.<br />\n 简单并不意味着没有任何装饰。<br />\nIt only means that the décor should belong intimately to the design proper and anything foreign to it should be taken away.\t<br />\n它仅意味着装饰应与设计本身紧密相关，并且应删除所有与设计无关的内容。</p>\n</li>\n<li>\n<p>Keep it simple stupid (KISS)<br />\n 保持简单愚蠢（KISS）</p>\n</li>\n<li>\n<p>Less is more<br />\n 少即是多</p>\n</li>\n<li>\n<p>When in doubt leave it out<br />\n 如有疑问，请忽略</p>\n</li>\n</ul>\n<h4 id=\"reduction-削减\"><a class=\"anchor\" href=\"#reduction-削减\">#</a> Reduction 削减</h4>\n<p>Remove inessential elements<br />\n 删除非必要元素</p>\n<ol>\n<li>Decide what essentially needs to be conveyed by the design;<br />\n 决定设计需要传达的内容；</li>\n<li>Critically examine every element (label, control, color, font, line weight) to decide whether it serves an essential purpose<br />\n 严格检查每个元素（标签，控件，颜色，字体，线条粗细），以决定其是否满足基本目的</li>\n<li>Remove it if it isn't essential<br />\n 如果不是必需的，请将其删除</li>\n</ol>\n<p><img data-src=\"https://i.loli.net/2020/11/05/7Hli1DzvyIaBXQc.jpg\" alt=\"\" /></p>\n<h4 id=\"double-duty-双重职责\"><a class=\"anchor\" href=\"#double-duty-双重职责\">#</a> Double duty 双重职责</h4>\n<ul>\n<li>\n<p>Use regular pattern<br />\n 使用常规模式</p>\n</li>\n<li>\n<p>Limit inessential variation among elements<br />\n 限制元素之间的非本质变化</p>\n</li>\n<li>\n<p>Use the same font, color, line width, dimensions, orientation for multiple elements<br />\n 对多个元素使用相同的字体，颜色，线宽，尺寸，方向</p>\n</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/11/05/XFVpAfu7QB4SKDq.jpg\" alt=\"\" /></p>\n<h4 id=\"contrast-对比\"><a class=\"anchor\" href=\"#contrast-对比\">#</a> Contrast 对比</h4>\n<p>Contrast encodes information along visual dimensions<br />\n 对比度沿视觉维度编码信息</p>\n<p><img data-src=\"https://i.loli.net/2020/11/05/DYhlBs9IK4wLOMZ.jpg\" alt=\"\" /></p>\n<p>Ask yourself these questions:<br />\n 问自己以下问题：</p>\n<ul>\n<li>find all the letters on the left edge of the page (position)<br />\n 找到页面左侧（位置）的所有字母</li>\n<li>find all the red letters (hue)<br />\n 查找所有红色字母（色相）</li>\n<li>find all the K's (shape)<br />\n 找到所有的 K（形状）</li>\n</ul>\n<p>Which of these questions felt easy to answer, and which felt hard?<br />\n 以下哪个问题容易回答，哪个很难？<br />\nThe easy ones were selective visual variables.<br />\n 容易的是选择性的视觉变量。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/05/YcENPgmAvtL4zXV.jpg\" alt=\"\" /></p>\n<h3 id=\"white-space-空白空间\"><a class=\"anchor\" href=\"#white-space-空白空间\">#</a> White Space 空白空间</h3>\n<ul>\n<li>Use white space for grouping instead of lines<br />\n 使用空白分组而不是线条</li>\n<li>Use margins to draw eye around design<br />\n 使用边距在设计周围吸引眼球</li>\n<li>Integrate figure and ground<br />\n 整合图形与背景\n<ul>\n<li>Object should be scaled proportionally to its background<br />\n 对象应与其背景成比例缩放</li>\n</ul>\n</li>\n<li>Don't crowd controls together<br />\n 不要挤在一起\n<ul>\n<li>Crowding creates spatial tension and inhibits scanning<br />\n 拥挤会造成空间紧张并阻碍扫描</li>\n</ul>\n</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/05/TbEZJNzASlY1voD.jpg\" alt=\"\" title=\"Crowded Dialogue. Courtesy: Mullet and Sano\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/JPxuHyI6S7lRXCG.jpg\" alt=\"\" title=\"Using White Space. Courtesy: Mullet and Sano\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/Lv4HlyUOcIBiaP3.jpg\" alt=\"\" title=\"White Space avoids noise. Courtesy: Edward Tufte\" /></p>\n<h1 id=\"grids-网格\"><a class=\"anchor\" href=\"#grids-网格\">#</a> Grids 网格</h1>\n<ul>\n<li>Grids enable you to build solid structure and form into your designs<br />\n 网格能够在设计中构建坚固的结构和形式</li>\n<li>In its most basic terms, a grid system is a structure comprising a series of horizontal and vertical lines which intersect and are then used to arrange content<br />\n 从最基本的角度来说，网格系统是一种结构，包括一系列水平线和垂直线，这些线相交，然后用于布置内容</li>\n<li>Using a grid system in your designs is one way to achieve a level of consistency that would be otherwise extremely difficult to master and to portray in your designs<br />\n 在设计中使用网格系统，是达到一致性水平的一种方法，否则将很难掌握和描述您的设计</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/05/QkL7e84dWtrVlbR.jpg\" alt=\"\" title=\"Courtesy: webdesign.tutsplus.com\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/ObJ9qxpIZrWGvuy.jpg\" alt=\"\" title=\"The screen on the left displays better visual balance and consistency. The result is much more pleasant to look at and use. 左侧的屏幕显示出更好的视觉平衡和一致性。结果使使用和观看时更加愉悦\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/05/7bAOksC3GNX4Ydg.jpg\" alt=\"\" title=\"Layout of The Atlantic magazine home page and the underlying grid. 《大西洋》杂志首页和底层网格的布局\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj03WWNWelVZLUE3OCZhbXA7YWJfY2hhbm5lbD1MaW5rZWRJbkxlYXJuaW5n\">Layout and composition tutorial: Grid variations | lynda.com</span></p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/7YcVzUY-A78\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<h1 id=\"typography-版式\"><a class=\"anchor\" href=\"#typography-版式\">#</a> Typography 版式</h1>\n<p>A good UI design relies heavily on the correct use of typography.<br />\n 良好的 UI 设计在很大程度上取决于字体的正确使用。</p>\n<p>Typography has its own meta-language. 印刷术有其自己的元语言。</p>\n<p>Its shapes and relationships convey meaning even before we decode the words with which they give shape and voice.<br />\n 它的形状和关系传达了意义，甚至在我们解码它们赋予形状和声音的单词之前</p>\n<p><img data-src=\"https://i.loli.net/2020/11/06/QWD8Fd4lHjsfEUS.jpg\" alt=\"\" /></p>\n<h2 id=\"form-and-counterform-形式与反形式\"><a class=\"anchor\" href=\"#form-and-counterform-形式与反形式\">#</a> Form and Counterform 形式与反形式</h2>\n<p>Every letter consists of the shape filled with ink, the form, and the shape defined by that shape, the counterform.<br />\n 每个字母都由填充有墨水的形状，形式和由该形状定义的形状（对应形式）组成。</p>\n<p>A counterform can be entirely closed, such as the interior space of the &quot;o&quot; partially open like the &quot;n&quot; or broadly open, such as the space defined by the curve and cross stroke of the &quot;f&quot;.<br />\n 配套产品可以完全封闭，例如 “o” 的内部空间。 像 “n” 一样部分打开 或宽阔的空间，例如由 “f” 的曲线和交叉笔划定义的空间</p>\n<p><img data-src=\"https://i.loli.net/2020/11/06/kr1SENMI2pUyV65.jpg\" alt=\"\" /></p>\n<h2 id=\"stems-and-bowls茎和碗\"><a class=\"anchor\" href=\"#stems-and-bowls茎和碗\">#</a> Stems and Bowls 茎和碗</h2>\n<p>The stem of a letterform is the vertical stroke.<br />\n 字母的茎是垂直笔画。</p>\n<p>The thickness of this stroke does much to define the color density of the type, that is, how much ink the letterform will express on the paper.<br />\n 此笔划的厚度在很大程度上决定了该类型的颜色密度，即该字母将在纸张上表达多少墨水。</p>\n<p>The bowls of the letterform are the rounded shapes, the geometry of the curves that make the &quot;e&quot; and &quot;o&quot; and &quot;c&quot; move to the same visual rhythm.<br />\n 字母形的碗是圆形的，曲线的几何形状使 “e”，“o” 和 “c” 移动到相同的视觉节奏。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/06/uj1XrEgaQOwtABx.jpg\" alt=\"\" /></p>\n<h2 id=\"ascenders-and-descenders-上升和下降\"><a class=\"anchor\" href=\"#ascenders-and-descenders-上升和下降\">#</a> Ascenders and Descenders 上升和下降</h2>\n<p>The letters grouped together to make up a word align to four horizontal marks.<br />\n 组合在一起组成一个单词的字母与四个水平标记对齐。</p>\n<p>The most obvious mark is the <ins>baseline</ins>, the bottom of letters such as &quot;x&quot; and &quot;d&quot;.<br />\n 最明显的标记是基线，即字母的底部，例如 “x” 和 “d”。</p>\n<p>Lowercase letters have a second mark, the <ins>x height</ins>, that is, simply the height of the lowercase “x” in any font.<br />\n 小写字母有第二个标记，x 高度，即任何字体中小写字母 “x” 的高度。</p>\n<p>Variations in this height can make a font appear large or small in contrast to other fonts, independent of size.<br />\n 高度的变化会使字体与其他字体形成对比，而与字体大小无关。</p>\n<p><ins>Ascenders</ins> and <ins>descenders</ins> are those parts of the letterform that rise above the x height, such as the stem of the &quot;d&quot; or fall below the baseline, such as the stem of the &quot;p&quot; respectively.<br />\n 升序和降序分别是字母形状中上升到 x 高度以上的部分，例如 “d” 的茎，或下降到基线以下的那些部分，例如 “p” 的茎。</p>\n<p>The top of the ascender defines the top of a capital letter, the <ins>cap height</ins>.<br />\n 上升器的顶部定义了大写字母的顶部，即帽高。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/06/Aa1pQ3sPyf5bSKe.png\" alt=\"\" /></p>\n<h2 id=\"readability可读性\"><a class=\"anchor\" href=\"#readability可读性\">#</a> Readability 可读性</h2>\n<ul>\n<li>\n<p>Many factors affect readability although the two main elements that make for good and readable composition are the correct proportions of type size to line (or “column”) width, and the horizontal flow created by the white space between the lines.<br />\n 尽管影响字体质量和可读性的两个主要因素是，字体大小与线条（或 “列”）宽度的正确比例，以及线条之间的空白所产生的水平流动，但许多因素都会影响可读性。</p>\n</li>\n<li>\n<p>Type that is too large for the column width limits the number of words that will fit on a line, creating uneven word spacing and excess hyphenation.<br />\n 对于列宽而言，太大的类型会限制一行中适合的单词数，从而导致单词间距不均和过多的连字符。</p>\n</li>\n<li>\n<p>Type that is too small for the column, forces the reader to move closer to the page, effectively reducing the eye span and increasing the number of saccadic movements to the end of the line. This quickly leads to fatigue.<br />\n 对于列而言，该类型太小，会迫使阅读器移近页面，从而有效地减小了眼睛的跨度，并增加了行尾扫视的次数。 这很快导致疲劳。</p>\n</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/06/iuAlbZpEgzTSHIq.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/06/9GUteVDNWwyBjKf.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/06/2rSI7jDLOyonMsf.jpg\" alt=\"\" /></p>\n<h2 id=\"typography-in-design-设计中的版式\"><a class=\"anchor\" href=\"#typography-in-design-设计中的版式\">#</a> Typography in Design 设计中的版式</h2>\n<p>Apart from the letters themselves the spacing between letters and between lines and margin spaces make a complete statement on the use of typography in design<br />\n 除了字母本身之外，字母之间以及线条和边距空间之间的间距还完整说明了排版在设计中的使用</p>\n<p><img data-src=\"https://i.loli.net/2020/11/06/gqAQEzYiBbeuovH.jpg\" alt=\"\" /></p>\n<h3 id=\"kerning-字距\"><a class=\"anchor\" href=\"#kerning-字距\">#</a> Kerning 字距</h3>\n<ul>\n<li>\n<p>Kerning involves adjusting the spacing between two letters in a given font. Note that this is a separate issue than tracking, which adjusts the space between all letters simultaneously<br />\n 字距调整涉及调整给定字体中两个字母之间的间距。 请注意，这是与分散不同的问题，分散会同时调整所有字母之间的间距</p>\n</li>\n<li>\n<p>Notice how the uppercase &quot;D&quot; in the example below stands out significantly from the rest of the word<br />\n 请注意，以下示例中的大写字母 “D” 与其他单词相比有何突出之处</p>\n</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/11/06/yERbJgIO4qkYud5.jpg\" alt=\"\" /></p>\n<h3 id=\"fonts-字体\"><a class=\"anchor\" href=\"#fonts-字体\">#</a> Fonts 字体</h3>\n<ul>\n<li>\n<p>There is an inherent psychology associated with certain types of fonts<br />\n 与某些类型的字体有关的内在心理</p>\n</li>\n<li>\n<p>Compare the fonts on left with those on the right<br />\n 比较左边的字体和右边的字体</p>\n</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/06/8qA7hPeatibExOF.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/06/riQWZYs1B6PSztw.jpg\" alt=\"\" /></p>\n<h3 id=\"alignment-对齐方式\"><a class=\"anchor\" href=\"#alignment-对齐方式\">#</a> Alignment 对齐方式</h3>\n<p>Creative use of typography provides the right focus on this site design.<br />\n 字体创造性使用可以正确地关注此网站设计。</p>\n<p><img data-src=\"https://i.loli.net/2020/11/06/MYTzplFN8B63JR4.jpg\" alt=\"\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1PM2ZWTW0tRWYwWSZhbXA7YWJfY2hhbm5lbD1Ta2V0Y2hUb2dldGhlcg==\">Improving Web and Mobile App Typography - 5 basic guidelines</span></p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/O3fVMm-Ef0Y\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<h3 id=\"font-to-help-memory-字体以帮助记忆\"><a class=\"anchor\" href=\"#font-to-help-memory-字体以帮助记忆\">#</a> Font to help Memory 字体以帮助记忆</h3>\n<ul>\n<li>\n<p>A team of researchers at Australia's Royal Melbourne Institute of Technology has come up with a new type font called Sans Forgetica.<br />\n 澳大利亚皇家墨尔本理工学院的一组研究人员提出了一种新字体，称为 Sans Forgetica。<br />\nIts purpose is to help readers remember what has been written using it.<br />\n 其目的是帮助读者记住使用它编写的内容。</p>\n</li>\n<li>\n<p>The idea behind the new font was to create a slightly more difficult reading experience, forcing the reader to absorb each word as they stare at it.<br />\n 新字体背后的想法是创造稍微困难的阅读体验，迫使读者在凝视每个单词时吸收它们。</p>\n</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/11/06/PcCaW2HGbv1qo5V.jpg\" alt=\"\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoeHBsb3JlLmNvbS9uZXdzLzIwMTgtMTAtZm9udC1yZWFkc2Fucy1mb3JnZXRpY2EuaHRtbA==\">A font that helps you remember what you read—Sans Forgetica</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1DRVh6U2VodTVITSZhbXA7ZmVhdHVyZT15b3V0dS5iZSZhbXA7YWJfY2hhbm5lbD1STUlUVW5pdmVyc2l0eQ==\">Sans Forgetica | The font to remember | RMIT University</span></p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/CEXzSehu5HM\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<h1 id=\"color\"><a class=\"anchor\" href=\"#color\">#</a> Color</h1>\n<ul>\n<li>We see the world via a reflective color model<br />\n 我们通过反射色模型看到世界\n<ul>\n<li>Light strikes a surface and is reflected to our eyes -- Properties of surface dictate color<br />\n 光线撞击表面并反射到我们的眼睛 -- 表面的性质决定了颜色</li>\n<li>Subtractive color model -- Cyan Magenta, Yellow primaries<br />\n 减色模型 -- 青色、洋红色，黄色原色</li>\n</ul>\n</li>\n<li>Colors on display follow the emitted model<br />\n 显示器的颜色遵循发射模型\n<ul>\n<li>Additive color model -- Red Green Blue primaries<br />\n 加色模型 -- 红色、绿色、蓝色原色</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"hsv-model\"><a class=\"anchor\" href=\"#hsv-model\">#</a> HSV Model</h2>\n<p><img data-src=\"https://i.loli.net/2020/11/06/jeYOVS7ArRaNlCp.jpg\" alt=\"\" /></p>\n<ul>\n<li>\n<p>Hue<br />\n 色相</p>\n<ul>\n<li>Basic Color, Pigment<br />\n 基本颜色，颜料</li>\n<li>Wavelength (red, green, yellow, blue)<br />\n 波长（红色，绿色，黄色，蓝色）</li>\n<li>Spectrum (VIBGYOR)<br />\n 频谱<br />\n<img data-src=\"https://i.loli.net/2020/11/06/oOaXTyiYrZuQDS2.jpg\" alt=\"\" /></li>\n</ul>\n</li>\n<li>\n<p>Saturation<br />\n 饱和度</p>\n<ul>\n<li>Relative purity, Brightness or intensity of a color<br />\n 相对纯度，颜色的亮度或强度</li>\n<li>Pastel versus strong (baby blue, sky blue, royal blue)<br />\n 柔 vs 强（浅蓝色，天蓝色，宝蓝色）<br />\n<img data-src=\"https://i.loli.net/2020/11/06/gIZ5Qj9ALErcwbm.jpg\" alt=\"\" /></li>\n</ul>\n</li>\n<li>\n<p>Value<br />\n 价值</p>\n<ul>\n<li>Lightness or darkness of a color<br />\n 颜色的明暗</li>\n<li>Amount of energy (white, light gray, dark gray, black)<br />\n 能量（白色，浅灰色，深灰色，黑色）</li>\n<li>Usually V = 0.299*R + 0.587*G + 0.114*B<br />\n<img data-src=\"https://i.loli.net/2020/11/06/rI9Bkl3DiN2La76.jpg\" alt=\"\" /></li>\n</ul>\n</li>\n<li>\n<p>Most commonly used model<br />\n 最常用的模型</p>\n</li>\n</ul>\n<h2 id=\"guidelines\"><a class=\"anchor\" href=\"#guidelines\">#</a> Guidelines</h2>\n<ul>\n<li>Display color images on black background<br />\n 在黑色背景上显示彩色图像</li>\n<li>Choose bright foreground color (white, bold green …)<br />\n 选择明亮的前景色（白色，绿色的粗体...）</li>\n<li>Avoid brown and green as background color<br />\n 避免使用棕色和绿色作为背景色</li>\n<li>Be sure foreground colors contrast in both brightness and hue with background colors<br />\n 确保前景色与背景色在亮度和色调上形成对比</li>\n<li>Use color sparingly – design b/w and then add color<br />\n 少用颜色–设计黑白，然后添加颜色</li>\n<li>Use color to draw attention, communicate organization and to establish relationships<br />\n 用颜色吸引注意力，沟通组织并建立关系</li>\n<li>Avoid using color in non-task related ways<br />\n 避免以与任务无关的方式使用颜色</li>\n</ul>\n<h2 id=\"associations\"><a class=\"anchor\" href=\"#associations\">#</a> Associations</h2>\n<table>\n<tbody>\n<tr>\n<td>\n<p>Red<br />\n 红色</p>\n</td>\n<td>\n<p>Hot, warning, aggression, love<br />\n 热，警告，侵略，爱</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Pink<br />\n 粉红色</p>\n</td>\n<td>\n<p>Female, Cute, Cotton, Candy<br />\n 女性，可爱，棉花，糖果</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Orange<br />\n 橙色</p>\n</td>\n<td>\n<p>Autumn, Warm, Halloween<br />\n 秋天，温暖，万圣节</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Yellow<br />\n 黄色</p>\n</td>\n<td>\n<p>Happy, Caution, Joy<br />\n 快乐，谨慎，喜悦</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Brown<br />\n 棕色</p>\n</td>\n<td>\n<p>Warm, Fall, Dirt, Earth<br />\n 温暖，秋天，泥土，地球</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Green<br />\n 绿色</p>\n</td>\n<td>\n<p>Lush, Pastoral, Envy<br />\n 郁郁葱葱，田园风光，嫉妒</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Purple<br />\n 紫色</p>\n</td>\n<td>\n<p>Royal, Sophisticated, Barney<br />\n 皇家，精致，巴尼</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"cultural-colors\"><a class=\"anchor\" href=\"#cultural-colors\">#</a> Cultural Colors</h2>\n<p><img data-src=\"https://i.loli.net/2020/11/06/wu812AmKhnDMRtB.jpg\" alt=\"\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1uWDBESGQ1UU5TOCZhbXA7YWJfY2hhbm5lbD1QQlNvZmZib29r\">The Effect of Color | Off Book | PBS Digital Studios</span></p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/nX0DHd5QNS8\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<h1 id=\"minimalist-design-极简设计\"><a class=\"anchor\" href=\"#minimalist-design-极简设计\">#</a> Minimalist Design 极简设计</h1>\n<ul>\n<li>&quot;Less is More&quot;<br />\n“少即是多”</li>\n<li>Identify what is really needed<br />\n 确定真正需要的</li>\n<li>If complex to explain/document, then redesign<br />\n 如果要解释 / 记录很复杂，请重新设计</li>\n<li>Concise language<br />\n 简洁的语言</li>\n<li>Avoid extraneous pictures and information<br />\n 避免多余的图片和信息\n<ul>\n<li>Fewer options and menu choices<br />\n 更少的选项和菜单选择</li>\n<li>Reduces planning time<br />\n 减少计划时间</li>\n<li>Extra options can confuse users<br />\n 额外的选项可能会使用户感到困惑</li>\n<li>Reduces manual size, etc.<br />\n 缩小手动尺寸等</li>\n<li>E.g. in XXX product: &quot;Show Actuator&quot;<br />\n 例如 在 XXX 产品中：“显示执行器”</li>\n</ul>\n</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/06/5aruD7XoEMPHmqh.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/06/wJdZPluFzLacmEj.jpg\" alt=\"\" /></p>\n<p>Minimalism is a way of thinking, a process, which strips the subject down to its bare bones.<br />\n 极简主义是一种思维方式，是一个过程，可以将主体分解为裸露的骨头。</p>\n<p>Removing all these superfluous elements leaves the 'core' essentials, free from distraction.<br />\n 删除所有这些多余的元素将使 “核心” 要素免于分心。</p>\n<p>It's more than a trend or fashion, it's is one of the most significant design movements of the 20th and early 21st century.<br />\n 它不只是一种趋势或时尚，它还是 20 世纪和 21 世纪初最重要的设计运动之一。</p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/06/2bF45Iq7U9kOLix.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/06/7ohrungXk2tUMfS.jpg\" alt=\"\" /></p>\n<p>The MOMA home screen is designed with the beautiful ideas of minimalism.<br />\nMOMA 主屏幕采用极简主义的精美设计。</p>\n<p>The subtle colors and minimal titles – give it an aura of sophistication and class.<br />\n 细腻的色彩和极少的标题–赋予其精致和一流的氛围。</p>\n<p>However, the use of icons to browse various data items is impossible to remember and results in extensive searching.<br />\n 但是，使用图标浏览各种数据项是不可能记住的，并且会导致大量搜索。</p>\n<dl>\n<dt>Use color 使用颜色</dt>\n<dd>don't just go for black and white because of a self-imposed (and unnecessary) restriction.<br />\n 不仅限于黑白，因为存在自我限制（并且是不必要的）。<br />\nUse as much color as the design requires – 'too much' color could be used as a process of juxtaposition.<br />\n 根据设计需要，使用尽可能多的颜色 - “过多” 的颜色可以并置使用。<br />\nYou also shouldn't focus on leaving white space for the sake of it, since 'open' space is more critical to communicate effectively.<br />\n 同样，也不应该为此而留白空间，因为 “开放” 空间对于有效沟通至关重要。</dd>\n<dt>Think about the user 考虑用户</dt>\n<dd>To paraphrase Steve Jobs, &quot;design is how it works, not just what it looks and feels like&quot;.<br />\n 用史蒂夫・乔布斯的话解释：“设计是它的工作方式，而不仅仅是它的外观和感觉”。<br />\nWhen used correctly, minimalist techniques emphasize functionality and typography equally.<br />\n 如果使用得当，极简主义技术会同时强调功能和排版。<br />\nHaving a miniscule amount of information on a near empty page will just scare people away.<br />\n 在接近空白的页面上只有很少量的信息，只会吓跑用户。</dd>\n<dt>Embrace clarity, not chaos 拥抱清晰，不要混乱</dt>\n<dd>Don't make the mistake of thinking a minimalist design adds mystery to your brand or website, you'll just end up confusing people.<br />\n 不要误以为极简设计会给您的品牌或网站增添神秘感，最终只会使人们感到困惑。<br />\nIf people want mystery, they'll watch Sherlock; when they use a website, read a magazine or open an app, they want clarity, accessibility and intuitive functions.<br />\n 如果想要神秘，人们会看 Sherlock 的。 当他们使用网站，阅读杂志或打开应用程序时，他们想要清晰的、可访问的和直观的功能。</dd>\n</dl>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1jWkRQamQtRmM1dyZhbXA7YWJfY2hhbm5lbD1CbG9vbWJlcmdRdWlja1Rha2U=\">Brand Free: How Minimalist Design Connects People</span></p>\n<p><div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/cZDPjd-Fc5w\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div></p>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/06/hyETuV8sgMJlcAH.jpg\" alt=\"\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/06/h9jaHKY5yXn346P.jpg\" alt=\"\" /></p>\n",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMD 534. Human Computer Interaction",
                "人机交互"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmd-510/week-10/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmd-510/week-10/",
            "title": "Week 10. Database",
            "date_published": "2020-10-28T07:26:32.000Z",
            "content_html": "<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<p>DATABASE MANAGEMENT SYSTEM (DBMS)</p>\n<h2 id=\"why-use-a-dbms\"><a class=\"anchor\" href=\"#why-use-a-dbms\">#</a> WHY USE A DBMS?</h2>\n<p>Storing data in traditional text or binary files has its <ins>limits</ins></p>\n<ul>\n<li>well suited for applications that store only a small amount of data</li>\n<li>not practical for applications that must store a large amount of data</li>\n<li>simple operations become cumbersome and inefficient as data increases</li>\n</ul>\n<p>A database management system (DBMS) is software that is specifically designed to work with large amounts of data in an efficient &amp; organized manner</p>\n<ul>\n<li>Data is stored using the DBMS</li>\n<li>Applications written in Java or other languages communicate with the DBMS rather than manipulate the data directly</li>\n<li>DBMS carries out instructions and sends the results back to the application</li>\n</ul>\n<h2 id=\"jdbc-provides-connectivity-to-the-dbms\"><a class=\"anchor\" href=\"#jdbc-provides-connectivity-to-the-dbms\">#</a> JDBC PROVIDES CONNECTIVITY TO THE DBMS</h2>\n<ul>\n<li>JDBC stands for Java database connectivity</li>\n<li>It is the technology that makes communication possible between the Java application and DBMS</li>\n<li>The Java API contains numerous JDBC classes that allow your Java applications to interact with a DBMS<br />\n<img data-src=\"https://i.loli.net/2020/11/15/rKPtn8wA2u17sXH.png\" alt=\"\" /></li>\n</ul>\n<h3 id=\"use-sql-to-send-commands-to-dbms\"><a class=\"anchor\" href=\"#use-sql-to-send-commands-to-dbms\">#</a> USE SQL TO SEND COMMANDS TO DBMS</h3>\n<ul>\n<li>SQL stands for structured query language</li>\n<li>A <ins>standard</ins> language for working with database management systems</li>\n<li><ins>Not</ins> used as a general programming language</li>\n<li>Consists of several <strong>key words</strong>, used to construct statements known as  <code>queries</code></li>\n<li>Statements or queries are passed from the application to the DBMS using API method calls  <code>strings</code></li>\n<li>Serve as instructions for the DBMS to carry out operations on its data</li>\n</ul>\n<h3 id=\"jdbc-needs-a-dbms\"><a class=\"anchor\" href=\"#jdbc-needs-a-dbms\">#</a> JDBC Needs a DBMS</h3>\n<p>To use JDBC to work with a database you will need a DBMS</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\" /><label for=\"cbx_0\"> Java DB</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" disabled=\"true\" /><label for=\"cbx_1\"> Oracle</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\" /><label for=\"cbx_2\"> Microsoft SQL Server</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\" /><label for=\"cbx_3\"> DB2</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_4\"> MySQL</label></li>\n</ul>\n<h3 id=\"jdbc-classes-for-processing\"><a class=\"anchor\" href=\"#jdbc-classes-for-processing\">#</a> JDBC CLASSES FOR PROCESSING</h3>\n<ul>\n<li>Java comes with a standard set of JDBC classes  <code>java.sql</code>  and  <code>javax.sql</code></li>\n</ul>\n<p>Using JDBC in a Java app requires</p>\n<ol>\n<li>Get a connection to the database</li>\n<li>Pass a string containing an SQL statement to the DBMS</li>\n<li>If the SQL statement has results to send back, they will be sent back as a <ins>result set</ins></li>\n<li>When finished working with the database, <ins>close</ins> the connection</li>\n</ol>\n<h2 id=\"tables-rows-and-columns\"><a class=\"anchor\" href=\"#tables-rows-and-columns\">#</a> Tables, Rows, and Columns</h2>\n<ul>\n<li>A database management system stores data in a database</li>\n<li>A <ins>database</ins> is organized into one or more tables</li>\n<li>Each <ins>table</ins> holds a collection of related data, organized into rows and columns</li>\n<li>A <ins>row</ins> is a complete set of information (tuple) about a single item, divided into columns</li>\n<li>Each <ins>column</ins> is an individual piece of information about the item</li>\n</ul>\n<p class=\"gallery\"><img data-src=\"https://i.loli.net/2020/11/15/wFMvsBJCr13jqQV.png\" alt=\"\" title=\"Database Organization\" /><br />\n<img data-src=\"https://i.loli.net/2020/11/15/ZudDaRQw8hEk1j3.png\" alt=\"\" title=\"Parts of a Coffee Database Table\" /></p>\n<h3 id=\"column-data-types\"><a class=\"anchor\" href=\"#column-data-types\">#</a> Column Data Types</h3>\n<p>Columns in a database are assigned an SQL data type</p>\n<p>SQL data types are generally compatible with Java data types</p>\n<p><img data-src=\"https://i.loli.net/2020/11/15/xRY7eriyzIa4HdS.png\" alt=\"\" /></p>\n<p>The Coffee Table Column Data Types</p>\n<ul>\n<li>\n<p><code>Description</code>  column data type is  <code>CHAR(25)</code></p>\n<ul>\n<li>String with a fixed length of 25 characters</li>\n<li>Compatible with the  <code>String</code>  type in Java</li>\n</ul>\n</li>\n<li>\n<p><code>ProdNum</code>  column data type is  <code>CHAR(10)</code></p>\n<ul>\n<li>String with a fixed length of 10 characters</li>\n<li>Compatible with the  <code>String</code>  type in Java</li>\n</ul>\n</li>\n<li>\n<p><code>Price</code>  column data type is  <code>DOUBLE</code></p>\n<ul>\n<li>Double-precision floating-point number</li>\n<li>Compatible with the  <code>double</code>  data type in Java</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"primary-keys\"><a class=\"anchor\" href=\"#primary-keys\">#</a> Primary Keys</h3>\n<ul>\n<li>\n<p>A <strong>primary key</strong> is a column that holds a unique value for each row in a database table<br />\nIn the Coffee table,  <code>ProdNum</code>  is the primary key</p>\n<ul>\n<li>Each type of coffee has a unique product number</li>\n<li>Used to identify any coffee stored in the table</li>\n</ul>\n</li>\n<li>\n<p>A primary key <ins>can be</ins> the combination of several columns in a table</p>\n</li>\n</ul>\n<h2 id=\"the-sql-select-statement\"><a class=\"anchor\" href=\"#the-sql-select-statement\">#</a> the SQL  <code>SELECT</code>  Statement</h2>\n<p>The  <code>SELECT</code>  statement is used to <ins>retrieve</ins> the rows in a table</p>\n<ul>\n<li>\n<p><code>Columns</code>  is one or more column names</p>\n<ul>\n<li>Multiple column names are separated with a comma</li>\n<li>The  <code>*</code>  character can be used to retrieve <ins>all</ins> columns in the table</li>\n</ul>\n</li>\n<li>\n<p><code>Table</code>  is a table name</p>\n</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Examples</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> Description <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SELECT</span> Description<span class=\"token punctuation\">,</span> Price <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr></table></figure><h3 id=\"specifying-search-criteria-with-the-where-clause\"><a class=\"anchor\" href=\"#specifying-search-criteria-with-the-where-clause\">#</a> Specifying Search Criteria with the  <code>WHERE</code>  clause</h3>\n<p>The  <code>WHERE</code>  clause can be used with the  <code>SELECT</code>  statement to specify a search criteria</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">Columns</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">Table</span> <span class=\"token keyword\">WHERE</span> Criteria</pre></td></tr></table></figure><ul>\n<li><code>Criteria</code>  is a conditional expression</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> Price <span class=\"token operator\">></span> <span class=\"token number\">12.00</span></pre></td></tr></table></figure><p><img data-src=\"https://i.loli.net/2020/11/15/ISVJg2nborG3ufx.png\" alt=\"\" /></p>\n<ul>\n<li><ins>Only</ins> the rows that meet the search criteria are returned in the result set</li>\n<li>A <em>result set</em> is an object that contains the results of an SQL statement</li>\n</ul>\n<h3 id=\"sql-relational-operators\"><a class=\"anchor\" href=\"#sql-relational-operators\">#</a> SQL Relational Operators</h3>\n<p>Standard SQL supports the following relational operators:</p>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&gt;</code></td>\n<td>Greater than</td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td>Less than</td>\n</tr>\n<tr>\n<td><code>&gt;=</code></td>\n<td>Greater than or equal to</td>\n</tr>\n<tr>\n<td><code>&lt;=</code></td>\n<td>Less than or equal to</td>\n</tr>\n<tr>\n<td><code>=</code></td>\n<td>Equal to</td>\n</tr>\n<tr>\n<td><code>&lt;&gt;</code></td>\n<td>Not equal to</td>\n</tr>\n</tbody>\n</table>\n<p>Notice a few SQL relational operators are different than in Java</p>\n<ul>\n<li>SQL equal to operator is  <code>=</code></li>\n<li>SQL not equal to operator is  <code>&lt;&gt;</code></li>\n</ul>\n<h3 id=\"string-comparisons-in-sql\"><a class=\"anchor\" href=\"#string-comparisons-in-sql\">#</a> String Comparisons in SQL</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> Description <span class=\"token operator\">=</span> <span class=\"token string\">'French Roast Dark'</span></pre></td></tr></table></figure><ul>\n<li>In SQL, strings are enclosed in single quotes</li>\n</ul>\n<blockquote>\n<p>Warning!</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> Description <span class=\"token operator\">=</span> <span class=\"token string\">'french roast dark'</span></pre></td></tr></table></figure><ul>\n<li>String comparisons in SQL are case sensitive</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">WHERE</span> UPPER<span class=\"token punctuation\">(</span>Description<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">'FRENCH ROAST DARK'</span></pre></td></tr></table></figure><ul>\n<li>The  <code>UPPER()</code>  or  <code>LOWER()</code>  functions convert the string to uppercase or lowercase and can help prevent case sensitive errors when comparing strings</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> Description <span class=\"token operator\">=</span><span class=\"token string\">'Joe''s Special Blend'</span></pre></td></tr></table></figure><ul>\n<li>If a single quote  <code>'</code>  is part of a string, use two single quotes  <code>''</code></li>\n</ul>\n<h3 id=\"using-the-like-operator\"><a class=\"anchor\" href=\"#using-the-like-operator\">#</a> Using the  <code>LIKE</code>  Operator</h3>\n<p>In SQL, the  <code>LIKE</code>  operator can be used to search for a substring</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> Description <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%Decaf%'</span></pre></td></tr></table></figure><ul>\n<li>The  <code>%</code>  symbol is used as a wildcard for multiple characters</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> ProdNum <span class=\"token operator\">LIKE</span> <span class=\"token string\">'2_-00_'</span></pre></td></tr></table></figure><ul>\n<li>The underscore  <code>_</code>  is a used as a wildcard for a single character</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">WHERE</span> Description <span class=\"token operator\">NOT</span> <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%Decaf%'</span></pre></td></tr></table></figure><ul>\n<li>The  <code>NOT</code>  operator is used to disqualify the search criteria</li>\n</ul>\n<h3 id=\"using-and-and-or\"><a class=\"anchor\" href=\"#using-and-and-or\">#</a> Using  <code>AND</code>  and  <code>OR</code></h3>\n<p>The  <code>AND</code>  and  <code>OR</code>  operators can be used to specify multiple search criteria in a  <code>WHERE</code>  clause</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">WHERE</span> Price <span class=\"token operator\">></span> <span class=\"token number\">10.00</span> <span class=\"token operator\">AND</span> Price <span class=\"token operator\">&lt;</span> <span class=\"token number\">14.00</span></pre></td></tr></table></figure><ul>\n<li>The  <code>AND</code>  operator requires that <ins>both</ins> search criteria be true</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">WHERE</span> Description <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%Dark%'</span> <span class=\"token operator\">OR</span> ProdNum <span class=\"token operator\">LIKE</span> <span class=\"token string\">'16%'</span></pre></td></tr></table></figure><ul>\n<li>The  <code>OR</code>  operator requires that <ins>either</ins> search criteria be true</li>\n</ul>\n<h3 id=\"sorting-results-of-a-select-query\"><a class=\"anchor\" href=\"#sorting-results-of-a-select-query\">#</a> Sorting results of a Select query</h3>\n<p>Use the  <code>ORDER BY</code>  clause to sort results according to a column</p>\n<ul>\n<li>Sorted in ascending order  <code>ASC</code>  by default</li>\n<li>Use the  <code>DESC</code>  operator to sort results in descending order</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Examples</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> Price</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> Price <span class=\"token operator\">></span> <span class=\"token number\">9.95</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> Price <span class=\"token keyword\">DESC</span></pre></td></tr></table></figure><h3 id=\"mathematical-functions\"><a class=\"anchor\" href=\"#mathematical-functions\">#</a> Mathematical Functions</h3>\n<h4 id=\"the-avg-function\"><a class=\"anchor\" href=\"#the-avg-function\">#</a> The  <code>AVG</code>  function</h4>\n<p>calculates the average value in a particular column</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>Price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr></table></figure><h4 id=\"the-sum-function\"><a class=\"anchor\" href=\"#the-sum-function\">#</a> The  <code>SUM</code>  function</h4>\n<p>calculates the sum of a column's values</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>Price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr></table></figure><h4 id=\"the-min-and-max-functions\"><a class=\"anchor\" href=\"#the-min-and-max-functions\">#</a> The  <code>MIN</code>  and  <code>MAX</code>  functions</h4>\n<p>calculate the minimum and maximum values found in a column</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MIN</span><span class=\"token punctuation\">(</span>Price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>Price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr></table></figure><h4 id=\"the-count-function\"><a class=\"anchor\" href=\"#the-count-function\">#</a> The  <code>COUNT</code>  function</h4>\n<p>can be used to determine the number of rows in a table</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr></table></figure><h2 id=\"inserting-rows\"><a class=\"anchor\" href=\"#inserting-rows\">#</a> Inserting rows</h2>\n<p>In SQL, the  <code>INSERT</code>  statement inserts a row into a table</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> TableName <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span>Value1<span class=\"token punctuation\">,</span> Value2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>TableName</code>  is the name of the database table</li>\n<li><code>Value1, Value2, ...</code>  is a list of column values</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> Coffee </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Honduran Dark'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'22-001'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8.65</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><ins>Strings</ins> are enclosed in single quotes</li>\n<li>Values appear in the <ins>same order</ins> as the columns in the table</li>\n</ul>\n<p>If column order is uncertain, the following general format can be used</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> TableName </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">(</span>ColumnName1<span class=\"token punctuation\">,</span> ColumnName2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">VALUES</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">(</span>Value1<span class=\"token punctuation\">,</span> Value2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>where....</p>\n<ul>\n<li><code>ColumnName1, ColumnName2, ...</code>  is a list of column names</li>\n<li><code>Value1, Value2, ...</code>  is a list of corresponding column values</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> Coffee </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">(</span>ProdNum<span class=\"token punctuation\">,</span> Price<span class=\"token punctuation\">,</span> Description<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">VALUES</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">(</span><span class=\"token string\">'22-001'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8.65</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Honduran Dark'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>Keep in mind that primary key values must be <ins>unique</ins></li>\n<li>For example, a duplicate  <code>ProdNum</code>  is not allowed in the Coffee table</li>\n</ul>\n<h2 id=\"updating-an-existing-row\"><a class=\"anchor\" href=\"#updating-an-existing-row\">#</a> Updating an Existing Row</h2>\n<p>In SQL, the  <code>UPDATE</code>  statement changes the contents of an existing row in a table</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">Table</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">SET</span> <span class=\"token keyword\">Column</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">Value</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">WHERE</span> Criteria</pre></td></tr></table></figure><ul>\n<li><code>Table</code>  is a table name</li>\n<li><code>Column</code>  is a column name</li>\n<li><code>Value</code>  is the value to store in the column</li>\n<li><code>Criteria</code>  is a conditional expression</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UPDATE</span> Coffee</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">SET</span> Price <span class=\"token operator\">=</span> <span class=\"token number\">9.95</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">WHERE</span> Description <span class=\"token operator\">=</span> <span class=\"token string\">'Galapagos Organic Medium'</span></pre></td></tr></table></figure><p>It is possible to update more than one row</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UPDATE</span> Coffee</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">SET</span> Price <span class=\"token operator\">=</span> <span class=\"token number\">12.95</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">WHERE</span> ProdNum <span class=\"token operator\">LIKE</span> <span class=\"token string\">'21%'</span></pre></td></tr></table></figure><ul>\n<li>Updates the price of all rows where the product number begins with 21</li>\n</ul>\n<blockquote>\n<p>Warning!</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UPDATE</span> Coffee</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">SET</span> Price <span class=\"token operator\">=</span> <span class=\"token number\">4.95</span></pre></td></tr></table></figure><ul>\n<li>Because this statement does not have a  <code>WHERE</code>  clause, it will change the price for every row</li>\n</ul>\n<h2 id=\"deleting-rows-with-the-delete-statement\"><a class=\"anchor\" href=\"#deleting-rows-with-the-delete-statement\">#</a> Deleting Rows with the  <code>DELETE</code>  Statement</h2>\n<p>In SQL, the  <code>DELETE</code>  statement deletes one or more rows in a table</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">Table</span> <span class=\"token keyword\">WHERE</span> Criteria</pre></td></tr></table></figure><ul>\n<li><code>Table</code>  is the table name</li>\n<li><code>Criteria</code>  is a conditional expression</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> ProdNum <span class=\"token operator\">=</span> <span class=\"token string\">'20-001'</span></pre></td></tr></table></figure><ul>\n<li>Deletes a single row in the Coffee table where the product number is 20-001</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> Coffee <span class=\"token keyword\">WHERE</span> Description <span class=\"token operator\">=</span> <span class=\"token string\">'Sumatra%'</span></pre></td></tr></table></figure><ul>\n<li>Deletes all rows in the Coffee table where the description begins with Sumatra</li>\n</ul>\n<blockquote>\n<p>Warning!</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> Coffee</pre></td></tr></table></figure><ul>\n<li>Because this statement does not have a  <code>WHERE</code>  clause, it will delete every row in the Coffee table</li>\n</ul>\n<h2 id=\"creating-tables-with-the-create-table-statement\"><a class=\"anchor\" href=\"#creating-tables-with-the-create-table-statement\">#</a> Creating Tables with the  <code>CREATE TABLE</code>  Statement</h2>\n<p>In SQL, the  <code>CREATE TABLE</code>  statement adds a new table to the database</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> TableName</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">(</span>ColumnName1 DataType1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ColumnName2 DataType2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>TableName</code>  is the name of the table</p>\n</li>\n<li>\n<p><code>ColumnName1</code>  is the name of the first column</p>\n</li>\n<li>\n<p><code>DataType1</code>  is the SQL data type for the first column</p>\n</li>\n<li>\n<p><code>ColumnName2</code>  is the name of the second column</p>\n</li>\n<li>\n<p><code>DataType2</code>  is the SQL data type for the second column</p>\n</li>\n<li>\n<p>The  <code>PRIMARY KEY</code>  qualifier is used to specify a column as the primary key</p>\n</li>\n<li>\n<p>The  <code>NOT NULL</code>  qualifier is used to specify that the column must contain a value for every row</p>\n<ul>\n<li>Qualifiers should be listed after the column's data type</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> Customer</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">(</span> Name <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Address <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     City <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> State <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Zip <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>Creates a new table named  <code>Customer</code>  with the columns  <code>Name</code> ,  <code>Address</code> ,  <code>City</code> ,  <code>State</code> , and  <code>Zip</code></li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> Customer</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">(</span> CustomerNumber <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     Name <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Address <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     City <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> State <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Zip <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>Creates a new table named  <code>Customer</code>  with the columns  <code>CustomerNumber</code> , which is the primary key,  <code>Name</code> ,  <code>Address</code> ,  <code>City</code> ,  <code>State</code> , and  <code>Zip</code></li>\n</ul>\n<p>Example: CreateCustomerTable.java</p>\n<h2 id=\"removing-a-table-with-the-drop-table-statement\"><a class=\"anchor\" href=\"#removing-a-table-with-the-drop-table-statement\">#</a> Removing a Table with the  <code>DROP TABLE</code>  Statement</h2>\n<p>In SQL, the  <code>DROP TABLE</code>  statement deletes an existing table from the database</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> TableName</pre></td></tr></table></figure><ul>\n<li><code>TableName</code>  is the name of the table you wish to delete</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DROP TABLE <span class=\"token class-name\">Customer</span></pre></td></tr></table></figure><ul>\n<li>Deletes the  <code>Customer</code>  table from the  <code>CoffeeDB</code>  database</li>\n<li>Useful if you make a mistake creating a table</li>\n<li>Simply delete the table and recreate</li>\n</ul>\n<h2 id=\"relational-data\"><a class=\"anchor\" href=\"#relational-data\">#</a> Relational Data</h2>\n<ul>\n<li>A  <code>foreign key</code>  is a column in one table that references a  <code>primary key</code>  in another table</li>\n<li>Creates a relationship between the tables</li>\n</ul>\n<p>Example:<br />\nUnpaidOrder table:</p>\n<table>\n<tbody>\n<tr>\n<td>CustomerNumber</td>\n<td>CHAR(10)</td>\n<td>Foreign Key</td>\n</tr>\n<tr>\n<td>ProdNum</td>\n<td>CHAR(10)</td>\n<td>Foreign Key</td>\n</tr>\n<tr>\n<td>OrderDate</td>\n<td>CHAR(10)</td>\n</tr>\n<tr>\n<td>Quantity</td>\n<td>DOUBLE</td>\n</tr>\n<tr>\n<td>Cost</td>\n<td>DOUBLE</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>The  <code>CustomerNumber</code>  column references the  <code>Customer</code>  table</li>\n<li>The  <code>ProdNum</code>  column references the  <code>Coffee</code>  table</li>\n<li>This creates a relationship between the tables of the  <code>CoffeeDB</code>  database</li>\n</ul>\n<p>The following SQL statement creates the UnpaidOrder table in the CoffeeDB database:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> UnpaidOrder</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>CustomerNumber <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">REFERENCES</span> Customer<span class=\"token punctuation\">(</span>CustomerNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  ProdNum <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">REFERENCES</span> Coffee<span class=\"token punctuation\">(</span>ProdNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  OrderDate <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Quantity <span class=\"token keyword\">DOUBLE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  Cost <span class=\"token keyword\">DOUBLE</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>The  <code>REFERENCES</code>  qualifier ensures referential integrity between tables\n<ul>\n<li>The  <code>CustomerNumber</code>  in the  <code>UnpaidOrder</code>  table must contain a valid  <code>CustomerNumber</code>  from the  <code>Customer</code>  table</li>\n<li>The  <code>ProdNum</code>  in the  <code>UnpaidOrder</code>  table must contain a valid  <code>ProdNum</code>  from the  <code>Coffee</code>  table</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"entity-relationship-diagrams\"><a class=\"anchor\" href=\"#entity-relationship-diagrams\">#</a> Entity Relationship Diagrams</h3>\n<p>An entity relationship diagram shows the relationships between tables</p>\n<p><img data-src=\"https://i.loli.net/2020/11/15/cWmpGkRNtTyHqgw.png\" alt=\"\" /></p>\n<ul>\n<li>Primary keys are denoted with (PK)</li>\n<li>Lines drawn between tables show how they are related\n<ul>\n<li>The ends of each line show either a 1 or an infinity symbol (∞)\n<ul>\n<li>The infinity symbol means many and number 1 means one.</li>\n</ul>\n</li>\n<li>A one to many relationship means that for each row in table A there can be many rows in table B that reference it.</li>\n<li>A many to one relationship means that many rows in table A can reference a single row in table B.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"coffeedb-relationships-left-to-right\"><a class=\"anchor\" href=\"#coffeedb-relationships-left-to-right\">#</a> CoffeeDB Relationships Left to Right</h3>\n<p><img data-src=\"https://i.loli.net/2020/11/15/x1GwsXS9pV4l2BQ.png\" alt=\"\" /></p>\n<ul>\n<li>One to many relationship between  <code>Customer</code>  and  <code>UnpaidOrder</code>\n<ul>\n<li>One row in the  <code>Customer</code>  table may be referenced by many rows in the  <code>UnpaidOrder</code>  table</li>\n</ul>\n</li>\n<li>Many to one relationship between the  <code>UnpaidOrder</code>  and  <code>Coffee</code>  tables\n<ul>\n<li>Many rows in the  <code>UnpaidOrder</code>  table may reference a single row in the  <code>Coffee</code>  table.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"coffeedb-relationships-right-to-left\"><a class=\"anchor\" href=\"#coffeedb-relationships-right-to-left\">#</a> CoffeeDB Relationships Right to Left</h3>\n<p><img data-src=\"https://i.loli.net/2020/11/15/tl8P64OVzg5jfHM.png\" alt=\"\" /></p>\n<ul>\n<li>One to many relationship between  <code>Coffee</code>  and  <code>UnpaidOrder</code>\n<ul>\n<li>One row in the  <code>Coffee</code>  table may be referenced by many rows in the  <code>UnpaidOrder</code>  table</li>\n</ul>\n</li>\n<li>Many to one relationship between  <code>UnpaidOrder</code>  and  <code>Customer</code> <br />\nMany rows in the  <code>UnpaidOrder</code>  table may reference a single row in the  <code>Customer</code>  table.</li>\n</ul>\n<h3 id=\"joining-data-from-multiple-tables\"><a class=\"anchor\" href=\"#joining-data-from-multiple-tables\">#</a> Joining Data from Multiple Tables</h3>\n<p>In SQL, you must use qualified column names in a SELECT statement if the tables have columns with the same name</p>\n<p>A qualified column name takes the following form:  <code>TableName.ColumnName</code></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   Customer<span class=\"token punctuation\">.</span>CustomerNumber<span class=\"token punctuation\">,</span> Customer<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   UnpaidOrder<span class=\"token punctuation\">.</span>OrderDate<span class=\"token punctuation\">,</span> UnpaidOrder<span class=\"token punctuation\">.</span>Cost<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   Coffee<span class=\"token punctuation\">.</span>Description</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">FROM</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   Customer<span class=\"token punctuation\">,</span> UnpaidOrder<span class=\"token punctuation\">,</span> Coffee</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">WHERE</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   UnpaidOrder<span class=\"token punctuation\">.</span>CustomerNumber <span class=\"token operator\">=</span> Customer<span class=\"token punctuation\">.</span>CustomerNumber </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token operator\">AND</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   UnpaidOrder<span class=\"token punctuation\">.</span>ProdNum <span class=\"token operator\">=</span> Coffee<span class=\"token punctuation\">.</span>ProdNum</pre></td></tr></table></figure><ul>\n<li>The search criteria tell the DBMS how to link the rows in the tables</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/11/15/qyCYXOkv3QxLijw.png\" alt=\"\" title=\"An Order Entry System\" /><br />\nThe Place Order application uses a relational database  <code>CoffeeDB</code> <br />\nRequires the  <code>Coffee</code> ,  <code>Customer</code> , and  <code>UnpaidOrder</code>  tables</p>\n<h2 id=\"transactions\"><a class=\"anchor\" href=\"#transactions\">#</a> Transactions</h2>\n<ul>\n<li>An operation that requires multiple database updates is known as a transaction.<br />\n 需要多次数据库更新的操作称为事务。</li>\n<li>For a transaction to be complete\n<ul>\n<li>All of the steps involved in the transaction must be performed.</li>\n</ul>\n</li>\n<li>If any single step within a transaction fails\n<ul>\n<li>None of the steps in the transaction should be performed.</li>\n</ul>\n</li>\n<li>When you write transaction-processing code, there are two concepts you must understand:\n<ul>\n<li>Commit</li>\n<li>Rollback</li>\n</ul>\n</li>\n<li>The term  <code>commit</code>  refers to making a permanent change to a database</li>\n<li>The term  <code>rollback</code>  refers to undoing changes to a database</li>\n</ul>\n<h2 id=\"sql-ddl-dql-dml-dcl-and-tcl-commands\"><a class=\"anchor\" href=\"#sql-ddl-dql-dml-dcl-and-tcl-commands\">#</a> SQL | DDL, DQL, DML, DCL and TCL Commands</h2>\n<p>Structured Query Language(SQL) as we all know is the database language by the use of which we can perform certain operations on the existing database and also we can use this language to create a database. SQL uses certain commands like Create, Drop, Insert etc. to carry out the required tasks.</p>\n<p>These SQL commands are mainly categorized into four categories as:</p>\n<ol>\n<li>DDL – Data Definition Language</li>\n<li>DQl – Data Query Language</li>\n<li>DML – Data Manipulation Language</li>\n<li>DCL – Data Control Language</li>\n</ol>\n<p>Though many resources claim there to be another category of SQL clauses <strong>TCL – Transaction Control Language</strong>. So we will see in detail about TCL as well.</p>\n<h3 id=\"ddldata-definition-language\"><a class=\"anchor\" href=\"#ddldata-definition-language\">#</a> DDL(Data Definition Language)</h3>\n<p>DDL or Data Definition Language actually consists of the SQL commands that can be used to define the database schema. It simply deals with descriptions of the database schema and is used to create and modify the structure of database objects in the database.</p>\n<p>Examples of DDL commands:</p>\n<dl>\n<dt><code>CREATE</code></dt>\n<dd>is used to create the database or its objects (like table, index, function, views, store procedure and triggers).</dd>\n<dt><code>DROP</code></dt>\n<dd>is used to delete objects from the database.</dd>\n<dt><code>ALTER</code></dt>\n<dd>is used to alter the structure of the database.</dd>\n<dt><code>TRUNCATE</code></dt>\n<dd>is used to remove all records from a table, including all spaces allocated for the records are removed.</dd>\n<dt><code>COMMENT</code></dt>\n<dd>is used to add comments to the data dictionary.</dd>\n<dt><code>RENAME</code></dt>\n<dd>is used to rename an object existing in the database.</dd>\n</dl>\n<h3 id=\"dql-data-query-language\"><a class=\"anchor\" href=\"#dql-data-query-language\">#</a> DQL (Data Query Language)</h3>\n<p>DML statements are used for performing queries on the data within schema objects. The purpose of DQL Command is to get some schema relation based on the query passed to it.</p>\n<p>Example of DQL:</p>\n<dl>\n<dt><code>SELECT</code></dt>\n<dd>is used to retrieve data from the a database.</dd>\n</dl>\n<h3 id=\"dmldata-manipulation-language\"><a class=\"anchor\" href=\"#dmldata-manipulation-language\">#</a> DML(Data Manipulation Language)</h3>\n<p>The SQL commands that deals with the manipulation of data present in the database belong to DML or Data Manipulation Language and this includes most of the SQL statements.</p>\n<p>Examples of DML:</p>\n<dl>\n<dt><code>INSERT</code></dt>\n<dd>is used to insert data into a table.</dd>\n<dt><code>UPDATE</code></dt>\n<dd>is used to update existing data within a table.</dd>\n<dt><code>DELETE</code></dt>\n<dd>is used to delete records from a database table.</dd>\n</dl>\n<h3 id=\"dcldata-control-language\"><a class=\"anchor\" href=\"#dcldata-control-language\">#</a> DCL(Data Control Language)</h3>\n<p>DCL includes commands such as GRANT and REVOKE which mainly deals with the rights, permissions and other controls of the database system.</p>\n<p>Examples of DCL commands:</p>\n<dl>\n<dt><code>GRANT</code></dt>\n<dd>gives user's access privileges to database.</dd>\n<dt><code>REVOKE</code></dt>\n<dd>withdraw user's access privileges given by using the GRANT command.</dd>\n</dl>\n<h3 id=\"tcltransaction-control-language\"><a class=\"anchor\" href=\"#tcltransaction-control-language\">#</a> TCL(transaction Control Language)</h3>\n<p>TCL commands deals with the transaction within the database.</p>\n<p>Examples of TCL commands:<br />\n <code>COMMIT</code> <br />\n~ commits a Transaction.</p>\n<dl>\n<dt><code>ROLLBACK</code></dt>\n<dd>rollbacks a transaction in case of any error occurs.</dd>\n<dt><code>SAVEPOINT</code></dt>\n<dd>sets a savepoint within a transaction.</dd>\n<dt><code>SET TRANSACTION</code></dt>\n<dd>specify characteristics for the transaction.</dd>\n</dl>\n<h1 id=\"review\"><a class=\"anchor\" href=\"#review\">#</a> Review</h1>\n<p>DB table creations &amp; queries</p>\n<ol>\n<li class=\"quiz essay\">\n<p>Fill in the create table statement below to create a table called tickets given the field listings below.</p>\n<div class=\"note default no-icon\">\n<table>\n<thead>\n<tr>\n<th>Field name</th>\n<th>Field Type</th>\n<th>Field Size</th>\n<th>Primary Key?</th>\n<th>Nulll?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>Auto_increment</td>\n<td></td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>ticketNum</td>\n<td>Integer</td>\n<td></td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>ticketDecsc</td>\n<td>varchar</td>\n<td>100</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<blockquote>\n<p>Note field name and datatype is required when listing fields in the create statement below.</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"CREATE TABLE tickets \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                     <span class=\"token string\">\"(id INTEGER not NULL AUTO_INCREMENT, \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                     <span class=\"token string\">\" ticketNum INTEGER, \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                     <span class=\"token string\">\" ticketDesc VARCHAR(100), \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                     <span class=\"token string\">\" PRIMARY KEY ( id ))\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>What additional fields / datatypes would you add as a suggestion when building your table?</p>\n<p>Any additional tables you would think would be necessary for an app that is for a trouble ticket system?</p>\n<div class=\"note default no-icon\">\n<table>\n<thead>\n<tr>\n<th>Field name</th>\n<th>Values</th>\n<th>Field Type</th>\n<th>Field Size</th>\n<th>Primary Key?</th>\n<th>Nulll?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td></td>\n<td>Auto_increment</td>\n<td></td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>ticketNum</td>\n<td></td>\n<td>Integer</td>\n<td></td>\n<td>N</td>\n<td>Y</td>\n</tr>\n<tr>\n<td>ticketDecsc</td>\n<td></td>\n<td>varchar</td>\n<td>100</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Uid</td>\n<td></td>\n<td></td>\n<td></td>\n<td>N</td>\n<td></td>\n</tr>\n<tr>\n<td>Start_date</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>End_date</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>priority</td>\n<td>H,M,L</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n</li>\n<li class=\"quiz essay\">\n<p>Fill in the insert statement below to insert a record into your table that contains this data</p>\n<div class=\"note default no-icon\">\n<table>\n<thead>\n<tr>\n<th>Field name</th>\n<th>Data</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Id</td>\n<td></td>\n</tr>\n<tr>\n<td>ticketNum</td>\n<td>1001</td>\n</tr>\n<tr>\n<td>ticketDecsc</td>\n<td>PC Virus</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO tickets(ticketNum, ticketDesc) \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                          <span class=\"token string\">\" VALUES (1001, 'PC VIRUS')\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Fill in the insert statement again to add a record to the table this time with variables called  <code>ticket_num</code>  and  <code>ticket_desc</code> ?</p>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> <span class=\"token string\">\"INSERT INTO tickets(ticketNum, ticketDesc) \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                          <span class=\"token string\">\" VALUES ('\"</span><span class=\"token operator\">+</span>ticket_num<span class=\"token operator\">+</span><span class=\"token string\">\"','\"</span><span class=\"token operator\">+</span>ticket_desc<span class=\"token operator\">+</span><span class=\"token string\">\"')\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>When would you perform a commit as a command?</p>\n<blockquote>\n<ul>\n<li>The COMMIT command is the transactional command used to save <ins>changes</ins> invoked by a transaction to the database.<br />\nCOMMIT 命令是用于将事务调用的 “更改” 保存到数据库的事务性命令。</li>\n<li>The COMMIT command saves all transactions to the database since the last COMMIT or ROLLBACK command.<br />\nCOMMIT 命令将自上一个 COMMIT 或 ROLLBACK 命令以来的所有事务保存到数据库中。</li>\n<li>The syntax for COMMIT command is as follows:<br />\n 语法如下<br />\n <code>COMMIT;</code></li>\n</ul>\n</blockquote>\n</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMD 510. Object-Oriented App Develop",
                "Java",
                "Database"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmd-510/week-9/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmd-510/week-9/",
            "title": "Week 9. Streams API",
            "date_published": "2020-10-24T14:51:29.000Z",
            "content_html": "<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"streams-api-interface\"><a class=\"anchor\" href=\"#streams-api-interface\">#</a> Streams API Interface</h2>\n<h3 id=\"lambda-expressions\"><a class=\"anchor\" href=\"#lambda-expressions\">#</a> Lambda Expressions</h3>\n<p>3 ways to execute</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> byAge <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> emp1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Employee</span> emp2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> emp1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> emp2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> emps <span class=\"token operator\">=</span> <span class=\"token function\">fetchMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>emps<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>byAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> emps <span class=\"token operator\">=</span> <span class=\"token function\">fetchMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>emps<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span> emp1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Employee</span> emp2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> emp1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> emp2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> emps <span class=\"token operator\">=</span> <span class=\"token function\">fetchMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>emps<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>emp1<span class=\"token punctuation\">,</span> emp2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> emp1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> emp2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>Lambdas</strong> or Anonymous functions.</p>\n<h3 id=\"syntax\"><a class=\"anchor\" href=\"#syntax\">#</a> Syntax</h3>\n<p><code>lambda operator -&gt; body</code> <br />\nwhere lambda operator can be...</p>\n<ul>\n<li>\n<p>Zero parameter:<br />\n <code>() -&gt; System.out.println(&quot;Zero parameter lambda&quot;);</code></p>\n</li>\n<li>\n<p>One parameter:<br />\n <code>(p) -&gt; System.out.println(&quot;One parameter: &quot; + p);</code> <br />\nIt is not mandatory to use parentheses, if the type of that variable can be inferred from the context</p>\n</li>\n<li>\n<p>Multiple parameters :<br />\n <code>(p1, p2) -&gt; System.out.println(&quot;Multiple parameters: &quot; + p1 + &quot;, &quot; + p2);</code></p>\n</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/11/02/XGlz8nDhe35WwfZ.jpg\" alt=\"\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// A Java program to demonstrate simple lambda expressions </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// Creating an ArrayList with elements &#123;1, 2, 3, 4&#125; </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> arrL <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        arrL<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        arrL<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        arrL<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        arrL<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// Using lambda expression to print all elements of arrL </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        arrL<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// Using lambda expression to print even elements of arrL </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        arrL<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Output</p>\n<pre><code>1 2 3 4 2 4\n</code></pre>\n<h2 id=\"stream-api-functionality\"><a class=\"anchor\" href=\"#stream-api-functionality\">#</a> Stream API functionality</h2>\n<p>Streams can be obtained in a number of ways.<br />\nSome examples include:</p>\n<ul>\n<li>From a Collection via the  <code>stream()</code></li>\n<li>From an array via  <code>Arrays.stream(Object[])</code> ;</li>\n</ul>\n<p>Package =&gt;  <code>java.util.stream</code></p>\n<p>Classes used to support functional-style operations on streams of elements, such as map-reduce transformations on collections.<br />\n 用于支持对元素流进行功能样式操作的类，例如集合上的 map-reduce 转换。</p>\n<p>For example:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> widgets<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>          <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-></span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          <span class=\"token punctuation\">.</span><span class=\"token function\">mapToInt</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-></span> b<span class=\"token punctuation\">.</span><span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          <span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"operations-and-pipelines\"><a class=\"anchor\" href=\"#operations-and-pipelines\">#</a> Operations and pipelines</h3>\n<p>A stream is a <strong>limitless</strong> <ins>iterator</ins> that allows you to process collections.<br />\n 流是无限的迭代器，可以处理集合。</p>\n<p>Stream operations are divided into <ins>intermediate</ins> and <ins>terminal</ins> operations, and are combined to form stream pipelines or chained operations. The pipeline usually takes the form of  <code>map-filter-reduce</code>  pattern.<br />\n 流操作分为中间操作和终端操作，结合在一起以形成流管道或链接操作。 管道通常采用 map-filter-reduce 模式的形式。</p>\n<p>The  <code>.map()</code>  method is not an associative data structure, rather it is a transformative operation. It takes a  <code>Stream&lt;T&gt;</code>  and it returns either a  <code>Stream&lt;T&gt;</code>  or  <code>Stream&lt;U&gt;</code> .<br />\n <code>.map()</code>  方法不是关联数据结构，而是一种转换操作。 它采用 Stream &lt;T&gt;，并返回 Stream &lt;T &gt; 或 Stream &lt;U&gt;。</p>\n<p>Example:  <code>Stream&lt;String&gt;</code>  to  <code>Stream&lt;String&gt;</code> <br />\nExample:  <code>Stream&lt;String&gt;</code>  to  <code>Stream&lt;Date&gt;</code></p>\n<p><img data-src=\"https://i.loli.net/2020/11/02/gGBMQ6374P9VcjX.png\" alt=\"\" /></p>\n<p>A stream pipeline consists of a source (such as a Collection or an array); followed by zero or more intermediate operations such as  <code>Stream.filter</code>  or  <code>Stream.map</code> ; and a terminal operation such as  <code>Stream.forEach</code>  or  <code>Stream.reduce</code> .<br />\n 流管道由一个源（例如 Collection 或数组）组成； 随后是零个或多个中间操作，例如 <code>Stream.filter</code>  或 <code>Stream.map</code> ； 以及诸如 <code>Stream.forEach</code>  或 <code>Stream.reduce</code>  之类的终端操作。</p>\n<dl>\n<dt>Intermediate operations</dt>\n<dd>return a <ins>new stream</ins>. They are always <em>lazy</em>; executing an intermediate operation such as  <code>filter()</code>  does not actually perform any filtering, but instead creates a new stream.  Some method examples follow:<br />\n 中间操作返回一个新的流。 它们总是懒惰的。 执行诸如 <code>filter()</code>  之类的中间操作实际上并不执行任何过滤，而是创建一个新的流。 一些方法示例如下：<br />\n <code>peek()</code>  method<br />\n <code>map()</code>  method<br />\n <code>filter()</code>  method</dd>\n<dt>Terminal operations</dt>\n<dd>such as  <code>Stream.forEach</code>  or  <code>IntStream.sum</code> , may traverse the stream to produce a result or a side-effect. After the terminal operation is performed, the stream pipeline is considered consumed, and <ins>can no longer be used</ins>.  Example methods follow:<br />\n 诸如 <code>Stream.forEach</code>  或 <code>IntStream.sum</code>  之类的终端操作，可能会遍历该流以产生结果或副作用。 执行终端操作后，流管线被视为已消耗，无法再使用。 示例方法如下：<br />\n <code>forEach()</code>  method<br />\n <code>count()</code>  method<br />\n <code>max()</code>  method<br />\n <code>collect()</code>  method<br />\n <code>reduce()</code>  method</dd>\n</dl>\n<h4 id=\"ex-use-cases\"><a class=\"anchor\" href=\"#ex-use-cases\">#</a> Ex use cases</h4>\n<dl>\n<dt>map</dt>\n<dd>The map method is used to map the items in the collection to other objects according to the Function passed as argument.<br />\n 用于根据作为参数传递的 Function，将集合中的项目映射到其他对象。</dd>\n</dl>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span> number <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span> square <span class=\"token operator\">=</span> number<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> x<span class=\"token operator\">*</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><dl>\n<dt>filter</dt>\n<dd>The filter method is used to select elements as per the Predicate passed as argument.<br />\n 根据作为参数传递的词，进行元素选择。</dd>\n</dl>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span> names <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reflection\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Collection\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span> result <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"S\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><dl>\n<dt>sorted</dt>\n<dd>The sorted method is used to sort the stream.<br />\n 用于对流进行排序。</dd>\n</dl>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span> names <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reflection\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Collection\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span> result <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Map example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// applying 12% VAT on each purchase</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Without lambda expressions:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">List</span> costBeforeTax <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> cost <span class=\"token operator\">:</span> costBeforeTax<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">double</span> price <span class=\"token operator\">=</span> cost <span class=\"token operator\">+</span> <span class=\"token number\">.12</span><span class=\"token operator\">*</span>cost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// With Lambda expression:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">List</span> costBeforeTax <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>costBeforeTax<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> cost <span class=\"token operator\">+</span> <span class=\"token number\">.12</span><span class=\"token operator\">*</span>cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Output</p>\n<pre><code>112.0\n224.0\n336.0\n448.0\n560.0\n112.0\n224.0\n336.0\n448.0\n560.0\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Map reduce example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Applying 12% VAT on each purchase</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Old way:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">List</span> costBeforeTax <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">double</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> cost <span class=\"token operator\">:</span> costBeforeTax<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token keyword\">double</span> price <span class=\"token operator\">=</span> cost <span class=\"token operator\">+</span> <span class=\"token number\">.12</span><span class=\"token operator\">*</span>cost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> total <span class=\"token operator\">=</span> total <span class=\"token operator\">+</span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total : \"</span> <span class=\"token operator\">+</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// New way:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">List</span> costBeforeTax <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">double</span> bill <span class=\"token operator\">=</span> costBeforeTax<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> cost <span class=\"token operator\">+</span> <span class=\"token number\">.12</span><span class=\"token operator\">*</span>cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span> cost<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> sum <span class=\"token operator\">+</span> cost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total : \"</span> <span class=\"token operator\">+</span> bill<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Output</p>\n<pre><code>Total : 1680.0\nTotal : 1680.0\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// joining list and appending data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> l <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> sl <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>l<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> sl<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"further-uses-of-stream-api\"><a class=\"anchor\" href=\"#further-uses-of-stream-api\">#</a> Further uses of Stream API!!</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employees</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//put a structure together</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> rank<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//add constructor</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Employees</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span> rank<span class=\"token operator\">=</span>r<span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employees</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employees</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"james papa\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employees</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"luke papa\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employees</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kay papa\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/*Old school coding - sort first then display filtered results</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        Collections.sort(list, new EmployeesSort());</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        for(Employees e : list) &#123;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            if(e.rank == 4)</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                System.out.println(e.name + \" \" + e.rank);</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">//New school output list - stream alt. and sorted!</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>rank <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">forEachOrdered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>import java.util.Comparator;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>public class EmployeesSort implements Comparator&lt;Employees>&#123;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    //compare by name</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    public int compare(Employees obj1, Employees obj2) &#123;</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        return obj1.name.compareTo(obj2.name);</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>&#125;*/</span></pre></td></tr></table></figure><h1 id=\"lab\"><a class=\"anchor\" href=\"#lab\">#</a> Lab</h1>\n<ul>\n<li>\n<p>PROJECT<br />\nBank record generations</p>\n</li>\n<li>\n<p>Objective<br />\nTo write a program that performs data analysis from class objects created in lab #2.</p>\n</li>\n</ul>\n<h2 id=\"project-description\"><a class=\"anchor\" href=\"#project-description\">#</a> PROJECT DESCRIPTION</h2>\n<p>Bank of IIT is in desperate need of analytics from its clients for its loan application process. Currently records show 600 clients exist and the bank is hoping to expand its clientele and its potential by offering <ins>premium</ins> loans to deserved grantees.<br />\nIIT 银行迫切需要客户对其贷款申请流程进行分析。 目前的记录显示有 600 个客户，该银行希望通过向应得的受赠人提供优质贷款来扩大其客户群和潜力。</p>\n<p>Perform the data analysis as follows for this lab.<br />\n 对该实验室执行以下数据分析。</p>\n<h2 id=\"project-details\"><a class=\"anchor\" href=\"#project-details\">#</a> Project Details</h2>\n<ul>\n<li>\n<p>Add to your existing project files from lab 2, a new class called Records. Have the class extend the BankRecords class to grab hold of its instance methods plus the BankRecords object array.<br />\n 在 lab2 的项目文件中，添加一个名为 <code>Records</code>  的新类。让该类扩展 <code>BankRecords</code>  类以获取其实例方法，以及 <code>BankRecords</code>  对象数组。</p>\n</li>\n<li>\n<p>Provide at least 2 comparator classes implementing the java.util.Comparator interface for comparing various fields for the following data analysis requirements.<br />\n 提供至少两个比较器类，这些比较器类实现 <code>java.util.Comparator</code>  接口，以比较各个字段，以符合以下数据分析要求。</p>\n</li>\n<li>\n<p>Perform the following analysis requirements and output detail for the Records class.<br />\n 对 <code>Records</code>  类执行以下分析要求和输出详细信息。</p>\n<p>Display the following data analytics in a coherent manner to the console:<br />\n 以一致的方式在控制台上显示以下数据分析：</p>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>average income for males vs. females<br />\n 男性与女性的平均收入</li>\n<li>number of females with a mortgage and savings account<br />\n 拥有抵押和储蓄账户的女性人数</li>\n<li>number of males with both a car and 1 child per location<br />\n 每个地点有汽车和 1 个孩子的男性人数</li>\n</ul>\n</blockquote>\n<ul>\n<li>\n<p>Write all displayed data to a text file called bankrecords.txt relative to your project path as well. Append your name within the text file at the end of the file plus the date/time.<br />\n 将所有显示的数据写入一个名为 <code>bankrecords.txt</code>  的文本文件中，并保存在相对于您的项目路径的位置。在文件末尾的文本中添加您的姓名以及日期 / 时间。</p>\n<p>Include for credit, your project files including your .csv file and bankrecords.txt file into a zip file, also your jar (executable) file as well as a separate file, and your snapshots of console output and your bankrecords.txt file plus your source code into a Word doc file.<br />\n 项目文件（包括.csv 文件和 bankrecords.txt 文件）压缩到 zip 文件中，还包括 jar（可执行）文件也是一个单独的文件。控制台输出快照、bankrecords.txt 文件以及您的源代码转换为 Word doc 文件。</p>\n</li>\n</ul>\n<h2 id=\"objectives\"><a class=\"anchor\" href=\"#objectives\">#</a> Objectives</h2>\n<h3 id=\"example-of-creating-a-comparator\"><a class=\"anchor\" href=\"#example-of-creating-a-comparator\">#</a> Example of creating a comparator</h3>\n<p>For your first analytic response that is to show the<br />\n <code>average income for males vs. females</code> <br />\nyou may want to create a comparator class to sort by sex<br />\n 对于第一个分析，即显示男性与女性的平均收入，可能要创建一个比较器类，以按性别排序。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SexComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BankRecords</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BankRecords</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// use compareTo to compare strings</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Think of comparators you can set up with not only a primary sort but secondary sorts as well.  Example maybe a female sort as a primary sort and mortgages as a secondary sort, etc.<br />\n 比较器不仅可以设置一级排序，还可以设置二级排序。 例如，女性排序为主要排序，抵押贷款为次要排序，等等。</p>\n<p>Another example here maybe to create a comparator java class for sorting by location…<br />\n 这里的另一个示例可创建一个比较器 Java 类，以按地点排序…</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LocationComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BankRecords</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BankRecords</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// use compareTo to compare strings</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"call-up-your-comparators-in-your-recordsjava-file\"><a class=\"anchor\" href=\"#call-up-your-comparators-in-your-recordsjava-file\">#</a> Call up your comparators in your Records.java file.</h3>\n<p>在 Records.java 文件中调用比较器。</p>\n<p>Ex. in  <code>main()</code> , you can call a series of functions to perform your analytic results.<br />\n 例如 在 main 函数中，可以调用一系列函数来执行分析结果。</p>\n<p>Set up your file to also not only write to the console but to a text file.<br />\n 将文件设置为不仅要写入控制台，还要写入文本文件。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Records</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BankRecords</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// create formatted object to write output directly to console &amp; file</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">FileWriter</span> fw <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Records</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bankrecords.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Records</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Records</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        br<span class=\"token punctuation\">.</span><span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// call functions to perform analytics</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">AvgComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// analyze average income per loc</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">//femsComp();  // female count w. mort/savings accounts </span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//malesComp(); // male counts per loc. w. car &amp; 1 child </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// *** close out file object ***//</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">AvgComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SexComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// set up needed variables to gather counts &amp; income by sex </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// to determine average income by sex</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">int</span> maleCt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> femCt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">double</span> maleInc <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> femInc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> robjs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FEMALE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token operator\">++</span>femCt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                femInc <span class=\"token operator\">+=</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIncome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// display resulting averages to console and to file</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" ... \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Avg inc. for Females: $\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>femInc<span class=\"token operator\">/</span>femCt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Continue in like manner as above to finish up two other method definitions, callable in main().</p>\n<p>以上述方式继续完成另外两个方法定义，可在 main 函数中调用。</p>\n<h2 id=\"code\"><a class=\"anchor\" href=\"#code\">#</a> code</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Records.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Records</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BankRecords</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// create formatted object to write output directly to console &amp; file</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">FileWriter</span> fw <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Records</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bankrecords.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data analytic results:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Records</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Records</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        br<span class=\"token punctuation\">.</span><span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Data analytic results:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// call functions to perform analytics</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">AvgComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// analyze average income for males vs. females</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">femsComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// female count with mortgage/savings accounts </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">malesComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// male counts per loc. w. car &amp; 1 child </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// *** close out file object ***//</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token class-name\">Date</span> date<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\nShuang Liu @ \"</span> <span class=\"token operator\">+</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">AvgComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SexComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// set up needed variables to gather counts &amp; income by sex </span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// to determine average income by sex</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">int</span> maleCt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> femCt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">double</span> maleInc <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> femInc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> robjs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FEMALE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token operator\">++</span>femCt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                femInc <span class=\"token operator\">+=</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIncome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token operator\">++</span>maleCt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                maleInc <span class=\"token operator\">+=</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIncome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// display resulting averages to console and to file</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token class-name\">String</span> femAvg <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nAverage income for Females: $%.2f\"</span><span class=\"token punctuation\">,</span> femInc<span class=\"token operator\">/</span>femCt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token class-name\">String</span> maleAvg <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nAverage income for Males: $%.2f\"</span><span class=\"token punctuation\">,</span> maleInc<span class=\"token operator\">/</span>maleCt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>femAvg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>maleAvg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>femAvg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>maleAvg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">femsComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SexComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">int</span> femCt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> robjs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FEMALE\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    <span class=\"token operator\">&amp;&amp;</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMortgage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YES\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    <span class=\"token operator\">&amp;&amp;</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSave_act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YES\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token operator\">++</span>femCt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token class-name\">String</span> femNum <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\\nNum. of Females with Mortgage &amp; saving act: \"</span> <span class=\"token operator\">+</span> femCt <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>femNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>femNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">malesComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocationComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> robjs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MALE\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                    <span class=\"token operator\">&amp;&amp;</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YES\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                    <span class=\"token operator\">&amp;&amp;</span> robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                    map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token class-name\">StringBuffer</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>region<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>            </pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cs<span class=\"token operator\">=</span> region<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" region males with car &amp; 1 child: \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SexComparator.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SexComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BankRecords</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BankRecords</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// use compareTo to compare strings</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LocationComparator.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LocationComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BankRecords</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BankRecords</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// use compareTo to compare strings</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BankRecords.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BankRecords</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//setup static objects for IO processing</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//array of BankRecords objects</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">BankRecords</span> robjs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">[</span><span class=\"token number\">600</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//arraylist to hold spreadsheet rows &amp; columns</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//instance fields</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> region<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> income<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> married<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> children<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> save_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> current_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> mortgage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pep<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">//initialize reader object and set file path to root of project</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bank-Detail.csv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">//read each record in csv file</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token comment\">//parse each record in csv file by a comma ( , )</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token comment\">//into a list stored in the arraylist-> Arrays</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                array<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There was a problem loading the file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token function\">processData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//call function for processing record data</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">//create index for array while iterating thru arraylist</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">int</span> idx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">//create for each loop to cycle thru arraylist of values </span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">//and PASS that data into your record objects' setters </span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> rowData<span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">//initialize array of objects</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BankRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token comment\">//call setters below and populate them, item by item</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//get 1st column</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//get 2nd column</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setRegion</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIncome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMarried</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setChildren</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCar</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSave_act</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCurrent_act</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMortgage</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            robjs<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setPep</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token comment\">/*continue processing arraylist item values into each array object -> robjs[] by index*/</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            idx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">//printData();  //call function to print objects held in memory       </span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token comment\">//1. Set appropriate headings for displaying first 25 records</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token comment\">//2. Create for loop and print each record objects instance data </span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">//3. Within for loop use appropriate formatting techniques to print out record detail  </span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token comment\">//Set heading</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First 25 Client details:\\n\\n%-10s\\t%-10s\\t%-10s\\t%-10s\\t%-10s\\t%-10s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ID\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Age\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Sex\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Region\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Income\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Mortgage\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">25</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token class-name\">String</span> s<span class=\"token operator\">=</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-10s\\t%-10d\\t%-10s\\t%-10s\\t%-10.2f\\t%-10s\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                    robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIncome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>robjs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMortgage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>     * @return the id</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>     * @param id the id to set</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>     * @return the age</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>     * @param age the age to set</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>     * @return the sex</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token keyword\">return</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>     * @param sex the sex to set</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>     * @return the region</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRegion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token keyword\">return</span> region<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>     * @param region the region to set</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRegion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> region<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>region <span class=\"token operator\">=</span> region<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>     * @return the income</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getIncome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token keyword\">return</span> income<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>     * @param income the income to set</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setIncome</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> income<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>income <span class=\"token operator\">=</span> income<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>     * @return the married</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMarried</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token keyword\">return</span> married<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>     * @param married the married to set</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMarried</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> married<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>married <span class=\"token operator\">=</span> married<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>     * @return the children</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        <span class=\"token keyword\">return</span> children<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>     * @param children the children to set</pre></td></tr><tr><td data-num=\"181\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setChildren</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> children<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>     * @return the car</pre></td></tr><tr><td data-num=\"187\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        <span class=\"token keyword\">return</span> car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"192\"></td><td><pre>     * @param car the car to set</pre></td></tr><tr><td data-num=\"193\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCar</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> car<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>car <span class=\"token operator\">=</span> car<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"198\"></td><td><pre>     * @return the save_act</pre></td></tr><tr><td data-num=\"199\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSave_act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        <span class=\"token keyword\">return</span> save_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"204\"></td><td><pre>     * @param save_act the save_act to set</pre></td></tr><tr><td data-num=\"205\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSave_act</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> save_act<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>save_act <span class=\"token operator\">=</span> save_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"210\"></td><td><pre>     * @return the current_act</pre></td></tr><tr><td data-num=\"211\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCurrent_act</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        <span class=\"token keyword\">return</span> current_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"216\"></td><td><pre>     * @param current_act the current_act to set</pre></td></tr><tr><td data-num=\"217\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCurrent_act</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> current_act<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>current_act <span class=\"token operator\">=</span> current_act<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"222\"></td><td><pre>     * @return the mortgage</pre></td></tr><tr><td data-num=\"223\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMortgage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>        <span class=\"token keyword\">return</span> mortgage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"228\"></td><td><pre>     * @param mortgage the mortgage to set</pre></td></tr><tr><td data-num=\"229\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMortgage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> mortgage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mortgage <span class=\"token operator\">=</span> mortgage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"234\"></td><td><pre>     * @return the pep</pre></td></tr><tr><td data-num=\"235\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getPep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>        <span class=\"token keyword\">return</span> pep<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"240\"></td><td><pre>     * @param pep the pep to set</pre></td></tr><tr><td data-num=\"241\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pep<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pep <span class=\"token operator\">=</span> pep<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"245\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Client.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//read file detail</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//process file detail</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//print file detail</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMD 510. Object-Oriented App Develop",
                "Java"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmd-510/midterm-exam/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmd-510/midterm-exam/",
            "title": "Midterm Exam",
            "date_published": "2020-10-19T13:42:26.000Z",
            "content_html": "<h1 id=\"tentative-topical-coverages-for-mid-term\"><a class=\"anchor\" href=\"#tentative-topical-coverages-for-mid-term\">#</a> Tentative Topical Coverages for Mid Term</h1>\n<table>\n<thead>\n<tr>\n<th>Topic(s)</th>\n<th>Suggested Readings</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Java SE Essentials</td>\n<td>Chapters 1-5 (review of essentials)</td>\n</tr>\n<tr>\n<td>Object-Oriented Programming (OOP) concepts</td>\n<td>Chap. 6</td>\n</tr>\n<tr>\n<td>Arrays and Arraylists</td>\n<td>Chap. 7</td>\n</tr>\n<tr>\n<td>Abstraction, Inheritance, Polymorphism</td>\n<td>Chap. 10</td>\n</tr>\n<tr>\n<td>Stream I/O file processing, Exception Handling</td>\n<td>Chap. 9,11</td>\n</tr>\n<tr>\n<td>Generics, Collections (intro only)</td>\n<td>Chap. 17,18</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"sample\"><a class=\"anchor\" href=\"#sample\">#</a> Sample</h1>\n<ol>\n<li class=\"quiz multi\">\n<p>Which of these is an incorrect array declaration?</p>\n<ul class=\"options\">\n<li class=\"correct\"><code>intarr[] = newint[5]</code> </li>\n<li><code>int[] arr = new int[5]</code></li>\n<li><code>int arr[] = new int[5]</code></li>\n<li class=\"correct\"><code>int arr[] = int [5] new</code> </li>\n</ul>\n<blockquote>\n<p>哪一个是不正确的数组声明？</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>What will this code print?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li class=\"correct\">0</li>\n<li>value stored in  <code>arr[0]</code></li>\n<li>00000</li>\n<li>Class name@hashcode in hexadecimalform</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>What is the output of this program?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> array_output <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> array_variable <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\tarray_variable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>array_variable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li class=\"correct\">0 2 4 6 8</li>\n<li>1 3 5 7 9</li>\n<li>0 1 2 3 4 5 6 7 8 9</li>\n<li>1 2 3 4 5 6 7 8 9 10</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>Look at the following code.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Integer</span> myNumber <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token keyword\">var</span> <span class=\"token operator\">=</span> myNumber<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>What is true about the second statement?</p>\n<ul class=\"options\">\n<li>The statement performs autoboxing.</li>\n<li>It results in an error because you can't assign a wrapper class to a primitive variable.</li>\n<li class=\"correct\">The statement performs unboxing.</li>\n<li>The statement performs unwrapping.</li>\n</ul>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2FuZy15YXovcC84NTE2MTUxLmh0bWw=\">详解 Java 的自动装箱与拆箱 (Autoboxing and unboxing)</span></p>\n<ul class=\"options\">\n<li>该语句执行自动装箱。</li>\n<li>由于无法将包装器类分配给原始变量，因此会导致错误。</li>\n<li>该语句执行拆箱。✔️</li>\n<li>该语句执行解包。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Which is the valid declaration within an interface definition?</p>\n<ul class=\"options\">\n<li class=\"correct\"><code>public double methoda();</code> </li>\n<li><code>public final double methoda();</code></li>\n<li><code>static void methoda(double d1);</code></li>\n<li><code>protected void methoda(double d1);</code></li>\n</ul>\n<blockquote>\n<p>在接口定义中，哪个是有效声明？</p>\n</blockquote>\n</li>\n<li class=\"quiz false\">\n<p>A private base method can be overridden by some derived public method.</p>\n<blockquote>\n<p>私有基础方法可以被某些派生的公共方法覆盖。</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Which of these keywords is not a part of exception handling?</p>\n<ul class=\"options\">\n<li>try</li>\n<li>finally</li>\n<li class=\"correct\">thrown</li>\n<li>catch</li>\n</ul>\n<blockquote>\n<p>这些关键字中的哪个不是异常处理的一部分？</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>The process of converting one date type to another is called <span class=\"gap\"></span>.</p>\n<ul class=\"options\">\n<li>Translating</li>\n<li class=\"correct\">Casting</li>\n<li>Compiling</li>\n<li>Declaring</li>\n</ul>\n<blockquote>\n<p>将一种日期类型转换为另一种日期的过程称为</p>\n<ul class=\"options\">\n<li>翻译</li>\n<li>强制转换 ✔️</li>\n<li>编译</li>\n<li>声明</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Which of the following is the correct declaration statement in java program?</p>\n<ul class=\"options\">\n<li><code>int num = int[5]</code></li>\n<li><code>int num = new num[5]</code></li>\n<li class=\"correct\"><code>int[] num = new int[5]</code> </li>\n<li>None</li>\n</ul>\n<blockquote>\n<p>以下哪项是 Java 程序中正确的声明语句？</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>What line of code should replace the missing statement to make this program compile?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* Missing Statement ? */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> foo <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exceptionn</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>PrintWriter</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>PrintWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tout<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li class=\"correct\">No statement required.</li>\n<li><code>import java.io.*;</code></li>\n<li><code>include java.io.*;</code></li>\n<li><code>import java.io.PrintWriter;</code></li>\n</ul>\n<blockquote>\n<p>哪一行代码应替换丢失的语句以使该程序得以编译？</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p><span class=\"gap\"></span> method is used to find the nth no. of character of given string s1.</p>\n<ul class=\"options\">\n<li><code>1.index(n)</code></li>\n<li><code>s1.substring(n)</code></li>\n<li><code>s1.length()</code></li>\n<li class=\"correct\"><code>s1.charAt(n)</code> </li>\n</ul>\n<blockquote>\n<p><span class=\"gap\"></span> 方法用于查找给定字符串 s1 的第 n 个字符。</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Which of these can be overloaded?</p>\n<ul class=\"options\">\n<li>Methods</li>\n<li>Constructors</li>\n<li class=\"correct\">both a and b</li>\n<li>None can be overloaded</li>\n</ul>\n<blockquote>\n<p>哪些可以被重载？</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>The concept of multiple inheritance is implemented in Java by?</p>\n<p>I.   Extending two or more classes.<br />\nII.  Extending one class and implementing one or more interfaces.<br />\nIII. Implementing two or more interfaces.</p>\n<ul class=\"options\">\n<li>Only (II)</li>\n<li>(I) and (II)</li>\n<li class=\"correct\">(II) and (III)</li>\n<li>Only (I)</li>\n<li>Only (III)</li>\n</ul>\n<blockquote>\n<p>Java 的多重继承概念是通过？实现的</p>\n<ul class=\"options\">\n<li>扩展两个或多个类。</li>\n<li>扩展一个类、实现一个或多个接口。 ✔️</li>\n<li>实现两个或多个接口。 ✔️</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz fasle\">\n<p>Private members of a class are inherited in the sub class.</p>\n<blockquote>\n<p>类的私有成员在子类中被继承。</p>\n</blockquote>\n</li>\n<li class=\"quiz true\">\n<p>A method of a super class with a default access modifier can be overridden as protected or public but not as private.</p>\n<blockquote>\n<p>具有默认访问修饰符的父类方法，可以覆盖为 protected 或 public，但不能是 private。</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>What will be the output of the following program?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">X</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ONE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> d<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TWO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">X</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"THREE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainClass</span> <span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li class=\"correct\">ONE</li>\n<li>TWO</li>\n<li>THREE</li>\n<li>ONE TWO</li>\n<li>Error</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>If a superclass does not have a default constructor, then a class that inherits from it,</p>\n<ul class=\"options\">\n<li class=\"correct\">must call one of the constructors that the superclass does have</li>\n<li>must contain the default constructor for the superclass</li>\n<li>does not inherit the data member fields from the superclass</li>\n<li>must initialize the superclass values</li>\n</ul>\n<blockquote>\n<p>如果父类没有默认的构造函数，则继承自它的类</p>\n<ul class=\"options\">\n<li>必须调用父类确实具有的构造函数之一 ✔️</li>\n<li>必须包含父类的默认构造函数</li>\n<li>不继承父类的数据成员字段</li>\n<li>必须初始化超类值</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>The binary search algorithm</p>\n<ul class=\"options\">\n<li class=\"correct\">will cut the portion of the array being searched in half each time the loop fails to locate the search value</li>\n<li>will have an average of N/2 comparisons, where N is the number of elements in the array</li>\n<li>is less efficient than the sequential search algorithm</li>\n</ul>\n<blockquote>\n<p>二进制搜索算法</p>\n<ul class=\"options\">\n<li>每次循环未能找到搜索值时，将被搜索数组的部分切成一半 ✔️</li>\n<li>将平均进行 N/2 次比较，其中 N 是数组中元素的数量</li>\n<li>效率较低比顺序搜索算法</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"coding-and-definitions\"><a class=\"anchor\" href=\"#coding-and-definitions\">#</a> Coding and Definitions</h2>\n<ol start=\"19\">\n<li class=\"quiz essay\">\n<p>What are some advantages of using Generic types?  List some example.</p>\n<blockquote>\n<p>使用泛型类型有哪些优势？列举一些例子。<br />\nAdvantages: use cases - Type safety at runtime + avoids costs (code duplication!).<br />\n 优点：用例 - 运行时类型安全 + 避免成本（代码重复！）。<br />\nEx. Casting issues give compile time errors if elements aren't proper possible generic datatypes.<br />\n 例如，如果元素不是适当的泛型数据类型，则强制转换问题会导致编译时错误。<br />\nGenerics work around this by typechecking at compile time to prevent ClassCastExceptions!<br />\n 泛型通过在编译时进行类型检查，来避免 ClassCastExceptions，来解决此问题！<br />\nWithout generics/typecheck<br />\n 没有泛型 / 类型检查</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">Object</span> obj1 <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">String</span> obj2 <span class=\"token operator\">=</span>  list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token class-name\">Integer</span> obj3 <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//compile error! Can't convert String to Integer</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Why do you suppose a class level generic variable cannot be static?</p>\n<blockquote>\n<p>为什么类级别的泛型变量不能为静态变量？<br />\nUsing generics, type parameters are not allowed to be static, as the static variable is shared amongst objects so compiler can not determine which type to used.<br />\n 使用泛型时，类型参数不允许为静态，因为静态变量在对象之间共享，因此编译器无法确定要使用哪种类型。</p>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>What are some basic differences between an Array and ArrayList?</p>\n<blockquote>\n<p>Array 和 ArrayList 之间有哪些基本区别？<br />\nThe array represents a basic functionality whereas the ArrayList is part of collection framework in Java.<br />\n 数组 Array 代表基本功能，而 ArrayList 是 Java 中 collection 框架的一部分。<br />\nTherefore array members are accessed using [], whilst an ArrayList has a set of methods to access elements and have the ability to modify them.<br />\n 因此，数组成员使用 <code>[]</code>  访问，而 ArrayList 具有一组访问元素，并具有修改元素的能力。<br />\nArraylists are also dynamic in memory and can grow and shrink at runtime.<br />\nArraylist 在内存中也是动态的，并且可以在运行时增长和缩小。</p>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>What is the major difference between an abstract class and an interface?</p>\n<blockquote>\n<p>抽象类和接口之间的主要区别是什么？<br />\nAbstract class is more expensive to use, as there is a look-up to do when you inherit from them. Can define a behavior for common classes.<br />\n 抽象类的使用成本更高，因为从它们继承时需要进行查找。可以定义常见类的行为。<br />\nAn interface is a contract, a generic pattern of methods with just signatures allowing any class implement its methods in a way that it wishes to do.<br />\n 接口是一种契约，一种通用方法，带有签名，允许任何类以其希望的方式实现其方法。</p>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>Define Polymorphism?  What are some of its abilities/usefulness?</p>\n<blockquote>\n<p>多态的定义？它的一些功能 / 用处是什么？<br />\nMeans a state of having many shapes or the capacity to take on various forms (sub types). Ability to describe and process objects of various types and classes through a single, uniform interface (base object).<br />\n 表示具有多种形状或具有采取多种形式（子类型）的能力的状态。通过单个统一的界面（基础对象）描述和处理各种类型和类的对象的能力。<br />\nPolymorphism is a OOPs concept where one name can have many forms. For example, you have a smartphone for communication. The communication mode you choose could be anything. It can be a call, a text message, a picture message, mail, etc. So, the goal is common that is communication, but their approach is different. This is called Polymorphism.<br />\n 多态是一个 OOPs 概念，其中一个名称可以具有多种形式。 例如，您有用于通信的智能手机。 您选择的通信模式可以是任何一种。 它可以是呼叫，短信，图片消息，邮件等。因此，目标很普遍，那就是沟通，但他们的方法不同。 这称为多态。</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<pre class=\"mermaid\"><svg id=\"mermaid-1615277006043\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" height=\"246.375\" style=\"max-width: 335.890625px;\" viewBox=\"-20 -20 335.890625 246.375\"><g></g><defs><marker id=\"extensionStart\" class=\"extension\" refX=\"0\" refY=\"7\" markerWidth=\"190\" markerHeight=\"240\" orient=\"auto\"><path d=\"M 1,7 L18,13 V 1 Z\"></path></marker></defs><defs><marker id=\"extensionEnd\" refX=\"19\" refY=\"7\" markerWidth=\"20\" markerHeight=\"28\" orient=\"auto\"><path d=\"M 1,1 V 13 L18,7 Z\"></path></marker></defs><defs><marker id=\"compositionStart\" class=\"extension\" refX=\"0\" refY=\"7\" markerWidth=\"190\" markerHeight=\"240\" orient=\"auto\"><path d=\"M 18,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"compositionEnd\" refX=\"19\" refY=\"7\" markerWidth=\"20\" markerHeight=\"28\" orient=\"auto\"><path d=\"M 18,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"aggregationStart\" class=\"extension\" refX=\"0\" refY=\"7\" markerWidth=\"190\" markerHeight=\"240\" orient=\"auto\"><path d=\"M 18,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"aggregationEnd\" refX=\"19\" refY=\"7\" markerWidth=\"20\" markerHeight=\"28\" orient=\"auto\"><path d=\"M 18,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"dependencyStart\" class=\"extension\" refX=\"0\" refY=\"7\" markerWidth=\"190\" markerHeight=\"240\" orient=\"auto\"><path d=\"M 5,7 L9,13 L1,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"dependencyEnd\" refX=\"19\" refY=\"7\" markerWidth=\"20\" markerHeight=\"28\" orient=\"auto\"><path d=\"M 18,7 L9,13 L14,7 L9,1 Z\"></path></marker></defs><g id=\"classid-Employee-0\" class=\"classGroup\" transform=\"translate(96.94140625,0 )\"><rect x=\"0\" y=\"0\" width=\"98.203125\" height=\"78.21875\" class=\" \"></rect><text y=\"15\" x=\"0\"><tspan class=\"title\" x=\"26.328125\">Employee</tspan></text><line x1=\"0\" y1=\"21.0625\" y2=\"21.0625\" x2=\"98.203125\"></line><text x=\"5\" y=\"31.0625\" fill=\"white\" class=\"classText\"><tspan x=\"5\">-empCode : int</tspan><tspan x=\"5\" dy=\"10\">-firstName : String</tspan><tspan x=\"5\" dy=\"10\">-lastName: String</tspan></text><line x1=\"0\" y1=\"57.125\" y2=\"57.125\" x2=\"98.203125\"></line><text x=\"5\" y=\"72.125\" fill=\"white\" class=\"classText\"><tspan x=\"5\">+pay()</tspan></text></g><g id=\"classid-HourlyEmployee-1\" class=\"classGroup\" transform=\"translate(0,133.1875 )\"><rect x=\"0\" y=\"0\" width=\"119.140625\" height=\"68.21875\" class=\" \"></rect><text y=\"15\" x=\"0\"><tspan class=\"title\" x=\"21.3125\">HourlyEmployee</tspan></text><line x1=\"0\" y1=\"21.0625\" y2=\"21.0625\" x2=\"119.140625\"></line><text x=\"5\" y=\"31.0625\" fill=\"white\" class=\"classText\"><tspan x=\"5\">-rate : double</tspan><tspan x=\"5\" dy=\"10\">-workingHours : double</tspan></text><line x1=\"0\" y1=\"47.125\" y2=\"47.125\" x2=\"119.140625\"></line><text x=\"5\" y=\"62.125\" fill=\"white\" class=\"classText\"><tspan x=\"5\">+pay()</tspan></text></g><g id=\"classid-SalariedEmployee-2\" class=\"classGroup\" transform=\"translate(169.140625,128.21875 )\"><rect x=\"0\" y=\"0\" width=\"126.75\" height=\"78.15625\" class=\" \"></rect><text y=\"15\" x=\"0\"><tspan class=\"title\" x=\"21.8359375\">SalariedEmployee</tspan></text><line x1=\"0\" y1=\"21.0625\" y2=\"21.0625\" x2=\"126.75\"></line><text x=\"5\" y=\"31.0625\" fill=\"white\" class=\"classText\"><tspan x=\"5\">-commisionRate : double</tspan><tspan x=\"5\" dy=\"10\">-grossSales : double</tspan><tspan x=\"5\" dy=\"10\">-basic : double</tspan></text><line x1=\"0\" y1=\"57.0625\" y2=\"57.0625\" x2=\"126.75\"></line><text x=\"5\" y=\"72.0625\" fill=\"white\" class=\"classText\"><tspan x=\"5\">+pay()</tspan></text></g><path d=\"M96.94140625,75.51244875660659L90.712890625,80.13016563050549C84.484375,84.74788250440439,72.02734375,93.9833162522022,65.798828125,103.59582479276776C59.5703125,113.20833333333333,59.5703125,123.19791666666667,59.5703125,128.19270833333334L59.5703125,133.1875\" id=\"edge0\" class=\"relation\" marker-start=\"url(#dependencyStart)\"></path><path d=\"M195.14453125,75.51244875660659L201.373046875,80.13016563050549C207.6015625,84.74788250440439,220.05859375,93.9833162522022,226.287109375,102.76769979276776C232.515625,111.55208333333333,232.515625,119.88541666666667,232.515625,124.05208333333333L232.515625,128.21875\" id=\"edge1\" class=\"relation\" marker-start=\"url(#dependencyStart)\"></path></svg></pre></div>\n</li>\n<li class=\"quiz essay\">\n<p>Create and define a method called popList that gets passed an arraylist called list that will accept any numeric value type passed in. The method definition should assign 5 integers to the arraylist via a loop storing the values of 1,2,3,4 and 5 respectively.</p>\n<blockquote>\n<p>创建并定义一个名为 popList 的方法，该方法将传递一个名为 list 的 arraylist 数组列表，该列表将接受传入的任何数值类型。该方法定义应通过存储 1,2,3,4 和 5 的循环，分别将 5 个整数分配给 arraylist。</p>\n</blockquote>\n<div class=\"note default\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> popList <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t   list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz essay\">\n<p>Code the sort method below to sort an arraylist in ascending order? (DO NOT USE ANY PRE DEFINED METHODS) </p>\n<blockquote>\n<p>编写下面的 sort 方法对数组列表进行升序排序？（请勿使用任何预先定义的方法）</p>\n</blockquote>\n<div class=\"note default\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> aListClass<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> values <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tvalues<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tvalues<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">41</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tvalues<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> aList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> aList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> aList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"15\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>aList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"16\"></td><td><pre>\t\t\t\t\ttemp <span class=\"token operator\">=</span> aList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr class=\"marked\"><td data-num=\"17\"></td><td><pre>\t\t\t\t\taList<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> aList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// swap</span></pre></td></tr><tr class=\"marked\"><td data-num=\"18\"></td><td><pre>\t\t\t\t\taList<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t  <span class=\"token comment\">// values</span></pre></td></tr><tr class=\"marked\"><td data-num=\"19\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>\t\t  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n</li>\n</ol>\n<h1 id=\"review\"><a class=\"anchor\" href=\"#review\">#</a> Review</h1>\n<ol>\n<li class=\"quiz\">\n<p>Methods that operate on an object's fields are called</p>\n<ul class=\"options\">\n<li>Private methods</li>\n<li class=\"correct\">Instance methods</li>\n<li>Instance variables</li>\n<li>Public methods</li>\n</ul>\n<blockquote>\n<p>操作对象字段的方法称为</p>\n<ul class=\"options\">\n<li>私人方法</li>\n<li>实例方法 ✔️</li>\n<li>实例变量</li>\n<li>公开方法</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>A constructor</p>\n<ul class=\"options\">\n<li>Has return type of void</li>\n<li>Always accepts two arguments</li>\n<li>Always has an access specifier of private</li>\n<li class=\"correct\">Has the same name as the class</li>\n</ul>\n<blockquote>\n<p>构造函数</p>\n<ul class=\"options\">\n<li>返回类型为 void</li>\n<li>一律接受两个参数</li>\n<li>始终具有私有的访问说明</li>\n<li>与类同名 ✔️</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>To develop a program to solve a problem, you start by <span class=\"gap\"></span>.</p>\n<ul class=\"options\">\n<li class=\"correct\">analyzing the problem</li>\n<li>implementing the solution in Java</li>\n<li>designing the algorithm</li>\n<li>entering the solution into a computer system</li>\n</ul>\n<blockquote>\n<p>要开发解决问题的程序，您首先需要从 <span class=\"gap\"></span> 开始。</p>\n<ul class=\"options\">\n<li>分析问题 ✔️</li>\n<li>用 Java 实现解决方案</li>\n<li>设计算法</li>\n<li>将解决方案输入计算机系统</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Declaring a class level variable as static means <span class=\"gap\"></span>.</p>\n<ul class=\"options\">\n<li>access is obtainable only thru a class object</li>\n<li class=\"correct\">any method (static, instance) can have access</li>\n<li>no methods can have access</li>\n<li>none of the above</li>\n</ul>\n<blockquote>\n<p>将类级别变量声明为静态意味着 <span class=\"gap\"></span> 。</p>\n<ul class=\"options\">\n<li>访问只能通过类对象获得</li>\n<li>任何方法（静态，实例）都可以访问 ✔️</li>\n<li>没有方法可以访问</li>\n<li>以上都不是</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>In an interface all methods have</p>\n<ul class=\"options\">\n<li class=\"correct\">public access</li>\n<li>packaged access</li>\n<li>private access</li>\n<li>protected access</li>\n</ul>\n<blockquote>\n<p>在接口中，所有方法都具有</p>\n<ul>\n<li>public 访问权限 ✔️</li>\n<li>packaged 访问权限</li>\n<li>private 访问权限</li>\n<li>protected 访问权限</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>The binary search algorithm</p>\n<ul class=\"options\">\n<li class=\"correct\">will cut the portion of the array being searched in half each time the loop fails to locate the search value</li>\n<li>will have an average of N/2 comparisons, where N is the number of elements in the array</li>\n<li>is less efficient than the sequential search algorithm</li>\n<li>will have a maximum number of comparisons equal to the number of elements in the array</li>\n</ul>\n<blockquote>\n<p>二进制搜索算法</p>\n<ul class=\"options\">\n<li>每次循环未能找到搜索值时，将被搜索数组的一部分切成两半 ✔️</li>\n<li>将具有 N/2 个比较的平均值，其中 N 是数组中元素的数量</li>\n<li>比顺序搜索算法效率低</li>\n<li>将具有的最大比较数量等于数组中元素的数量</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>The declaration</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> aL <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li>compiles and runs correctly, but is not recommended</li>\n<li>allows the programmer to create an ArrayList that holds integer types</li>\n<li class=\"correct\">causes a compile-time error</li>\n<li>compiles correctly, but causes an exception to be thrown at run time</li>\n</ul>\n<blockquote>\n<ul class=\"options\">\n<li>正确编译并运行，但不建议</li>\n<li>允许程序员创建一个保存整数类型的 ArrayList</li>\n<li>导致编译时错误 ✔️</li>\n<li>正确编译，但导致在运行时引发异常</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Another term for an object of a class is:</p>\n<ul class=\"options\">\n<li>access specifier</li>\n<li class=\"correct\">instance</li>\n<li>member</li>\n<li>method</li>\n</ul>\n<blockquote>\n<p>类的对象的另一个术语是：</p>\n<ul class=\"options\">\n<li>访问说明符</li>\n<li>实例 ✔️</li>\n<li>成员</li>\n<li>方法</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>In a Binary Search routine, the array item in the middle of the array portion is at subscript position</p>\n<ul class=\"options\">\n<li class=\"correct\">(lower + upper)/2</li>\n<li>(upper - lower)/2</li>\n<li>(lower - upper)/2</li>\n<li>lower + upper/2</li>\n</ul>\n<blockquote>\n<p>在二进制搜索例程中，中间的数组项位于下标位置？</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Which class is related to all the exceptions that cannot be caught?</p>\n<ul class=\"options\">\n<li class=\"correct\">Error</li>\n<li>Exception</li>\n<li>RuntimeException</li>\n<li>All of the mentioned</li>\n</ul>\n<blockquote>\n<p>哪个类与所有无法捕获的异常相关？<br />\nRuntime errors cannot be caught generally. Error class is used to catch such errors/exceptions.<br />\n 通常无法捕获运行时错误。 Error 类用于捕获此类错误 / 异常。</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>For the following code, which statement is not true?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sphere</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> radius<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li class=\"correct\">z is available to code that is written outside the Sphere class</li>\n<li>radius, x, y, and z are called members of the Sphere class</li>\n<li>x is available to code that is written outside the Sphere class</li>\n<li>radius is not available to code written outside the Sphere class</li>\n</ul>\n<blockquote>\n<p>对于以下代码，哪个语句不正确</p>\n<ul class=\"options\">\n<li>z 可用于在 Sphere 类之外编写的代码 ✔️</li>\n<li>radius，x，y 和 z 被称为 Sphere 类的成员</li>\n<li>x 可用于在 Sphere 类之外编写的代码</li>\n<li>radius 不适用于在 Sphere 类之外编写的代码</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>The following statement creates an  <code>ArrayList</code>  object. What is the purpose of the  <code>&lt;String&gt;</code>  notation?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li>It specfies that everything store for the arr object will be converted to a String;</li>\n<li>It specfies that String objects may not be stored in the ArrayList object;</li>\n<li class=\"correct\">It specfies that only String objects may be stored in the ArrayList object;</li>\n<li>It specfies that the get method will only return String ob.</li>\n</ul>\n<blockquote>\n<p>以下语句创建一个 <code>ArrayList</code>  对象。  <code>&lt;String&gt;</code>  表示法的目的是什么？</p>\n<ul class=\"options\">\n<li>确定将所有存储在 <code>arr</code>  对象中的东西都转换为 <code>String</code> ；</li>\n<li>确定 <code>String</code>  对象可能不存储在 <code>ArrayList</code>  对象中；</li>\n<li>规定只有 <code>String</code>  对象可以存储在 <code>ArrayList</code>  对象中； ✔️</li>\n<li>它指定 <code>get</code>  方法将仅返回 <code>String ob</code> 。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>What would be the results of the following code?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> SIZE <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// ... Code that will put values in array1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a <span class=\"token operator\">&lt;=</span> array1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tvalue <span class=\"token operator\">+=</span> array1<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li>value contains the lowest value in array1</li>\n<li>value contains the sum of all the values in array1</li>\n<li>value contains the highest value in array1</li>\n<li class=\"correct\">This would cause the program to crash</li>\n</ul>\n<blockquote>\n<p>以下代码的结果是什么？</p>\n<ul>\n<li>值包含 array1 中的最小值</li>\n<li>value 包含 array1 中所有值的总和</li>\n<li>值包含 array1 中的最大值</li>\n<li>这会导致程序崩溃 ✔️<br />\n{.options}<br />\n <code>a &lt;= array1.length - 1</code></li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>What is Data Hiding, how why is it important, in other words, why consider it for any instance fields of a class?</p>\n<blockquote>\n<ul>\n<li>What is Data Hiding:<br />\n 什么是数据隐藏？<br />\nAllows direct access and any allowed changes to the objects internal data by the class object itself.<br />\n 允许类对象本身直接访问，和允许对对象内部数据进行任何更改。<br />\nCreate private fields to allow for data hiding.<br />\n 创建私有字段，以允许隐藏数据。</li>\n<li>how why is it important?<br />\n 为什么它如此重要，换句话说，为什么要为一个类的任何实例字段考虑它？<br />\nData hiding is important because classes are typically used as components in large software systems, involving a team of programmers.<br />\n 数据隐藏很重要，因为类通常在大型软件系统中用作组件，涉及一个团队。<br />\nData hiding helps enforce the integrity of an object's internal data.<br />\n 数据隐藏有助于增强对象内部数据的完整性。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>Distinguish between a no-argument constructor and a default constructor. How are constructors distinguished from normal methods of a class?</p>\n<blockquote>\n<p>区分无参数构造函数和默认构造函数。构造函数如何与类的常规方法区分开？<br />\nA constructor that does not accept arguments is known as a no-arg constructor. It usually intializes class level variables.<br />\n 不接受参数的构造函数称为无参数构造函数。 它通常初始化类级别的变量。<br />\nThe default constructor is a constructor that the Java compiler adds to your code if no explicit constructor is available. The default constructor is consider a no-arg constructor.<br />\n 默认构造函数是 Java 编译器在没有显式构造函数可用时，将其添加到您的代码中的构造函数。 默认构造函数被视为无参数构造函数。<br />\nEx. no-arg constructor programmer defined<br />\n 例如 无参数构造函数程序员定义</p>\n</blockquote>\n<div class=\"note default no-icon\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tlength <span class=\"token operator\">=</span> width <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n</li>\n<li class=\"quiz\">\n<p>The method getMax shown below is supposed to return the position of the largest value in the portion of an array between 0 and last, inclusive:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> last<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token comment\">// Code is Missing</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>The missing code is</p>\n<ul class=\"options\">\n<li><code>if (array[k] &gt; array[max]) k = max;</code></li>\n<li class=\"correct\"><code>if (array[k] &gt; array[max]) max = k;</code> </li>\n<li><code>if (array[k] &gt; max) return max;</code></li>\n<li><code>if (array[k] &gt; array[max]) return max;</code></li>\n</ul>\n<blockquote>\n<p><code>getMax</code>  应该返回数组位置介于 <code>0</code>  到 <code>last</code>  之间的最大值。</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>If you want to share code among several closely related classes, you expect to have common functions in a class and want to defer implementations of some other functions to derived classes, then we need to use <span class=\"gap\"></span> .</p>\n<ul class=\"options\">\n<li class=\"correct\">An abstract class</li>\n<li>An interface</li>\n<li>either A or B</li>\n</ul>\n<blockquote>\n<p>如果要在几个密切相关的类之间共享代码，则希望在一个类中具有通用功能，并希望将某些其他功能的实现推迟到派生类，则我们需要使用</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>What is the output of this program?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">ArrayList</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tobj<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tobj<span class=\"token punctuation\">.</span><span class=\"token function\">ensureCapacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//increase capacity of object</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li class=\"correct\">1</li>\n<li>2</li>\n<li>4</li>\n<li>8</li>\n</ul>\n</li>\n<li class=\"quiz\">\n<p>Which collection does not allow duplicates on its elements?</p>\n<ul class=\"options\">\n<li>list</li>\n<li>arrayList</li>\n<li class=\"correct\">set</li>\n<li>linkedlist</li>\n</ul>\n<blockquote>\n<p>哪个集合不允许其元素重复？</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>Consider a class that uses the following variables to implement an array-based stack:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>code syntax/logic for adding an item x to the stack can be written as</p>\n<ul class=\"options\">\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  \t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Overflow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  \ttop <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  \ts<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li class=\"correct\"><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ts<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ttop<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Overflow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ts<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ttop <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li><code>s.add(top, x);</code></li>\n</ul>\n<blockquote>\n<p>假设一个类，将使用以下变量来实现基于数组的堆栈<br />\n将项目 x 添加到堆栈的代码语法 / 逻辑可以写成？</p>\n</blockquote>\n</li>\n<li class=\"quiz true\">\n<p>A constructor is a method that is automatically called when an object is created.</p>\n<blockquote>\n<p>构造函数是一种在创建对象时自动调用的方法。</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>In Java, you do not use the new operator when you use a(n):</p>\n<ul class=\"options\">\n<li>array size declarator</li>\n<li class=\"correct\">initialization list</li>\n<li>two-dimensional array</li>\n<li>all choices are correct</li>\n</ul>\n<blockquote>\n<p>在 Java 中，当使用 <code>a(n)</code>  时，请勿使用 <code>new</code>  运算符：</p>\n<ul class=\"options\">\n<li>数组大小声明符</li>\n<li>初始化列表 ✔️</li>\n<li>二维数组</li>\n<li>所有选择都是正确的</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>When you are working with a <span class=\"gap\"></span> , you are using a storage location that holds a piece of data.</p>\n<ul class=\"options\">\n<li class=\"correct\">primitive variable</li>\n<li>reference variable</li>\n<li>numeric literal</li>\n<li>binary number</li>\n</ul>\n<blockquote>\n<p>使用 <span class=\"gap\"></span> 时，您使用的是一个存储数据的存储位置。</p>\n<ul class=\"options\">\n<li>基本变量 ✔️</li>\n<li>参考变量</li>\n<li>数字文字</li>\n<li>二进制数</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>The following UML diagram entry  <code>setBalance(h : double) : void</code> ，this is a <span class=\"gap\"></span> method with a parameter of data type <span class=\"gap\"></span> and does not return a value.</p>\n<ul class=\"options\">\n<li class=\"correct\">public, double</li>\n<li>public, float</li>\n<li>private, float</li>\n<li>private, double</li>\n</ul>\n<blockquote>\n<p>UML 图条目是一个<span class=\"gap\"></span>方法，其参数类型为数据类型<span class=\"gap\"></span>，并且不返回值。</p>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>Explain the feature of overload.</p>\n<blockquote>\n<p>解释重载的功能。<br />\nTwo or more methods in a class may have the same name and they have different parameter lists.<br />\n 一个类中的两个或多个方法可能具有相同的名称，并且具有不同的参数列表。</p>\n</blockquote>\n</li>\n<li class=\"quiz\">\n<p>What is wrong with the following code?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassB</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ClassA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ClassB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> init <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul class=\"options\">\n<li>Nothing is wrong with the code.</li>\n<li>The method super is not defined.</li>\n<li class=\"correct\">The call to the method super must be the first statement in the constructor.</li>\n<li>No values may be passed to super.</li>\n</ul>\n<blockquote>\n<p>以下代码有什么问题？</p>\n<ul class=\"options\">\n<li>代码没有错。</li>\n<li>未定义方法 super。</li>\n<li>对方法 super 的调用必须是构造函数中的第一条语句。 ✔️</li>\n<li>不能将任何值传递给 super。</li>\n</ul>\n</blockquote>\n</li>\n<li class=\"quiz essay\">\n<p>补充下列代码，要求返回最大值</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> myList <span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">//return the greatest integer value in the ArrayList</span></pre></td></tr><tr class=\"marked\"><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li class=\"quiz essay\">\n<p>填写下列代码，实现参数值得交换。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">66</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">44</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\ta<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMD 510. Object-Oriented App Develop",
                "试题",
                "Java"
            ]
        },
        {
            "id": "https://shoka.lostyu.me/computer-science/mse/itmd-510/week-8/",
            "url": "https://shoka.lostyu.me/computer-science/mse/itmd-510/week-8/",
            "title": "Week 8. Collections",
            "date_published": "2020-10-17T12:11:42.000Z",
            "content_html": "<h1 id=\"notes\"><a class=\"anchor\" href=\"#notes\">#</a> Notes</h1>\n<h2 id=\"collections\"><a class=\"anchor\" href=\"#collections\">#</a> Collections</h2>\n<p>A Collection is a group of individual objects represented as a single unit.<br />\n 集合是一组表示为单个单元的单个对象。</p>\n<p>Java provides Collection Framework which defines several classes and interfaces to represent a group of objects as a single unit.<br />\nJava 提供了 Collection Framework，它定义了几个类和接口，来将一组对象表示为单个单元。</p>\n<p><img data-src=\"https://i.loli.net/2020/10/22/ktjd2m7MrBZl93s.png\" alt=\"\" /></p>\n<dl>\n<dt>Collection 集合</dt>\n<dd>Root interface with basic methods like  <code>add()</code> ,  <code>remove()</code> ,  <code>contains()</code> ,  <code>isEmpty()</code> ,  <code>addAll()</code> , ... etc.<br />\n 带有基本方法的根接口</dd>\n<dt>Set</dt>\n<dd>Doesn't allow duplicates.<br />\n 不允许重复。</dd>\n<dt>List</dt>\n<dd>Can contain duplicates and elements are ordered.<br />\n 可以包含重复项，并且元素是有序的。</dd>\n<dt>Queue 队列</dt>\n<dd>Typically order elements in FIFO order.<br />\n 通常以 FIFO 顺序对元素进行排序</dd>\n</dl>\n<h2 id=\"some-cool-applicabilities-using-collections\"><a class=\"anchor\" href=\"#some-cool-applicabilities-using-collections\">#</a> Some cool applicabilities using Collections</h2>\n<table>\n<tbody>\n<tr>\n<td>sorting</td>\n<td>shuffle</td>\n</tr>\n<tr>\n<td>reversing</td>\n<td>binarySearch</td>\n</tr>\n<tr>\n<td>auto copy</td>\n<td>rotate (shift elements by distance)</td>\n</tr>\n<tr>\n<td>frequency counter</td>\n<td></td>\n</tr>\n<tr>\n<td>comparing</td>\n<td></td>\n</tr>\n<tr>\n<td>lambdas</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"sorts-排序\"><a class=\"anchor\" href=\"#sorts-排序\">#</a> SORTS 排序</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Java program to demonstrate working of Collections.sort() </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CollectionTest</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// Create a list of strings </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> trendList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        trendList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data science\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        trendList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"digital forensics\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        trendList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cloud computing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/* Collections.sort method is sorting the </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        elements of ArrayList in ascending order. */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>trendList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// Let us print the sorted list </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"List after the use of\"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                            <span class=\"token string\">\" Collection.sort() :\\n\"</span> <span class=\"token operator\">+</span> trendList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Output:</p>\n<pre><code>List after the use of Collection.sort() :\n[cloud computing, data science, digital forensics]\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Java program to demonstrate working of Collections.reverse() </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// ::</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>trendList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>trendList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// Let us print the sorted list </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"List after the use of\"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                            <span class=\"token string\">\" Collection.sort() :\\n\"</span> <span class=\"token operator\">+</span> trendList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Output:</p>\n<pre><code>List after the use of Collection.reverse() :\n[digital forensics, data science, cloud computing]\n</code></pre>\n<h3 id=\"autocopy-n-copies\"><a class=\"anchor\" href=\"#autocopy-n-copies\">#</a> AUTOCOPY (n copies)</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Create copies of some objects. </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">nCopies</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Java Power\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Displaying the list returned </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The list returned is :\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Iterator</span> itr <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Output:</p>\n<pre><code>The list returned is :\nJava Power Java Power Java Power Java Power \n</code></pre>\n<h3 id=\"frequency-counter\"><a class=\"anchor\" href=\"#frequency-counter\">#</a> FREQUENCY COUNTER</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// count the frequency of the words \"data science\" </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The frequency of the word data science is: \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                    <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">frequency</span><span class=\"token punctuation\">(</span>trendList<span class=\"token punctuation\">,</span> <span class=\"token string\">\"data science\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Output:</p>\n<pre><code>The frequency of the word data science is: 1\n</code></pre>\n<h3 id=\"comparators\"><a class=\"anchor\" href=\"#comparators\">#</a> COMPARATORS</h3>\n<ul>\n<li>\n<p>Interface allows <ins>multiple</ins> sorting sequences (ex. Name, id, and price, etc.)</p>\n</li>\n<li>\n<p>Uses  <code>compare()</code>  method to sort elements<br />\n <code>compare()</code>  takes 2 elements as arguments</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> obj2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>Comparator is found in  <code>java.util</code>  package.</p>\n</li>\n</ul>\n<h4 id=\"action-plan\"><a class=\"anchor\" href=\"#action-plan\">#</a> Action plan</h4>\n<ul>\n<li>Create a class to implement the interface</li>\n<li>Use  <code>Arrays.sort</code>  to sort the class objects</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>example</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tsize <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tweight <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DogSizeComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dog</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> \t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dog</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Dog</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span>size <span class=\"token operator\">-</span> o2<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DogWeightComparator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dog</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> \t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dog</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Dog</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">-</span> o2<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArraySort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> \t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token class-name\">Dog</span> d1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token class-name\">Dog</span> d2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token class-name\">Dog</span> d3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token class-name\">Dog</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dogArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>d1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">,</span> d3<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token function\">printDogs</span><span class=\"token punctuation\">(</span>dogArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>dogArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DogSizeComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token function\">printDogs</span><span class=\"token punctuation\">(</span>dogArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>dogArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DogWeightComparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token function\">printDogs</span><span class=\"token punctuation\">(</span>dogArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> \t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printDogs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dog</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dogs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dog</span> d<span class=\"token operator\">:</span> dogs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size=\"</span><span class=\"token operator\">+</span>d<span class=\"token punctuation\">.</span>size <span class=\"token operator\">+</span> <span class=\"token string\">\" weight=\"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                  d<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre> \t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Output:</p>\n<pre><code>size=2 weight=50 size=1 weight=30 size=3 weight=40 \nsize=1 weight=30 size=2 weight=50 size=3 weight=40 \nsize=1 weight=30 size=3 weight=40 size=2 weight=50 \n</code></pre>\n<h2 id=\"queue-interface\"><a class=\"anchor\" href=\"#queue-interface\">#</a> Queue Interface</h2>\n<p>The Queue interface is available in  <code>java.util</code>  package and extends the Collection interface.<br />\nQueue 接口在 <code>java.util</code>  包中可用，并且扩展了 Collection 接口。</p>\n<p>The queue collection is used to hold the elements about to be processed and provides various operations like the insertion, removal etc.<br />\n 队列集合用于保存将要处理的元素，并提供各种操作，如插入，删除等。</p>\n<p>It is an ordered list of objects with its use limited to insert elements at the end of the list and deleting elements from the start of list i.e. it follows the FIFO or the First-In-First-Out principle.<br />\n 它是对象的有序列表，其使用仅限于在列表末尾插入元素，并从头开始删除元素，即遵循 FIFO 或先进先出原则。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Queue example: Implements LinkedList</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Queue</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QueueExample</span>  <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> q <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// Adds elements &#123;0, 1, 2, 3, 4&#125; to queue </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr class=\"marked\"><td data-num=\"11\"></td><td><pre>     q<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// Display contents of the queue. </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elements of queue-\"</span><span class=\"token operator\">+</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// To remove the head of queue. </span></pre></td></tr><tr class=\"marked\"><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> removedele <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"removed element-\"</span> <span class=\"token operator\">+</span> removedele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// To view the head of queue </span></pre></td></tr><tr class=\"marked\"><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span> head <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"head of queue-\"</span> <span class=\"token operator\">+</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//Show queue size </span></pre></td></tr><tr class=\"marked\"><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Size of queue-\"</span> <span class=\"token operator\">+</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"map-interface\"><a class=\"anchor\" href=\"#map-interface\">#</a> Map Interface</h2>\n<dl>\n<dt>Map</dt>\n<dd>general key/value<br />\nmap interface</dd>\n<dt>HashMap</dt>\n<dd>most widely<br />\nused Map<br />\nHashMap does <ins>not</ins> allow duplicate keys however it <ins>allows</ins> to have duplicate values.</dd>\n</dl>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Implementation example: Map generic type interface</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> states <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// store values in map</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>states<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ca\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"California\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>states<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"az\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Arizona\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>states<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mn\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Minnesota\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>states<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"New Jersey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// retrieve values from map</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>states<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ca\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"California\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>states<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nj\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns \"New Jersey\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// Pull out live Collection of all the values.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> values <span class=\"token operator\">=</span> states<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [Minnesota, New Jersey,… Arizona] </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// Use keySet to pull out live set of the keys -- use to print key->value for the whole map. </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// The order of the keys is random for a HashSet.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> states<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token operator\">:</span>keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">\"->\"</span> <span class=\"token operator\">+</span> states<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://i.loli.net/2020/11/01/W49TofPk1nGvJOH.png\" alt=\"\" /></p>\n<p>Output:</p>\n<pre><code>mn-&gt;Minnesota\nnj-&gt;New Jersey\nca-&gt;The Golden State \naz-&gt;Arizona \n</code></pre>\n",
            "tags": [
                "计算机科学",
                "Master of Software Engineering",
                "ITMD 510. Object-Oriented App Develop",
                "Java"
            ]
        }
    ]
}